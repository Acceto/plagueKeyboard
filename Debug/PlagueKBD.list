
PlagueKBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a07c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a470  0800a470  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a470  0800a470  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a470  0800a470  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a470  0800a470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002274  2000015c  0800a5d4  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d0  0800a5d4  000223d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1c6  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004462  00000000  00000000  0003d34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000417b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056f1  00000000  00000000  000439c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ca4  00000000  00000000  000490b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f41d  00000000  00000000  0005fd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef17a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  000ef1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a174 	.word	0x0800a174

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	0800a174 	.word	0x0800a174

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fe88 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f83e 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f898 	bl	8000290 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f006 fca8 	bl	8006ab4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of keyboardRecordQueue */
  keyboardRecordQueueHandle = osMessageQueueNew (16, sizeof(KEYMSGQUEUE_OBJ_t), &keyboardRecordQueue_attributes);
 8000164:	4a11      	ldr	r2, [pc, #68]	; (80001ac <main+0x5c>)
 8000166:	210d      	movs	r1, #13
 8000168:	2010      	movs	r0, #16
 800016a:	f006 fde1 	bl	8006d30 <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <main+0x60>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a0f      	ldr	r2, [pc, #60]	; (80001b4 <main+0x64>)
 8000176:	2100      	movs	r1, #0
 8000178:	480f      	ldr	r0, [pc, #60]	; (80001b8 <main+0x68>)
 800017a:	f006 fd01 	bl	8006b80 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <main+0x6c>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of kbdMatrixRead */
  kbdMatrixReadHandle = osThreadNew(StartTask_kbdMatrixRead, NULL, &kbdMatrixRead_attributes);
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <main+0x70>)
 8000186:	2100      	movs	r1, #0
 8000188:	480e      	ldr	r0, [pc, #56]	; (80001c4 <main+0x74>)
 800018a:	f006 fcf9 	bl	8006b80 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <main+0x78>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of processRecord */
  processRecordHandle = osThreadNew(StartTask_processRecord, NULL, &processRecord_attributes);
 8000194:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <main+0x7c>)
 8000196:	2100      	movs	r1, #0
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <main+0x80>)
 800019a:	f006 fcf1 	bl	8006b80 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <main+0x84>)
 80001a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a4:	f006 fcb8 	bl	8006b18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a8:	e7fe      	b.n	80001a8 <main+0x58>
 80001aa:	bf00      	nop
 80001ac:	0800a298 	.word	0x0800a298
 80001b0:	20001bcc 	.word	0x20001bcc
 80001b4:	0800a22c 	.word	0x0800a22c
 80001b8:	08000385 	.word	0x08000385
 80001bc:	20001bc8 	.word	0x20001bc8
 80001c0:	0800a250 	.word	0x0800a250
 80001c4:	08000399 	.word	0x08000399
 80001c8:	20001bd4 	.word	0x20001bd4
 80001cc:	0800a274 	.word	0x0800a274
 80001d0:	080003ad 	.word	0x080003ad
 80001d4:	20001bd0 	.word	0x20001bd0

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f009 ffbc 	bl	800a164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fcb8 	bl	8002ba4 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f8c1 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f002 ff22 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f8ab 	bl	80003c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800026a:	2310      	movs	r3, #16
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800026e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000272:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f003 f87c 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000282:	f000 f89d 	bl	80003c0 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a4:	4b34      	ldr	r3, [pc, #208]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a33      	ldr	r2, [pc, #204]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b31      	ldr	r3, [pc, #196]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2d      	ldr	r2, [pc, #180]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80002ec:	2200      	movs	r2, #0
 80002ee:	f64f 41e6 	movw	r1, #64742	; 0xfce6
 80002f2:	4822      	ldr	r0, [pc, #136]	; (800037c <MX_GPIO_Init+0xec>)
 80002f4:	f001 f8c3 	bl	800147e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002fe:	4820      	ldr	r0, [pc, #128]	; (8000380 <MX_GPIO_Init+0xf0>)
 8000300:	f001 f8bd 	bl	800147e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000304:	23ff      	movs	r3, #255	; 0xff
 8000306:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <MX_GPIO_Init+0xf0>)
 8000318:	f000 ff16 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800031c:	2301      	movs	r3, #1
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000324:	2302      	movs	r3, #2
 8000326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	4813      	ldr	r0, [pc, #76]	; (800037c <MX_GPIO_Init+0xec>)
 8000330:	f000 ff0a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000334:	f64f 43e6 	movw	r3, #64742	; 0xfce6
 8000338:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xec>)
 800034e:	f000 fefb 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2302      	movs	r3, #2
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_GPIO_Init+0xf0>)
 800036c:	f000 feec 	bl	8001148 <HAL_GPIO_Init>

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40010800 	.word	0x40010800

08000384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800038c:	f009 fafe 	bl	800998c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000390:	20c8      	movs	r0, #200	; 0xc8
 8000392:	f006 fc9f 	bl	8006cd4 <osDelay>
 8000396:	e7fb      	b.n	8000390 <StartDefaultTask+0xc>

08000398 <StartTask_kbdMatrixRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_kbdMatrixRead */
void StartTask_kbdMatrixRead(void *argument)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_kbdMatrixRead */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 80003a0:	2032      	movs	r0, #50	; 0x32
 80003a2:	f006 fc97 	bl	8006cd4 <osDelay>

    kbdMatrixRead();
 80003a6:	f000 f98f 	bl	80006c8 <kbdMatrixRead>
  {
 80003aa:	e7f9      	b.n	80003a0 <StartTask_kbdMatrixRead+0x8>

080003ac <StartTask_processRecord>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_processRecord */
void StartTask_processRecord(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartTask_processRecord */
  /* Infinite loop */
  for(;;)
  {
    osDelay(30);
 80003b4:	201e      	movs	r0, #30
 80003b6:	f006 fc8d 	bl	8006cd4 <osDelay>
    processRecord();
 80003ba:	f000 fb07 	bl	80009cc <processRecord>
  {
 80003be:	e7f9      	b.n	80003b4 <StartTask_processRecord+0x8>

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <HAL_MspInit+0x68>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a17      	ldr	r2, [pc, #92]	; (8000434 <HAL_MspInit+0x68>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x68>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x68>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a11      	ldr	r2, [pc, #68]	; (8000434 <HAL_MspInit+0x68>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x68>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	210f      	movs	r1, #15
 8000406:	f06f 0001 	mvn.w	r0, #1
 800040a:	f000 fe66 	bl	80010da <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x6c>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x6c>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x4>

08000442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <MemManage_Handler+0x4>

0800044e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <BusFault_Handler+0x4>

08000454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler+0x4>

0800045a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046a:	f000 fd43 	bl	8000ef4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800046e:	f008 fad3 	bl	8008a18 <xTaskGetSchedulerState>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d001      	beq.n	800047c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000478:	f009 f82e 	bl	80094d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000486:	f001 f943 	bl	8001710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200020e4 	.word	0x200020e4

08000494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <kbdRecord>:
uint8_t currentKeymapLevel=0;
uint8_t currentModifier=0;

extern osMessageQueueId_t keyboardRecordQueueHandle;

char kbdRecord(uint8_t *currentPressedKeys ){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

	int i,j;
	int keyIdx=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
	char matrixChanged = False;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char found=False;
 80004b2:	2300      	movs	r3, #0
 80004b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t newKeyPressedMsg[KEY_PRESS_NB_MAX]={0};
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
 80004bc:	f107 031c 	add.w	r3, r7, #28
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	809a      	strh	r2, [r3, #4]
	KEYMSGQUEUE_OBJ_t keyMsgQueueObj;

	//changement tableau boutons appuyés
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004ca:	e010      	b.n	80004ee <kbdRecord+0x4e>
	{
		if (currentPressedKeys[i]!=globalPressedKeys[i])
 80004cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4979      	ldr	r1, [pc, #484]	; (80006bc <kbdRecord+0x21c>)
 80004d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d8:	440b      	add	r3, r1
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d003      	beq.n	80004e8 <kbdRecord+0x48>
		{
			matrixChanged= True;
 80004e0:	2301      	movs	r3, #1
 80004e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 80004e6:	e005      	b.n	80004f4 <kbdRecord+0x54>
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80004e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ea:	3301      	adds	r3, #1
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	ddeb      	ble.n	80004cc <kbdRecord+0x2c>
		}
	}


	if(isValueInArray(KBD_LAYOUT_UP,currentPressedKeys,KEY_PRESS_NB_MAX)){
 80004f4:	220a      	movs	r2, #10
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	20fe      	movs	r0, #254	; 0xfe
 80004fa:	f000 f927 	bl	800074c <isValueInArray>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d005      	beq.n	8000510 <kbdRecord+0x70>
		currentKeymapLevel++;
 8000504:	4b6e      	ldr	r3, [pc, #440]	; (80006c0 <kbdRecord+0x220>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b6c      	ldr	r3, [pc, #432]	; (80006c0 <kbdRecord+0x220>)
 800050e:	701a      	strb	r2, [r3, #0]
	}

	if(isValueInArray(KBD_LAYOUT_DOWN,currentPressedKeys,KEY_PRESS_NB_MAX)){
 8000510:	220a      	movs	r2, #10
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	20ff      	movs	r0, #255	; 0xff
 8000516:	f000 f919 	bl	800074c <isValueInArray>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d005      	beq.n	800052c <kbdRecord+0x8c>
		currentKeymapLevel--;
 8000520:	4b67      	ldr	r3, [pc, #412]	; (80006c0 <kbdRecord+0x220>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <kbdRecord+0x220>)
 800052a:	701a      	strb	r2, [r3, #0]
	}


	if (matrixChanged==True)
 800052c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000530:	2b01      	cmp	r3, #1
 8000532:	f040 80aa 	bne.w	800068a <kbdRecord+0x1ea>
	{

		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	220d      	movs	r2, #13
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f009 fe10 	bl	800a164 <memset>
		keyIdx=0;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	; 0x24

		//detect newly pressed keys
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000548:	2300      	movs	r3, #0
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800054c:	e033      	b.n	80005b6 <kbdRecord+0x116>
		{
			found=False;
 800054e:	2300      	movs	r3, #0
 8000550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			//find globalPressedKeys elmt in currentPressedKeys
			if (currentPressedKeys[i]!=0x00){
 8000554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d027      	beq.n	80005b0 <kbdRecord+0x110>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 8000560:	2300      	movs	r3, #0
 8000562:	62bb      	str	r3, [r7, #40]	; 0x28
 8000564:	e010      	b.n	8000588 <kbdRecord+0xe8>
					if (currentPressedKeys[i]==globalPressedKeys[j]){
 8000566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4953      	ldr	r1, [pc, #332]	; (80006bc <kbdRecord+0x21c>)
 8000570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000572:	440b      	add	r3, r1
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d103      	bne.n	8000582 <kbdRecord+0xe2>
						found=True;
 800057a:	2301      	movs	r3, #1
 800057c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 8000580:	e005      	b.n	800058e <kbdRecord+0xee>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 8000582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000584:	3301      	adds	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
 8000588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800058a:	2b09      	cmp	r3, #9
 800058c:	ddeb      	ble.n	8000566 <kbdRecord+0xc6>
					}
				}

				//If not found, key newly pressed
				if (found==False)
 800058e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10c      	bne.n	80005b0 <kbdRecord+0x110>
				{
					keyMsgQueueObj.Buf[keyIdx]=currentPressedKeys[i];
 8000596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	7819      	ldrb	r1, [r3, #0]
 800059e:	f107 0208 	add.w	r2, r7, #8
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3301      	adds	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80005b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b2:	3301      	adds	r3, #1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	2b09      	cmp	r3, #9
 80005ba:	ddc8      	ble.n	800054e <kbdRecord+0xae>

		}


		//send to processRecord in case of key(s) newly pressed
		if (keyIdx != 0){
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00e      	beq.n	80005e0 <kbdRecord+0x140>
				keyMsgQueueObj.KeyNbr=keyIdx;
 80005c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	74bb      	strb	r3, [r7, #18]
				keyMsgQueueObj.Action=PRESS;
 80005c8:	2300      	movs	r3, #0
 80005ca:	753b      	strb	r3, [r7, #20]
				keyMsgQueueObj.KeyType=UNICODE;
 80005cc:	2302      	movs	r3, #2
 80005ce:	74fb      	strb	r3, [r7, #19]
				osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <kbdRecord+0x224>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	f107 0108 	add.w	r1, r7, #8
 80005d8:	2300      	movs	r3, #0
 80005da:	2200      	movs	r2, #0
 80005dc:	f006 fc2e 	bl	8006e3c <osMessageQueuePut>




		//detect newly released keys
		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	220d      	movs	r2, #13
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f009 fdbb 	bl	800a164 <memset>
		keyIdx=0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005f6:	e033      	b.n	8000660 <kbdRecord+0x1c0>
		{
			found=False;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			if (globalPressedKeys[i]!=0x00)
 80005fe:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <kbdRecord+0x21c>)
 8000600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d027      	beq.n	800065a <kbdRecord+0x1ba>
			{
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 800060a:	2300      	movs	r3, #0
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
 800060e:	e010      	b.n	8000632 <kbdRecord+0x192>
				{
					if (globalPressedKeys[i]==currentPressedKeys[j]){
 8000610:	4a2a      	ldr	r2, [pc, #168]	; (80006bc <kbdRecord+0x21c>)
 8000612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000614:	4413      	add	r3, r2
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	440b      	add	r3, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d103      	bne.n	800062c <kbdRecord+0x18c>
						found=True;
 8000624:	2301      	movs	r3, #1
 8000626:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 800062a:	e005      	b.n	8000638 <kbdRecord+0x198>
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 800062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062e:	3301      	adds	r3, #1
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
 8000632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000634:	2b09      	cmp	r3, #9
 8000636:	ddeb      	ble.n	8000610 <kbdRecord+0x170>
					}
				}

				//If not found, key newly released
				if (found==False)
 8000638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10c      	bne.n	800065a <kbdRecord+0x1ba>
				{

					keyMsgQueueObj.Buf[keyIdx]= globalPressedKeys[i];
 8000640:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <kbdRecord+0x21c>)
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	4413      	add	r3, r2
 8000646:	7819      	ldrb	r1, [r3, #0]
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	4413      	add	r3, r2
 8000650:	460a      	mov	r2, r1
 8000652:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	3301      	adds	r3, #1
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	3301      	adds	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000662:	2b09      	cmp	r3, #9
 8000664:	ddc8      	ble.n	80005f8 <kbdRecord+0x158>
				}
			}
		}

		//send to processRecord in case of key(s) newly released
		if (keyIdx != 0){
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00e      	beq.n	800068a <kbdRecord+0x1ea>
			keyMsgQueueObj.KeyNbr=keyIdx;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	b2db      	uxtb	r3, r3
 8000670:	74bb      	strb	r3, [r7, #18]
			keyMsgQueueObj.Action=RELEASE;
 8000672:	2301      	movs	r3, #1
 8000674:	753b      	strb	r3, [r7, #20]
			keyMsgQueueObj.KeyType=UNICODE;
 8000676:	2302      	movs	r3, #2
 8000678:	74fb      	strb	r3, [r7, #19]
			osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <kbdRecord+0x224>)
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	f006 fbd9 	bl	8006e3c <osMessageQueuePut>

	}


	//copy currentPressedKeys in globalPressedKeys
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800068e:	e00b      	b.n	80006a8 <kbdRecord+0x208>
	{
		globalPressedKeys[i]=currentPressedKeys[i];
 8000690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <kbdRecord+0x21c>)
 800069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069c:	4413      	add	r3, r2
 800069e:	460a      	mov	r2, r1
 80006a0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80006a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a4:	3301      	adds	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	ddf0      	ble.n	8000690 <kbdRecord+0x1f0>
	}

	return matrixChanged;
 80006ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23

}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3730      	adds	r7, #48	; 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000178 	.word	0x20000178
 80006c0:	20000182 	.word	0x20000182
 80006c4:	20001bcc 	.word	0x20001bcc

080006c8 <kbdMatrixRead>:


void kbdMatrixRead(void){
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0

	matrixState *matrixState;
	uint8_t currentPressedKeys[KEY_PRESS_NB_MAX];
	int i;

	memset(currentPressedKeys, 0, sizeof(currentPressedKeys));
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	220a      	movs	r2, #10
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f009 fd45 	bl	800a164 <memset>
	matrixState=ReadMatrixState();
 80006da:	f000 f925 	bl	8000928 <ReadMatrixState>
 80006de:	6138      	str	r0, [r7, #16]


	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e020      	b.n	8000728 <kbdMatrixRead+0x60>
		currentPressedKeys[i]=keymap_azerty[currentKeymapLevel][(matrixState->keyTab[i][1])-1][(matrixState->keyTab[i][0])-1];
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <kbdMatrixRead+0x7c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461c      	mov	r4, r3
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	1e59      	subs	r1, r3, #1
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <kbdMatrixRead+0x80>)
 8000706:	4623      	mov	r3, r4
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	4423      	add	r3, r4
 800070c:	440b      	add	r3, r1
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000716:	b2d9      	uxtb	r1, r3
 8000718:	1d3a      	adds	r2, r7, #4
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	4293      	cmp	r3, r2
 8000732:	dbd8      	blt.n	80006e6 <kbdMatrixRead+0x1e>
	}


    kbdRecord(currentPressedKeys);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff feb2 	bl	80004a0 <kbdRecord>
}
 800073c:	bf00      	nop
 800073e:	371c      	adds	r7, #28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000182 	.word	0x20000182
 8000748:	0800a2c0 	.word	0x0800a2c0

0800074c <isValueInArray>:




char isValueInArray(uint8_t val, uint8_t * array, uint8_t sizeArray){
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	int i;
	char valFound=0;
 800075c:	2300      	movs	r3, #0
 800075e:	72fb      	strb	r3, [r7, #11]
	for (i=0;i<=sizeArray;i++){
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e00b      	b.n	800077e <isValueInArray+0x32>
		if (array[i]==val)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d101      	bne.n	8000778 <isValueInArray+0x2c>
			valFound=1;
 8000774:	2301      	movs	r3, #1
 8000776:	72fb      	strb	r3, [r7, #11]
	for (i=0;i<=sizeArray;i++){
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	ddef      	ble.n	8000766 <isValueInArray+0x1a>
	}
	return valFound;
 8000786:	7afb      	ldrb	r3, [r7, #11]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <bWriteColumnState>:


#include "matrixRead.h"


void bWriteColumnState(int column, uint8_t state){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	2b07      	cmp	r3, #7
 80007a6:	d851      	bhi.n	800084c <bWriteColumnState+0xb8>
 80007a8:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <bWriteColumnState+0x1c>)
 80007aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ae:	bf00      	nop
 80007b0:	080007d1 	.word	0x080007d1
 80007b4:	080007df 	.word	0x080007df
 80007b8:	080007ed 	.word	0x080007ed
 80007bc:	080007fd 	.word	0x080007fd
 80007c0:	0800080d 	.word	0x0800080d
 80007c4:	0800081d 	.word	0x0800081d
 80007c8:	0800082d 	.word	0x0800082d
 80007cc:	0800083d 	.word	0x0800083d
	switch (column){
		case 1 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,state);
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	461a      	mov	r2, r3
 80007d4:	2102      	movs	r1, #2
 80007d6:	481f      	ldr	r0, [pc, #124]	; (8000854 <bWriteColumnState+0xc0>)
 80007d8:	f000 fe51 	bl	800147e <HAL_GPIO_WritePin>
				break;
 80007dc:	e036      	b.n	800084c <bWriteColumnState+0xb8>
		case 2 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,state);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2104      	movs	r1, #4
 80007e4:	481b      	ldr	r0, [pc, #108]	; (8000854 <bWriteColumnState+0xc0>)
 80007e6:	f000 fe4a 	bl	800147e <HAL_GPIO_WritePin>
				break;
 80007ea:	e02f      	b.n	800084c <bWriteColumnState+0xb8>
		case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,state);
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	461a      	mov	r2, r3
 80007f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f4:	4817      	ldr	r0, [pc, #92]	; (8000854 <bWriteColumnState+0xc0>)
 80007f6:	f000 fe42 	bl	800147e <HAL_GPIO_WritePin>
				break;
 80007fa:	e027      	b.n	800084c <bWriteColumnState+0xb8>
		case 4 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,state);
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	461a      	mov	r2, r3
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <bWriteColumnState+0xc0>)
 8000806:	f000 fe3a 	bl	800147e <HAL_GPIO_WritePin>
				break;
 800080a:	e01f      	b.n	800084c <bWriteColumnState+0xb8>
		case 5 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,state);
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	461a      	mov	r2, r3
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <bWriteColumnState+0xc0>)
 8000816:	f000 fe32 	bl	800147e <HAL_GPIO_WritePin>
				break;
 800081a:	e017      	b.n	800084c <bWriteColumnState+0xb8>
		case 6 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,state);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <bWriteColumnState+0xc0>)
 8000826:	f000 fe2a 	bl	800147e <HAL_GPIO_WritePin>
				break;
 800082a:	e00f      	b.n	800084c <bWriteColumnState+0xb8>
		case 7 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,state);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	461a      	mov	r2, r3
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <bWriteColumnState+0xc0>)
 8000836:	f000 fe22 	bl	800147e <HAL_GPIO_WritePin>
				break;
 800083a:	e007      	b.n	800084c <bWriteColumnState+0xb8>
		case 8 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,state);
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	461a      	mov	r2, r3
 8000840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <bWriteColumnState+0xc0>)
 8000846:	f000 fe1a 	bl	800147e <HAL_GPIO_WritePin>
				break;
 800084a:	bf00      	nop
			}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40010c00 	.word	0x40010c00

08000858 <bReadRowState>:


int bReadRowState(int row){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	int state=0;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	2b08      	cmp	r3, #8
 800086a:	d854      	bhi.n	8000916 <bReadRowState+0xbe>
 800086c:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <bReadRowState+0x1c>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	08000899 	.word	0x08000899
 8000878:	080008a7 	.word	0x080008a7
 800087c:	080008b5 	.word	0x080008b5
 8000880:	080008c3 	.word	0x080008c3
 8000884:	080008d1 	.word	0x080008d1
 8000888:	080008df 	.word	0x080008df
 800088c:	080008ed 	.word	0x080008ed
 8000890:	080008fb 	.word	0x080008fb
 8000894:	08000909 	.word	0x08000909
	switch (row){
		case 1 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8000898:	2101      	movs	r1, #1
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <bReadRowState+0xc8>)
 800089c:	f000 fdd8 	bl	8001450 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	60fb      	str	r3, [r7, #12]
			break;
 80008a4:	e037      	b.n	8000916 <bReadRowState+0xbe>
		case 2 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 80008a6:	2102      	movs	r1, #2
 80008a8:	481d      	ldr	r0, [pc, #116]	; (8000920 <bReadRowState+0xc8>)
 80008aa:	f000 fdd1 	bl	8001450 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	60fb      	str	r3, [r7, #12]
			break;
 80008b2:	e030      	b.n	8000916 <bReadRowState+0xbe>
		case 3:
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	481a      	ldr	r0, [pc, #104]	; (8000920 <bReadRowState+0xc8>)
 80008b8:	f000 fdca 	bl	8001450 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	60fb      	str	r3, [r7, #12]
			break;
 80008c0:	e029      	b.n	8000916 <bReadRowState+0xbe>
		case 4 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 80008c2:	2108      	movs	r1, #8
 80008c4:	4816      	ldr	r0, [pc, #88]	; (8000920 <bReadRowState+0xc8>)
 80008c6:	f000 fdc3 	bl	8001450 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	60fb      	str	r3, [r7, #12]
			break;
 80008ce:	e022      	b.n	8000916 <bReadRowState+0xbe>
		case 5 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 80008d0:	2110      	movs	r1, #16
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <bReadRowState+0xc8>)
 80008d4:	f000 fdbc 	bl	8001450 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	60fb      	str	r3, [r7, #12]
			break;
 80008dc:	e01b      	b.n	8000916 <bReadRowState+0xbe>
		case 6 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80008de:	2120      	movs	r1, #32
 80008e0:	480f      	ldr	r0, [pc, #60]	; (8000920 <bReadRowState+0xc8>)
 80008e2:	f000 fdb5 	bl	8001450 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]
			break;
 80008ea:	e014      	b.n	8000916 <bReadRowState+0xbe>
		case 7 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <bReadRowState+0xc8>)
 80008f0:	f000 fdae 	bl	8001450 <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	60fb      	str	r3, [r7, #12]
			break;
 80008f8:	e00d      	b.n	8000916 <bReadRowState+0xbe>
		case 8 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <bReadRowState+0xc8>)
 80008fe:	f000 fda7 	bl	8001450 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	60fb      	str	r3, [r7, #12]
			break;
 8000906:	e006      	b.n	8000916 <bReadRowState+0xbe>
		case 9:
			state=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000908:	2101      	movs	r1, #1
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <bReadRowState+0xcc>)
 800090c:	f000 fda0 	bl	8001450 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]
			break;
 8000914:	bf00      	nop
	}
	return state;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40010800 	.word	0x40010800
 8000924:	40010c00 	.word	0x40010c00

08000928 <ReadMatrixState>:
 * The function then return the pointer to int array size 2 containing:
 * 			- array[0]=column
 * 			- array[1]=row
 * if no key is pressed, it then return {0,0}
 */
matrixState * ReadMatrixState(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	int col=0;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
	int row=0;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
	static matrixState matrixState;

	matrixState.keyCurrentEntriesNb=0;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <ReadMatrixState+0x9c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	memset(matrixState.keyTab, 0, sizeof matrixState.keyTab);
 800093c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000940:	2100      	movs	r1, #0
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <ReadMatrixState+0xa0>)
 8000944:	f009 fc0e 	bl	800a164 <memset>


	for(col=1;col<=8;col++){
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	e031      	b.n	80009b2 <ReadMatrixState+0x8a>

		bWriteColumnState(col,1);
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff1f 	bl	8000794 <bWriteColumnState>

		for (row=1;row<=9;row++)
 8000956:	2301      	movs	r3, #1
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	e020      	b.n	800099e <ReadMatrixState+0x76>
			{
				if (bReadRowState(row))
 800095c:	6838      	ldr	r0, [r7, #0]
 800095e:	f7ff ff7b 	bl	8000858 <bReadRowState>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d017      	beq.n	8000998 <ReadMatrixState+0x70>
				{
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][0]=col;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <ReadMatrixState+0x9c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	b291      	uxth	r1, r2
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <ReadMatrixState+0x9c>)
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	460a      	mov	r2, r1
 8000978:	805a      	strh	r2, [r3, #2]
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][1]=row;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <ReadMatrixState+0x9c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	b291      	uxth	r1, r2
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <ReadMatrixState+0x9c>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	460a      	mov	r2, r1
 800098a:	809a      	strh	r2, [r3, #4]
					matrixState.keyCurrentEntriesNb++;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <ReadMatrixState+0x9c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <ReadMatrixState+0x9c>)
 8000996:	701a      	strb	r2, [r3, #0]
		for (row=1;row<=9;row++)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2b09      	cmp	r3, #9
 80009a2:	dddb      	ble.n	800095c <ReadMatrixState+0x34>
				}

			}
		bWriteColumnState(col,0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fef4 	bl	8000794 <bWriteColumnState>
	for(col=1;col<=8;col++){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	ddca      	ble.n	800094e <ReadMatrixState+0x26>
	}
	return &matrixState;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <ReadMatrixState+0x9c>)

}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000184 	.word	0x20000184
 80009c8:	20000186 	.word	0x20000186

080009cc <processRecord>:


void processU*/


void processRecord(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
	KEYMSGQUEUE_OBJ_t keyMsgQueueObj;
	uint32_t queueCount;
	osStatus_t status;
	uint8_t i,keycodeIdx;

	queueCount= osMessageQueueGetCount(keyboardRecordQueueHandle);
 80009d2:	4bad      	ldr	r3, [pc, #692]	; (8000c88 <processRecord+0x2bc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f006 fb16 	bl	8007008 <osMessageQueueGetCount>
 80009dc:	61b8      	str	r0, [r7, #24]

	if (queueCount>=1){
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 8210 	beq.w	8000e06 <processRecord+0x43a>
		status=osMessageQueueGet(keyboardRecordQueueHandle,&keyMsgQueueObj,NULL,0U);
 80009e6:	4ba8      	ldr	r3, [pc, #672]	; (8000c88 <processRecord+0x2bc>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	1d39      	adds	r1, r7, #4
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	f006 fa98 	bl	8006f24 <osMessageQueueGet>
 80009f4:	6178      	str	r0, [r7, #20]

		if(keyMsgQueueObj.Action==PRESS)
 80009f6:	7c3b      	ldrb	r3, [r7, #16]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f040 80f2 	bne.w	8000be2 <processRecord+0x216>
		{

			keycodeIdx=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000a02:	4ba2      	ldr	r3, [pc, #648]	; (8000c8c <processRecord+0x2c0>)
 8000a04:	461a      	mov	r2, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000a0c:	4ba0      	ldr	r3, [pc, #640]	; (8000c90 <processRecord+0x2c4>)
 8000a0e:	785a      	ldrb	r2, [r3, #1]
 8000a10:	4b9e      	ldr	r3, [pc, #632]	; (8000c8c <processRecord+0x2c0>)
 8000a12:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	77fb      	strb	r3, [r7, #31]
 8000a18:	e0d9      	b.n	8000bce <processRecord+0x202>
			{

				switch (keyMsgQueueObj.Buf[i])
 8000a1a:	7ffb      	ldrb	r3, [r7, #31]
 8000a1c:	f107 0220 	add.w	r2, r7, #32
 8000a20:	4413      	add	r3, r2
 8000a22:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a26:	3be0      	subs	r3, #224	; 0xe0
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	d873      	bhi.n	8000b14 <processRecord+0x148>
 8000a2c:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <processRecord+0x68>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a55 	.word	0x08000a55
 8000a38:	08000a6d 	.word	0x08000a6d
 8000a3c:	08000a85 	.word	0x08000a85
 8000a40:	08000a9d 	.word	0x08000a9d
 8000a44:	08000ab5 	.word	0x08000ab5
 8000a48:	08000acd 	.word	0x08000acd
 8000a4c:	08000ae5 	.word	0x08000ae5
 8000a50:	08000afd 	.word	0x08000afd
					{

					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LCTRL);
 8000a54:	4b8e      	ldr	r3, [pc, #568]	; (8000c90 <processRecord+0x2c4>)
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <processRecord+0x2c0>)
 8000a60:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a62:	4b8a      	ldr	r3, [pc, #552]	; (8000c8c <processRecord+0x2c0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b8a      	ldr	r3, [pc, #552]	; (8000c90 <processRecord+0x2c4>)
 8000a68:	705a      	strb	r2, [r3, #1]
						break;
 8000a6a:	e0ad      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LSHIFT);
 8000a6c:	4b88      	ldr	r3, [pc, #544]	; (8000c90 <processRecord+0x2c4>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b85      	ldr	r3, [pc, #532]	; (8000c8c <processRecord+0x2c0>)
 8000a78:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a7a:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <processRecord+0x2c0>)
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4b84      	ldr	r3, [pc, #528]	; (8000c90 <processRecord+0x2c4>)
 8000a80:	705a      	strb	r2, [r3, #1]
						break;
 8000a82:	e0a1      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LALT);
 8000a84:	4b82      	ldr	r3, [pc, #520]	; (8000c90 <processRecord+0x2c4>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b7f      	ldr	r3, [pc, #508]	; (8000c8c <processRecord+0x2c0>)
 8000a90:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a92:	4b7e      	ldr	r3, [pc, #504]	; (8000c8c <processRecord+0x2c0>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b7e      	ldr	r3, [pc, #504]	; (8000c90 <processRecord+0x2c4>)
 8000a98:	705a      	strb	r2, [r3, #1]
						break;
 8000a9a:	e095      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LMETA);
 8000a9c:	4b7c      	ldr	r3, [pc, #496]	; (8000c90 <processRecord+0x2c4>)
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b79      	ldr	r3, [pc, #484]	; (8000c8c <processRecord+0x2c0>)
 8000aa8:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <processRecord+0x2c0>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <processRecord+0x2c4>)
 8000ab0:	705a      	strb	r2, [r3, #1]
						break;
 8000ab2:	e089      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RCTRL);
 8000ab4:	4b76      	ldr	r3, [pc, #472]	; (8000c90 <processRecord+0x2c4>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b73      	ldr	r3, [pc, #460]	; (8000c8c <processRecord+0x2c0>)
 8000ac0:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000ac2:	4b72      	ldr	r3, [pc, #456]	; (8000c8c <processRecord+0x2c0>)
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4b72      	ldr	r3, [pc, #456]	; (8000c90 <processRecord+0x2c4>)
 8000ac8:	705a      	strb	r2, [r3, #1]
						break;
 8000aca:	e07d      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RSHIFT);
 8000acc:	4b70      	ldr	r3, [pc, #448]	; (8000c90 <processRecord+0x2c4>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <processRecord+0x2c0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000ada:	4b6c      	ldr	r3, [pc, #432]	; (8000c8c <processRecord+0x2c0>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b6c      	ldr	r3, [pc, #432]	; (8000c90 <processRecord+0x2c4>)
 8000ae0:	705a      	strb	r2, [r3, #1]
						break;
 8000ae2:	e071      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RALT);
 8000ae4:	4b6a      	ldr	r3, [pc, #424]	; (8000c90 <processRecord+0x2c4>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <processRecord+0x2c0>)
 8000af0:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000af2:	4b66      	ldr	r3, [pc, #408]	; (8000c8c <processRecord+0x2c0>)
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <processRecord+0x2c4>)
 8000af8:	705a      	strb	r2, [r3, #1]
						break;
 8000afa:	e065      	b.n	8000bc8 <processRecord+0x1fc>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RMETA);
 8000afc:	4b64      	ldr	r3, [pc, #400]	; (8000c90 <processRecord+0x2c4>)
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <processRecord+0x2c0>)
 8000b08:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000b0a:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <processRecord+0x2c0>)
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	4b60      	ldr	r3, [pc, #384]	; (8000c90 <processRecord+0x2c4>)
 8000b10:	705a      	strb	r2, [r3, #1]
						break;
 8000b12:	e059      	b.n	8000bc8 <processRecord+0x1fc>

					default:
						switch (keycodeIdx)
 8000b14:	7fbb      	ldrb	r3, [r7, #30]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d856      	bhi.n	8000bc8 <processRecord+0x1fc>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <processRecord+0x154>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b51 	.word	0x08000b51
 8000b28:	08000b69 	.word	0x08000b69
 8000b2c:	08000b81 	.word	0x08000b81
 8000b30:	08000b99 	.word	0x08000b99
 8000b34:	08000bb1 	.word	0x08000bb1
						{
							case 0:
								keyboardhid.KEYCODE1=keyMsgQueueObj.Buf[i];
 8000b38:	7ffb      	ldrb	r3, [r7, #31]
 8000b3a:	f107 0220 	add.w	r2, r7, #32
 8000b3e:	4413      	add	r3, r2
 8000b40:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b44:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <processRecord+0x2c0>)
 8000b46:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000b48:	7fbb      	ldrb	r3, [r7, #30]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	77bb      	strb	r3, [r7, #30]
								break;
 8000b4e:	e03b      	b.n	8000bc8 <processRecord+0x1fc>
							case 1:
								keyboardhid.KEYCODE2=keyMsgQueueObj.Buf[i];
 8000b50:	7ffb      	ldrb	r3, [r7, #31]
 8000b52:	f107 0220 	add.w	r2, r7, #32
 8000b56:	4413      	add	r3, r2
 8000b58:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b5c:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <processRecord+0x2c0>)
 8000b5e:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000b60:	7fbb      	ldrb	r3, [r7, #30]
 8000b62:	3301      	adds	r3, #1
 8000b64:	77bb      	strb	r3, [r7, #30]
								break;
 8000b66:	e02f      	b.n	8000bc8 <processRecord+0x1fc>
							case 2:
								keyboardhid.KEYCODE3=keyMsgQueueObj.Buf[i];
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	f107 0220 	add.w	r2, r7, #32
 8000b6e:	4413      	add	r3, r2
 8000b70:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <processRecord+0x2c0>)
 8000b76:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000b78:	7fbb      	ldrb	r3, [r7, #30]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	77bb      	strb	r3, [r7, #30]
								break;
 8000b7e:	e023      	b.n	8000bc8 <processRecord+0x1fc>
							case 3:
								keyboardhid.KEYCODE4=keyMsgQueueObj.Buf[i];
 8000b80:	7ffb      	ldrb	r3, [r7, #31]
 8000b82:	f107 0220 	add.w	r2, r7, #32
 8000b86:	4413      	add	r3, r2
 8000b88:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b8c:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <processRecord+0x2c0>)
 8000b8e:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000b90:	7fbb      	ldrb	r3, [r7, #30]
 8000b92:	3301      	adds	r3, #1
 8000b94:	77bb      	strb	r3, [r7, #30]
								break;
 8000b96:	e017      	b.n	8000bc8 <processRecord+0x1fc>
							case 4:
								keyboardhid.KEYCODE5=keyMsgQueueObj.Buf[i];
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	f107 0220 	add.w	r2, r7, #32
 8000b9e:	4413      	add	r3, r2
 8000ba0:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000ba4:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <processRecord+0x2c0>)
 8000ba6:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	3301      	adds	r3, #1
 8000bac:	77bb      	strb	r3, [r7, #30]
								break;
 8000bae:	e00b      	b.n	8000bc8 <processRecord+0x1fc>
							case 5:
								keyboardhid.KEYCODE6=keyMsgQueueObj.Buf[i];
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	f107 0220 	add.w	r2, r7, #32
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <processRecord+0x2c0>)
 8000bbe:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000bc0:	7fbb      	ldrb	r3, [r7, #30]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	77bb      	strb	r3, [r7, #30]
								break;
 8000bc6:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	77fb      	strb	r3, [r7, #31]
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	7ffa      	ldrb	r2, [r7, #31]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	f4ff af21 	bcc.w	8000a1a <processRecord+0x4e>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000bd8:	2208      	movs	r2, #8
 8000bda:	492c      	ldr	r1, [pc, #176]	; (8000c8c <processRecord+0x2c0>)
 8000bdc:	482d      	ldr	r0, [pc, #180]	; (8000c94 <processRecord+0x2c8>)
 8000bde:	f004 fe79 	bl	80058d4 <USBD_HID_SendReport>
			}




		if(keyMsgQueueObj.Action==RELEASE){
 8000be2:	7c3b      	ldrb	r3, [r7, #16]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	f040 810e 	bne.w	8000e06 <processRecord+0x43a>

			keycodeIdx=0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <processRecord+0x2c0>)
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <processRecord+0x2c4>)
 8000bfa:	785a      	ldrb	r2, [r3, #1]
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <processRecord+0x2c0>)
 8000bfe:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	77fb      	strb	r3, [r7, #31]
 8000c04:	e0f5      	b.n	8000df2 <processRecord+0x426>
			{


				switch (keyMsgQueueObj.Buf[i])
 8000c06:	7ffb      	ldrb	r3, [r7, #31]
 8000c08:	f107 0220 	add.w	r2, r7, #32
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c12:	3be0      	subs	r3, #224	; 0xe0
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d87c      	bhi.n	8000d12 <processRecord+0x346>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <processRecord+0x254>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c41 	.word	0x08000c41
 8000c24:	08000c59 	.word	0x08000c59
 8000c28:	08000c71 	.word	0x08000c71
 8000c2c:	08000c99 	.word	0x08000c99
 8000c30:	08000cb1 	.word	0x08000cb1
 8000c34:	08000cc9 	.word	0x08000cc9
 8000c38:	08000ce1 	.word	0x08000ce1
 8000c3c:	08000cf9 	.word	0x08000cf9
					{
					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LCTRL);
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <processRecord+0x2c4>)
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	f083 0301 	eor.w	r3, r3, #1
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <processRecord+0x2c0>)
 8000c4c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <processRecord+0x2c0>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <processRecord+0x2c4>)
 8000c54:	705a      	strb	r2, [r3, #1]
						break;
 8000c56:	e0c9      	b.n	8000dec <processRecord+0x420>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LSHIFT);
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <processRecord+0x2c4>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	f083 0302 	eor.w	r3, r3, #2
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <processRecord+0x2c0>)
 8000c64:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <processRecord+0x2c0>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <processRecord+0x2c4>)
 8000c6c:	705a      	strb	r2, [r3, #1]
						break;
 8000c6e:	e0bd      	b.n	8000dec <processRecord+0x420>
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LALT);
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <processRecord+0x2c4>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	f083 0304 	eor.w	r3, r3, #4
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <processRecord+0x2c0>)
 8000c7c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <processRecord+0x2c0>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <processRecord+0x2c4>)
 8000c84:	705a      	strb	r2, [r3, #1]
						break;
 8000c86:	e0b1      	b.n	8000dec <processRecord+0x420>
 8000c88:	20001bcc 	.word	0x20001bcc
 8000c8c:	200002a0 	.word	0x200002a0
 8000c90:	20001bd8 	.word	0x20001bd8
 8000c94:	20001c20 	.word	0x20001c20
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LMETA);
 8000c98:	4b5d      	ldr	r3, [pc, #372]	; (8000e10 <processRecord+0x444>)
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	f083 0308 	eor.w	r3, r3, #8
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <processRecord+0x448>)
 8000ca4:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000ca6:	4b5b      	ldr	r3, [pc, #364]	; (8000e14 <processRecord+0x448>)
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <processRecord+0x444>)
 8000cac:	705a      	strb	r2, [r3, #1]
						break;
 8000cae:	e09d      	b.n	8000dec <processRecord+0x420>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RCTRL);
 8000cb0:	4b57      	ldr	r3, [pc, #348]	; (8000e10 <processRecord+0x444>)
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	f083 0310 	eor.w	r3, r3, #16
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <processRecord+0x448>)
 8000cbc:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000cbe:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <processRecord+0x448>)
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <processRecord+0x444>)
 8000cc4:	705a      	strb	r2, [r3, #1]
						break;
 8000cc6:	e091      	b.n	8000dec <processRecord+0x420>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RSHIFT);
 8000cc8:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <processRecord+0x444>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	f083 0320 	eor.w	r3, r3, #32
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <processRecord+0x448>)
 8000cd4:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000cd6:	4b4f      	ldr	r3, [pc, #316]	; (8000e14 <processRecord+0x448>)
 8000cd8:	781a      	ldrb	r2, [r3, #0]
 8000cda:	4b4d      	ldr	r3, [pc, #308]	; (8000e10 <processRecord+0x444>)
 8000cdc:	705a      	strb	r2, [r3, #1]
						break;
 8000cde:	e085      	b.n	8000dec <processRecord+0x420>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RALT);
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <processRecord+0x444>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <processRecord+0x448>)
 8000cec:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000cee:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <processRecord+0x448>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <processRecord+0x444>)
 8000cf4:	705a      	strb	r2, [r3, #1]
						break;
 8000cf6:	e079      	b.n	8000dec <processRecord+0x420>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RMETA);
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <processRecord+0x444>)
 8000cfa:	785b      	ldrb	r3, [r3, #1]
 8000cfc:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <processRecord+0x448>)
 8000d06:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <processRecord+0x448>)
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <processRecord+0x444>)
 8000d0e:	705a      	strb	r2, [r3, #1]
						break;
 8000d10:	e06c      	b.n	8000dec <processRecord+0x420>

					default:
						switch (keycodeIdx)
 8000d12:	7fbb      	ldrb	r3, [r7, #30]
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d869      	bhi.n	8000dec <processRecord+0x420>
 8000d18:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <processRecord+0x354>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d39 	.word	0x08000d39
 8000d24:	08000d57 	.word	0x08000d57
 8000d28:	08000d75 	.word	0x08000d75
 8000d2c:	08000d93 	.word	0x08000d93
 8000d30:	08000db1 	.word	0x08000db1
 8000d34:	08000dcf 	.word	0x08000dcf
						{
							case 0:
								keyboardhid.KEYCODE1=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d38:	7ffb      	ldrb	r3, [r7, #31]
 8000d3a:	f107 0220 	add.w	r2, r7, #32
 8000d3e:	4413      	add	r3, r2
 8000d40:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <processRecord+0x448>)
 8000d4c:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000d4e:	7fbb      	ldrb	r3, [r7, #30]
 8000d50:	3301      	adds	r3, #1
 8000d52:	77bb      	strb	r3, [r7, #30]
								break;
 8000d54:	e04a      	b.n	8000dec <processRecord+0x420>
							case 1:
								keyboardhid.KEYCODE2=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d56:	7ffb      	ldrb	r3, [r7, #31]
 8000d58:	f107 0220 	add.w	r2, r7, #32
 8000d5c:	4413      	add	r3, r2
 8000d5e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <processRecord+0x448>)
 8000d6a:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000d6c:	7fbb      	ldrb	r3, [r7, #30]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	77bb      	strb	r3, [r7, #30]
								break;
 8000d72:	e03b      	b.n	8000dec <processRecord+0x420>
							case 2:
								keyboardhid.KEYCODE3=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d74:	7ffb      	ldrb	r3, [r7, #31]
 8000d76:	f107 0220 	add.w	r2, r7, #32
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <processRecord+0x448>)
 8000d88:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000d8a:	7fbb      	ldrb	r3, [r7, #30]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	77bb      	strb	r3, [r7, #30]
								break;
 8000d90:	e02c      	b.n	8000dec <processRecord+0x420>
							case 3:
								keyboardhid.KEYCODE4=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	f107 0220 	add.w	r2, r7, #32
 8000d98:	4413      	add	r3, r2
 8000d9a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <processRecord+0x448>)
 8000da6:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000da8:	7fbb      	ldrb	r3, [r7, #30]
 8000daa:	3301      	adds	r3, #1
 8000dac:	77bb      	strb	r3, [r7, #30]
								break;
 8000dae:	e01d      	b.n	8000dec <processRecord+0x420>
							case 4:
								keyboardhid.KEYCODE5=(keyMsgQueueObj.Buf[i] | 0x80);
 8000db0:	7ffb      	ldrb	r3, [r7, #31]
 8000db2:	f107 0220 	add.w	r2, r7, #32
 8000db6:	4413      	add	r3, r2
 8000db8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <processRecord+0x448>)
 8000dc4:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000dc6:	7fbb      	ldrb	r3, [r7, #30]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	77bb      	strb	r3, [r7, #30]
								break;
 8000dcc:	e00e      	b.n	8000dec <processRecord+0x420>
							case 5:
								keyboardhid.KEYCODE6=(keyMsgQueueObj.Buf[i] | 0x80);
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	f107 0220 	add.w	r2, r7, #32
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <processRecord+0x448>)
 8000de2:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000de4:	7fbb      	ldrb	r3, [r7, #30]
 8000de6:	3301      	adds	r3, #1
 8000de8:	77bb      	strb	r3, [r7, #30]
								break;
 8000dea:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000dec:	7ffb      	ldrb	r3, [r7, #31]
 8000dee:	3301      	adds	r3, #1
 8000df0:	77fb      	strb	r3, [r7, #31]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	7ffa      	ldrb	r2, [r7, #31]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	f4ff af05 	bcc.w	8000c06 <processRecord+0x23a>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4905      	ldr	r1, [pc, #20]	; (8000e14 <processRecord+0x448>)
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <processRecord+0x44c>)
 8000e02:	f004 fd67 	bl	80058d4 <USBD_HID_SendReport>

		}

	}

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20001bd8 	.word	0x20001bd8
 8000e14:	200002a0 	.word	0x200002a0
 8000e18:	20001c20 	.word	0x20001c20

08000e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e42:	f7ff fb27 	bl	8000494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f009 f95b 	bl	800a100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff f981 	bl	8000150 <main>
  bx lr
 8000e4e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e50:	0800a478 	.word	0x0800a478
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e58:	2000015c 	.word	0x2000015c
  ldr r2, =_sbss
 8000e5c:	2000015c 	.word	0x2000015c
  ldr r3, = _ebss
 8000e60:	200023d0 	.word	0x200023d0

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f923 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff faa2 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f93b 	bl	800112e <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f903 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20001bdc 	.word	0x20001bdc

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20001bdc 	.word	0x20001bdc

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4906      	ldr	r1, [pc, #24]	; (8000fc4 <__NVIC_EnableIRQ+0x34>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff90 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff2d 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff42 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff35 	bl	8000f90 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e169      	b.n	8001430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8158 	bne.w	800142a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a9a      	ldr	r2, [pc, #616]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a98      	ldr	r2, [pc, #608]	; (80013e8 <HAL_GPIO_Init+0x2a0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a98      	ldr	r2, [pc, #608]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a96      	ldr	r2, [pc, #600]	; (80013ec <HAL_GPIO_Init+0x2a4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a96      	ldr	r2, [pc, #600]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a94      	ldr	r2, [pc, #592]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_GPIO_Init+0x2ac>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a92      	ldr	r2, [pc, #584]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a90      	ldr	r2, [pc, #576]	; (80013f8 <HAL_GPIO_Init+0x2b0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a79      	ldr	r2, [pc, #484]	; (80013fc <HAL_GPIO_Init+0x2b4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80b1 	beq.w	800142a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x2b8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a40      	ldr	r2, [pc, #256]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <HAL_GPIO_Init+0x2c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_GPIO_Init+0x2c8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <HAL_GPIO_Init+0x2cc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1e0>
 8001324:	2303      	movs	r3, #3
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001328:	2304      	movs	r3, #4
 800132a:	e004      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 800132c:	2302      	movs	r3, #2
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_GPIO_Init+0x1ee>
 8001334:	2300      	movs	r3, #0
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001346:	492f      	ldr	r1, [pc, #188]	; (8001404 <HAL_GPIO_Init+0x2bc>)
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	492c      	ldr	r1, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4928      	ldr	r1, [pc, #160]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4922      	ldr	r1, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	491e      	ldr	r1, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	4918      	ldr	r1, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
 80013e4:	e021      	b.n	800142a <HAL_GPIO_Init+0x2e2>
 80013e6:	bf00      	nop
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10310000 	.word	0x10310000
 80013f0:	10220000 	.word	0x10220000
 80013f4:	10210000 	.word	0x10210000
 80013f8:	10120000 	.word	0x10120000
 80013fc:	10110000 	.word	0x10110000
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	40010800 	.word	0x40010800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40011000 	.word	0x40011000
 8001414:	40011400 	.word	0x40011400
 8001418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_GPIO_Init+0x304>)
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	43db      	mvns	r3, r3
 8001424:	4909      	ldr	r1, [pc, #36]	; (800144c <HAL_GPIO_Init+0x304>)
 8001426:	4013      	ands	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	f47f ae8e 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	372c      	adds	r7, #44	; 0x2c
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]
 800148a:	4613      	mov	r3, r2
 800148c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800149a:	e003      	b.n	80014a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	041a      	lsls	r2, r3, #16
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b0:	b08b      	sub	sp, #44	; 0x2c
 80014b2:	af06      	add	r7, sp, #24
 80014b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0fd      	b.n	80016bc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f008 fb8d 	bl	8009bf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 f820 	bl	800352c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	687e      	ldr	r6, [r7, #4]
 80014f4:	466d      	mov	r5, sp
 80014f6:	f106 0410 	add.w	r4, r6, #16
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	602b      	str	r3, [r5, #0]
 8001502:	1d33      	adds	r3, r6, #4
 8001504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f001 ffea 	bl	80034e0 <USB_CoreInit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0ce      	b.n	80016bc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f002 f81b 	bl	8003560 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e04c      	b.n	80015ca <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3301      	adds	r3, #1
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	b298      	uxth	r0, r3
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3336      	adds	r3, #54	; 0x36
 800156e:	4602      	mov	r2, r0
 8001570:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3303      	adds	r3, #3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3338      	adds	r3, #56	; 0x38
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	333c      	adds	r3, #60	; 0x3c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3340      	adds	r3, #64	; 0x40
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ad      	bcc.n	8001530 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e044      	b.n	8001664 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	3301      	adds	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3b5      	bcc.n	80015da <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	687e      	ldr	r6, [r7, #4]
 8001676:	466d      	mov	r5, sp
 8001678:	f106 0410 	add.w	r4, r6, #16
 800167c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	602b      	str	r3, [r5, #0]
 8001684:	1d33      	adds	r3, r6, #4
 8001686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f001 ff75 	bl	8003578 <USB_DevInit>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e00d      	b.n	80016bc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 ff0f 	bl	80054d8 <USB_DevDisconnect>

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_PCD_Start+0x16>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e016      	b.n	8001708 <HAL_PCD_Start+0x44>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 ff0a 	bl	8003500 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f008 fccf 	bl	800a092 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fee3 	bl	80054c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fee5 	bl	80054ec <USB_ReadInterrupts>
 8001722:	4603      	mov	r3, r0
 8001724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800172c:	d102      	bne.n	8001734 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fb4a 	bl	8001dc8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fed7 	bl	80054ec <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	d112      	bne.n	8001770 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175c:	b292      	uxth	r2, r2
 800175e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f008 fac1 	bl	8009cea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001768:	2100      	movs	r1, #0
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f925 	bl	80019ba <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 feb9 	bl	80054ec <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001784:	d10b      	bne.n	800179e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001798:	b292      	uxth	r2, r2
 800179a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fea2 	bl	80054ec <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b2:	d10b      	bne.n	80017cc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017c6:	b292      	uxth	r2, r2
 80017c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fe8b 	bl	80054ec <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e0:	d126      	bne.n	8001830 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0204 	bic.w	r2, r2, #4
 80017f4:	b292      	uxth	r2, r2
 80017f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	b292      	uxth	r2, r2
 800180e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f008 faa2 	bl	8009d5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fe59 	bl	80054ec <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001844:	f040 8084 	bne.w	8001950 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	77fb      	strb	r3, [r7, #31]
 800184c:	e011      	b.n	8001872 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	7ffb      	ldrb	r3, [r7, #31]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	441a      	add	r2, r3
 800185a:	7ffb      	ldrb	r3, [r7, #31]
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	b292      	uxth	r2, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	f107 0120 	add.w	r1, r7, #32
 8001866:	440b      	add	r3, r1
 8001868:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	3301      	adds	r3, #1
 8001870:	77fb      	strb	r3, [r7, #31]
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d9ea      	bls.n	800184e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018a8:	bf00      	nop
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f6      	beq.n	80018aa <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ce:	b292      	uxth	r2, r2
 80018d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
 80018d8:	e010      	b.n	80018fc <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4611      	mov	r1, r2
 80018e2:	7ffa      	ldrb	r2, [r7, #31]
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	440a      	add	r2, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	f107 0120 	add.w	r1, r7, #32
 80018ee:	440b      	add	r3, r1
 80018f0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018f4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	3301      	adds	r3, #1
 80018fa:	77fb      	strb	r3, [r7, #31]
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	d9eb      	bls.n	80018da <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0208 	orr.w	r2, r2, #8
 8001914:	b292      	uxth	r2, r2
 8001916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0204 	orr.w	r2, r2, #4
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f008 f9ec 	bl	8009d28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fdc9 	bl	80054ec <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001964:	d10e      	bne.n	8001984 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f008 f9a5 	bl	8009cce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fdaf 	bl	80054ec <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001998:	d10b      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ac:	b292      	uxth	r2, r2
 80019ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_PCD_SetAddress+0x1a>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e013      	b.n	80019fc <HAL_PCD_SetAddress+0x42>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fd56 	bl	800549e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	70fb      	strb	r3, [r7, #3]
 8001a16:	460b      	mov	r3, r1
 8001a18:	803b      	strh	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0e      	bge.n	8001a48 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	705a      	strb	r2, [r3, #1]
 8001a46:	e00e      	b.n	8001a66 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0207 	and.w	r2, r3, #7
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a72:	883a      	ldrh	r2, [r7, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	78ba      	ldrb	r2, [r7, #2]
 8001a7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d102      	bne.n	8001a9c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_PCD_EP_Open+0xa6>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e00e      	b.n	8001ac8 <HAL_PCD_EP_Open+0xc4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fd7d 	bl	80035b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da0e      	bge.n	8001b02 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	705a      	strb	r2, [r3, #1]
 8001b00:	e00e      	b.n	8001b20 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 0207 	and.w	r2, r3, #7
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_PCD_EP_Close+0x6a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e00e      	b.n	8001b58 <HAL_PCD_EP_Close+0x88>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f002 f89f 	bl	8003c8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	f003 0207 	and.w	r2, r3, #7
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fa51 	bl	8004064 <USB_EPStartXfer>
 8001bc2:	e005      	b.n	8001bd0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6979      	ldr	r1, [r7, #20]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fa4a 	bl	8004064 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	460b      	mov	r3, r1
 8001be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2201      	movs	r2, #1
 8001c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6979      	ldr	r1, [r7, #20]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fa0e 	bl	8004064 <USB_EPStartXfer>
 8001c48:	e005      	b.n	8001c56 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6979      	ldr	r1, [r7, #20]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fa07 	bl	8004064 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d901      	bls.n	8001c7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e04c      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da0e      	bge.n	8001ca4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	705a      	strb	r2, [r3, #1]
 8001ca2:	e00c      	b.n	8001cbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_EP_SetStall+0x7e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e01c      	b.n	8001d18 <HAL_PCD_EP_SetStall+0xb8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fad9 	bl	80052a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d108      	bne.n	8001d0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f003 fbfe 	bl	800550a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d901      	bls.n	8001d3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e040      	b.n	8001dc0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da0e      	bge.n	8001d64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
 8001d62:	e00e      	b.n	8001d82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_PCD_EP_ClrStall+0x82>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e00e      	b.n	8001dc0 <HAL_PCD_EP_ClrStall+0xa0>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fac7 	bl	8005344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd0:	e2df      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f040 8158 	bne.w	80020a2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d152      	bne.n	8001ea2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0c:	81fb      	strh	r3, [r7, #14]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3328      	adds	r3, #40	; 0x28
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f007 ff19 	bl	8009c9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 828e 	beq.w	8002392 <PCD_EP_ISR_Handler+0x5ca>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8289 	bne.w	8002392 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ea0:	e277      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d034      	beq.n	8001f26 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3306      	adds	r3, #6
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f003 fb55 	bl	80055aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	823b      	strh	r3, [r7, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	8a3a      	ldrh	r2, [r7, #16]
 8001f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f007 fe8e 	bl	8009c40 <HAL_PCD_SetupStageCallback>
 8001f24:	e235      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f26:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f280 8231 	bge.w	8002392 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	83bb      	strh	r3, [r7, #28]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	8bba      	ldrh	r2, [r7, #28]
 8001f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	3306      	adds	r3, #6
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <PCD_EP_ISR_Handler+0x1ee>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	6959      	ldr	r1, [r3, #20]
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f003 fb05 	bl	80055aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	441a      	add	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f007 fe57 	bl	8009c64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4413      	add	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d112      	bne.n	8002004 <PCD_EP_ISR_Handler+0x23c>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	e02f      	b.n	8002064 <PCD_EP_ISR_Handler+0x29c>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b3e      	cmp	r3, #62	; 0x3e
 800200a:	d813      	bhi.n	8002034 <PCD_EP_ISR_Handler+0x26c>
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <PCD_EP_ISR_Handler+0x25e>
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	3301      	adds	r3, #1
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	b29b      	uxth	r3, r3
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	b29a      	uxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	e017      	b.n	8002064 <PCD_EP_ISR_Handler+0x29c>
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <PCD_EP_ISR_Handler+0x286>
 8002048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204a:	3b01      	subs	r3, #1
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002050:	b29b      	uxth	r3, r3
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	b29b      	uxth	r3, r3
 8002056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205e:	b29a      	uxth	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002074:	827b      	strh	r3, [r7, #18]
 8002076:	8a7b      	ldrh	r3, [r7, #18]
 8002078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800207c:	827b      	strh	r3, [r7, #18]
 800207e:	8a7b      	ldrh	r3, [r7, #18]
 8002080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002084:	827b      	strh	r3, [r7, #18]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	8a7b      	ldrh	r3, [r7, #18]
 800208c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]
 80020a0:	e177      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f280 80ea 	bge.w	8002292 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020d4:	4013      	ands	r3, r2
 80020d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ec:	b292      	uxth	r2, r2
 80020ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	7b1b      	ldrb	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d122      	bne.n	8002154 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	3306      	adds	r3, #6
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002136:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	6959      	ldr	r1, [r3, #20]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	88da      	ldrh	r2, [r3, #6]
 800214c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800214e:	f003 fa2c 	bl	80055aa <USB_ReadPMA>
 8002152:	e07c      	b.n	800224e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	78db      	ldrb	r3, [r3, #3]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d108      	bne.n	800216e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800215c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800215e:	461a      	mov	r2, r3
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f923 	bl	80023ae <HAL_PCD_EP_DB_Receive>
 8002168:	4603      	mov	r3, r0
 800216a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800216c:	e06f      	b.n	800224e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002188:	847b      	strh	r3, [r7, #34]	; 0x22
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	441a      	add	r2, r3
 8002198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800219a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800219e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d021      	beq.n	800220c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	3302      	adds	r3, #2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02a      	beq.n	800224e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	6959      	ldr	r1, [r3, #20]
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	891a      	ldrh	r2, [r3, #8]
 8002204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002206:	f003 f9d0 	bl	80055aa <USB_ReadPMA>
 800220a:	e020      	b.n	800224e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	3306      	adds	r3, #6
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002234:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	6959      	ldr	r1, [r3, #20]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	895a      	ldrh	r2, [r3, #10]
 8002248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224a:	f003 f9ae 	bl	80055aa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002254:	441a      	add	r2, r3
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <PCD_EP_ISR_Handler+0x4b0>
 800226e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d206      	bcs.n	8002286 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f007 fcf0 	bl	8009c64 <HAL_PCD_DataOutStageCallback>
 8002284:	e005      	b.n	8002292 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	4618      	mov	r0, r3
 800228e:	f001 fee9 	bl	8004064 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b00      	cmp	r3, #0
 800229a:	d07a      	beq.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800229c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ca:	843b      	strh	r3, [r7, #32]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	8c3b      	ldrh	r3, [r7, #32]
 80022dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d108      	bne.n	8002302 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d146      	bne.n	8002386 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d141      	bne.n	8002386 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	3302      	adds	r3, #2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	8bfb      	ldrh	r3, [r7, #30]
 8002332:	429a      	cmp	r2, r3
 8002334:	d906      	bls.n	8002344 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	8bfb      	ldrh	r3, [r7, #30]
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	e002      	b.n	800234a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	2200      	movs	r2, #0
 8002348:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 fc9e 	bl	8009c9a <HAL_PCD_DataInStageCallback>
 800235e:	e018      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	8bfb      	ldrh	r3, [r7, #30]
 8002366:	441a      	add	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	441a      	add	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fe70 	bl	8004064 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002384:	e005      	b.n	8002392 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002388:	461a      	mov	r2, r3
 800238a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f91b 	bl	80025c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800239a:	b29b      	uxth	r3, r3
 800239c:	b21b      	sxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f6ff ad17 	blt.w	8001dd2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3738      	adds	r7, #56	; 0x38
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b088      	sub	sp, #32
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	4613      	mov	r3, r2
 80023ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07e      	beq.n	80024c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	3302      	adds	r3, #2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	8b7b      	ldrh	r3, [r7, #26]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d306      	bcc.n	8002408 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	8b7b      	ldrh	r3, [r7, #26]
 8002400:	1ad2      	subs	r2, r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	619a      	str	r2, [r3, #24]
 8002406:	e002      	b.n	800240e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d123      	bne.n	800245e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	833b      	strh	r3, [r7, #24]
 8002432:	8b3b      	ldrh	r3, [r7, #24]
 8002434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002438:	833b      	strh	r3, [r7, #24]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	441a      	add	r2, r3
 8002448:	8b3b      	ldrh	r3, [r7, #24]
 800244a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245a:	b29b      	uxth	r3, r3
 800245c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	82fb      	strh	r3, [r7, #22]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	441a      	add	r2, r3
 8002492:	8afb      	ldrh	r3, [r7, #22]
 8002494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024a8:	8b7b      	ldrh	r3, [r7, #26]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	891a      	ldrh	r2, [r3, #8]
 80024bc:	8b7b      	ldrh	r3, [r7, #26]
 80024be:	f003 f874 	bl	80055aa <USB_ReadPMA>
 80024c2:	e07c      	b.n	80025be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	3306      	adds	r3, #6
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	8b7b      	ldrh	r3, [r7, #26]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d306      	bcc.n	8002506 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	8b7b      	ldrh	r3, [r7, #26]
 80024fe:	1ad2      	subs	r2, r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	619a      	str	r2, [r3, #24]
 8002504:	e002      	b.n	800250c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d123      	bne.n	800255c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	83fb      	strh	r3, [r7, #30]
 8002530:	8bfb      	ldrh	r3, [r7, #30]
 8002532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002536:	83fb      	strh	r3, [r7, #30]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	8bfb      	ldrh	r3, [r7, #30]
 8002548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	b29b      	uxth	r3, r3
 800255a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11f      	bne.n	80025a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002580:	83bb      	strh	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	8bbb      	ldrh	r3, [r7, #28]
 8002592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a6:	8b7b      	ldrh	r3, [r7, #26]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	6959      	ldr	r1, [r3, #20]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	895a      	ldrh	r2, [r3, #10]
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	f002 fff6 	bl	80055aa <USB_ReadPMA>
    }
  }

  return count;
 80025be:	8b7b      	ldrh	r3, [r7, #26]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b094      	sub	sp, #80	; 0x50
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8138 	beq.w	8002852 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	3302      	adds	r3, #2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002616:	429a      	cmp	r2, r3
 8002618:	d907      	bls.n	800262a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	619a      	str	r2, [r3, #24]
 8002628:	e002      	b.n	8002630 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12c      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f007 fb2b 	bl	8009c9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 823a 	beq.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	82fb      	strh	r3, [r7, #22]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	8afb      	ldrh	r3, [r7, #22]
 800267c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	b29b      	uxth	r3, r3
 800268e:	8013      	strh	r3, [r2, #0]
 8002690:	e218      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01f      	beq.n	80026dc <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	f040 81ee 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026f0:	441a      	add	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026fe:	441a      	add	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d309      	bcc.n	8002724 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	621a      	str	r2, [r3, #32]
 8002722:	e015      	b.n	8002750 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 800272c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800273a:	e009      	b.n	8002750 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d155      	bne.n	8002804 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	011a      	lsls	r2, r3, #4
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	4413      	add	r3, r2
 800277a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002790:	b29a      	uxth	r2, r3
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	e047      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x274>
 80027ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ae:	2b3e      	cmp	r3, #62	; 0x3e
 80027b0:	d811      	bhi.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x20e>
 80027b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x200>
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3301      	adds	r3, #1
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e032      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x274>
 80027d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_PCD_EP_DB_Transmit+0x224>
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	3b01      	subs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	029b      	lsls	r3, r3, #10
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	e01b      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x274>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d117      	bne.n	800283c <HAL_PCD_EP_DB_Transmit+0x274>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	4413      	add	r3, r2
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	011a      	lsls	r2, r3, #4
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	4413      	add	r3, r2
 800282e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002836:	b29a      	uxth	r2, r3
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	b29b      	uxth	r3, r3
 800284c:	f002 fe68 	bl	8005520 <USB_WritePMA>
 8002850:	e138      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3306      	adds	r3, #6
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002886:	429a      	cmp	r2, r3
 8002888:	d307      	bcc.n	800289a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	619a      	str	r2, [r3, #24]
 8002898:	e002      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d12e      	bne.n	8002906 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f007 f9f3 	bl	8009c9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8102 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	441a      	add	r2, r3
 80028ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002900:	b29b      	uxth	r3, r3
 8002902:	8013      	strh	r3, [r2, #0]
 8002904:	e0de      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11f      	bne.n	8002950 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	867b      	strh	r3, [r7, #50]	; 0x32
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800293c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002956:	2b01      	cmp	r3, #1
 8002958:	f040 80b4 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002964:	441a      	add	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002972:	441a      	add	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d309      	bcc.n	8002998 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6a1a      	ldr	r2, [r3, #32]
 800298e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	621a      	str	r2, [r3, #32]
 8002996:	e015      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80029a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029ae:	e009      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d155      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x4b6>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	4413      	add	r3, r2
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	011a      	lsls	r2, r3, #4
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	4413      	add	r3, r2
 80029f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
 80029fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d112      	bne.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e044      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	2b3e      	cmp	r3, #62	; 0x3e
 8002a2a:	d811      	bhi.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x488>
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	3301      	adds	r3, #1
 8002a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e02f      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	3b01      	subs	r3, #1
 8002a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e018      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d114      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a94:	4413      	add	r3, r2
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6959      	ldr	r1, [r3, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	895a      	ldrh	r2, [r3, #10]
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f002 fd2e 	bl	8005520 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ade:	82bb      	strh	r3, [r7, #20]
 8002ae0:	8abb      	ldrh	r3, [r7, #20]
 8002ae2:	f083 0310 	eor.w	r3, r3, #16
 8002ae6:	82bb      	strh	r3, [r7, #20]
 8002ae8:	8abb      	ldrh	r3, [r7, #20]
 8002aea:	f083 0320 	eor.w	r3, r3, #32
 8002aee:	82bb      	strh	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3750      	adds	r7, #80	; 0x50
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	817b      	strh	r3, [r7, #10]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e009      	b.n	8002b68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b54:	897a      	ldrh	r2, [r7, #10]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	80da      	strh	r2, [r3, #6]
 8002b7c:	e00b      	b.n	8002b96 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2201      	movs	r2, #1
 8002b82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e26c      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8087 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d00c      	beq.n	8002bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d112      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d06c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d168      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e246      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x76>
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7f      	ldr	r2, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e02e      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x98>
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7a      	ldr	r2, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b78      	ldr	r3, [pc, #480]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a77      	ldr	r2, [pc, #476]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xbc>
 8002c46:	4b72      	ldr	r3, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a71      	ldr	r2, [pc, #452]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xd4>
 8002c60:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe f94a 	bl	8000f18 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe f946 	bl	8000f18 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1fa      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xe4>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f936 	bl	8000f18 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f932 	bl	8000f18 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1e6      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x10c>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1ba      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4939      	ldr	r1, [pc, #228]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f8eb 	bl	8000f18 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f8e7 	bl	8000f18 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e19b      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4927      	ldr	r1, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe f8ca 	bl	8000f18 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe f8c6 	bl	8000f18 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e17a      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03a      	beq.n	8002e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d019      	beq.n	8002dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f8aa 	bl	8000f18 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe f8a6 	bl	8000f18 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e15a      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f000 faa6 	bl	8003338 <RCC_Delay>
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7fe f890 	bl	8000f18 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfa:	e00f      	b.n	8002e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe f88c 	bl	8000f18 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d908      	bls.n	8002e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e140      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	42420000 	.word	0x42420000
 8002e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e9      	bne.n	8002dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a6 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b97      	ldr	r3, [pc, #604]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b94      	ldr	r3, [pc, #592]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4a93      	ldr	r2, [pc, #588]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	61d3      	str	r3, [r2, #28]
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a8a      	ldr	r2, [pc, #552]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f84d 	bl	8000f18 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe f849 	bl	8000f18 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0fd      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x4f8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x312>
 8002ea8:	4b7b      	ldr	r3, [pc, #492]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a7a      	ldr	r2, [pc, #488]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x334>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6213      	str	r3, [r2, #32]
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x356>
 8002ee0:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a69      	ldr	r2, [pc, #420]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x36e>
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a66      	ldr	r2, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fd fffd 	bl	8000f18 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fff9 	bl	8000f18 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0ab      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b57      	ldr	r3, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x37e>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fd ffe7 	bl	8000f18 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fd ffe3 	bl	8000f18 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e095      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b48      	ldr	r3, [pc, #288]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a47      	ldr	r2, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8081 	beq.w	800308e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d061      	beq.n	800305c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d146      	bne.n	800302e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fd ffb7 	bl	8000f18 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fd ffb3 	bl	8000f18 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e067      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	492d      	ldr	r1, [pc, #180]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a19      	ldr	r1, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	4927      	ldr	r1, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fd ff87 	bl	8000f18 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd ff83 	bl	8000f18 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e037      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x46a>
 800302c:	e02f      	b.n	800308e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_RCC_OscConfig+0x4fc>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd ff70 	bl	8000f18 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd ff6c 	bl	8000f18 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e020      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x498>
 800305a:	e018      	b.n	800308e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	42420060 	.word	0x42420060

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0d0      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	4965      	ldr	r1, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d040      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e073      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4936      	ldr	r1, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd fec0 	bl	8000f18 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd febc 	bl	8000f18 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e053      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d210      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4922      	ldr	r1, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1cc>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fe1e 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000
 8003268:	40021000 	.word	0x40021000
 800326c:	0800a2b0 	.word	0x0800a2b0
 8003270:	20000000 	.word	0x20000000
 8003274:	20000004 	.word	0x20000004

08003278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b490      	push	{r4, r7}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003280:	1d3c      	adds	r4, r7, #4
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003288:	f240 2301 	movw	r3, #513	; 0x201
 800328c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a2:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x46>
 80032b6:	e02d      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ba:	623b      	str	r3, [r7, #32]
      break;
 80032bc:	e02d      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c5b      	lsrs	r3, r3, #17
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ea:	4413      	add	r3, r2
 80032ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f6:	fb02 f203 	mul.w	r2, r2, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	e004      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	623b      	str	r3, [r7, #32]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003316:	623b      	str	r3, [r7, #32]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6a3b      	ldr	r3, [r7, #32]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc90      	pop	{r4, r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	0800a1cc 	.word	0x0800a1cc
 800332c:	40021000 	.word	0x40021000
 8003330:	007a1200 	.word	0x007a1200
 8003334:	003d0900 	.word	0x003d0900

08003338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <RCC_Delay+0x34>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <RCC_Delay+0x38>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003354:	bf00      	nop
  }
  while (Delay --);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <RCC_Delay+0x1c>
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000000 	.word	0x20000000
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d07d      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
 80033ac:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d118      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a42      	ldr	r2, [pc, #264]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d4:	f7fd fda0 	bl	8000f18 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fd fd9c 	bl	8000f18 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e06d      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02e      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d027      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003418:	4b2e      	ldr	r3, [pc, #184]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d014      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fd fd6b 	bl	8000f18 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd fd67 	bl	8000f18 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e036      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ee      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4917      	ldr	r1, [pc, #92]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	4313      	orrs	r3, r2
 8003478:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	490b      	ldr	r1, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42420440 	.word	0x42420440

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 0014 	add.w	r0, r7, #20
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	b004      	add	sp, #16
 80034fe:	4770      	bx	lr

08003500 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003510:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003514:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003534:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003538:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	b29b      	uxth	r3, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	4013      	ands	r3, r2
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003578:	b084      	sub	sp, #16
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	f107 0014 	add.w	r0, r7, #20
 8003586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	b004      	add	sp, #16
 80035b6:	4770      	bx	lr

080035b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b09b      	sub	sp, #108	; 0x6c
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d81f      	bhi.n	800362a <USB_ActivateEndpoint+0x72>
 80035ea:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <USB_ActivateEndpoint+0x38>)
 80035ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f0:	08003601 	.word	0x08003601
 80035f4:	0800361d 	.word	0x0800361d
 80035f8:	08003633 	.word	0x08003633
 80035fc:	0800360f 	.word	0x0800360f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003600:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003608:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800360c:	e012      	b.n	8003634 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800360e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003612:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003616:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800361a:	e00b      	b.n	8003634 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800361c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003624:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003628:	e004      	b.n	8003634 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003630:	e000      	b.n	8003634 <USB_ActivateEndpoint+0x7c>
      break;
 8003632:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	441a      	add	r2, r3
 800363e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003652:	b29b      	uxth	r3, r3
 8003654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	b29a      	uxth	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	b29b      	uxth	r3, r3
 800369a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	7b1b      	ldrb	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 8149 	bne.w	8003938 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8084 	beq.w	80037b8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	011a      	lsls	r2, r3, #4
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	88db      	ldrh	r3, [r3, #6]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	81fb      	strh	r3, [r7, #14]
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <USB_ActivateEndpoint+0x17c>
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	81bb      	strh	r3, [r7, #12]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	89bb      	ldrh	r3, [r7, #12]
 8003720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d020      	beq.n	800377e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003752:	813b      	strh	r3, [r7, #8]
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	f083 0320 	eor.w	r3, r3, #32
 800375a:	813b      	strh	r3, [r7, #8]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	893b      	ldrh	r3, [r7, #8]
 8003768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003778:	b29b      	uxth	r3, r3
 800377a:	8013      	strh	r3, [r2, #0]
 800377c:	e27f      	b.n	8003c7e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003794:	817b      	strh	r3, [r7, #10]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8013      	strh	r3, [r2, #0]
 80037b6:	e262      	b.n	8003c7e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	4413      	add	r3, r2
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	011a      	lsls	r2, r3, #4
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	88db      	ldrh	r3, [r3, #6]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	4413      	add	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	011a      	lsls	r2, r3, #4
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	4413      	add	r3, r2
 800380a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d112      	bne.n	800383e <USB_ActivateEndpoint+0x286>
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003822:	b29a      	uxth	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003836:	b29a      	uxth	r2, r3
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e02f      	b.n	800389e <USB_ActivateEndpoint+0x2e6>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b3e      	cmp	r3, #62	; 0x3e
 8003844:	d813      	bhi.n	800386e <USB_ActivateEndpoint+0x2b6>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	663b      	str	r3, [r7, #96]	; 0x60
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <USB_ActivateEndpoint+0x2a8>
 800385a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385c:	3301      	adds	r3, #1
 800385e:	663b      	str	r3, [r7, #96]	; 0x60
 8003860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003862:	b29b      	uxth	r3, r3
 8003864:	029b      	lsls	r3, r3, #10
 8003866:	b29a      	uxth	r2, r3
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	801a      	strh	r2, [r3, #0]
 800386c:	e017      	b.n	800389e <USB_ActivateEndpoint+0x2e6>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <USB_ActivateEndpoint+0x2d0>
 8003882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003884:	3b01      	subs	r3, #1
 8003886:	663b      	str	r3, [r7, #96]	; 0x60
 8003888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388a:	b29b      	uxth	r3, r3
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	b29b      	uxth	r3, r3
 8003890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003898:	b29a      	uxth	r2, r3
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	83fb      	strh	r3, [r7, #30]
 80038ac:	8bfb      	ldrh	r3, [r7, #30]
 80038ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01b      	beq.n	80038ee <USB_ActivateEndpoint+0x336>
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038cc:	83bb      	strh	r3, [r7, #28]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	8bbb      	ldrh	r3, [r7, #28]
 80038da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003904:	837b      	strh	r3, [r7, #26]
 8003906:	8b7b      	ldrh	r3, [r7, #26]
 8003908:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800390c:	837b      	strh	r3, [r7, #26]
 800390e:	8b7b      	ldrh	r3, [r7, #26]
 8003910:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003914:	837b      	strh	r3, [r7, #26]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8b7b      	ldrh	r3, [r7, #26]
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
 8003936:	e1a2      	b.n	8003c7e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	441a      	add	r2, r3
 800395c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003968:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	b29b      	uxth	r3, r3
 8003972:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65bb      	str	r3, [r7, #88]	; 0x58
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	4413      	add	r3, r2
 8003986:	65bb      	str	r3, [r7, #88]	; 0x58
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003990:	4413      	add	r3, r2
 8003992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003996:	657b      	str	r3, [r7, #84]	; 0x54
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	891b      	ldrh	r3, [r3, #8]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	653b      	str	r3, [r7, #80]	; 0x50
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	4413      	add	r3, r2
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	011a      	lsls	r2, r3, #4
 80039c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	895b      	ldrh	r3, [r3, #10]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8091 	bne.w	8003b08 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80039f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01b      	beq.n	8003a36 <USB_ActivateEndpoint+0x47e>
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01b      	beq.n	8003a86 <USB_ActivateEndpoint+0x4ce>
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	441a      	add	r2, r3
 8003a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003aa4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	8013      	strh	r3, [r2, #0]
 8003b06:	e0ba      	b.n	8003c7e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01d      	beq.n	8003b60 <USB_ActivateEndpoint+0x5a8>
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01d      	beq.n	8003bb8 <USB_ActivateEndpoint+0x600>
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d024      	beq.n	8003c0a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bde:	f083 0320 	eor.w	r3, r3, #32
 8003be2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	441a      	add	r2, r3
 8003bf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8013      	strh	r3, [r2, #0]
 8003c08:	e01d      	b.n	8003c46 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	376c      	adds	r7, #108	; 0x6c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b08d      	sub	sp, #52	; 0x34
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7b1b      	ldrb	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 808e 	bne.w	8003dbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d044      	beq.n	8003d32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	81bb      	strh	r3, [r7, #12]
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <USB_DeactivateEndpoint+0x6c>
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	817b      	strh	r3, [r7, #10]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0e:	813b      	strh	r3, [r7, #8]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
 8003d30:	e192      	b.n	8004058 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	827b      	strh	r3, [r7, #18]
 8003d40:	8a7b      	ldrh	r3, [r7, #18]
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01b      	beq.n	8003d82 <USB_DeactivateEndpoint+0xf6>
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d60:	823b      	strh	r3, [r7, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	8a3b      	ldrh	r3, [r7, #16]
 8003d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d98:	81fb      	strh	r3, [r7, #14]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	441a      	add	r2, r3
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
 8003dba:	e14d      	b.n	8004058 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f040 80a5 	bne.w	8003f10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	843b      	strh	r3, [r7, #32]
 8003dd4:	8c3b      	ldrh	r3, [r7, #32]
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01b      	beq.n	8003e16 <USB_DeactivateEndpoint+0x18a>
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	83fb      	strh	r3, [r7, #30]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	8bfb      	ldrh	r3, [r7, #30]
 8003e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	83bb      	strh	r3, [r7, #28]
 8003e24:	8bbb      	ldrh	r3, [r7, #28]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01b      	beq.n	8003e66 <USB_DeactivateEndpoint+0x1da>
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	837b      	strh	r3, [r7, #26]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	8b7b      	ldrh	r3, [r7, #26]
 8003e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	833b      	strh	r3, [r7, #24]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	8b3b      	ldrh	r3, [r7, #24]
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb4:	82fb      	strh	r3, [r7, #22]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	441a      	add	r2, r3
 8003ec0:	8afb      	ldrh	r3, [r7, #22]
 8003ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eec:	82bb      	strh	r3, [r7, #20]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	8abb      	ldrh	r3, [r7, #20]
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
 8003f0e:	e0a3      	b.n	8004058 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003f1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01b      	beq.n	8003f60 <USB_DeactivateEndpoint+0x2d4>
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <USB_DeactivateEndpoint+0x324>
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	847b      	strh	r3, [r7, #34]	; 0x22
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004054:	b29b      	uxth	r3, r3
 8004056:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3734      	adds	r7, #52	; 0x34
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b0c4      	sub	sp, #272	; 0x110
 8004068:	af00      	add	r7, sp, #0
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	6018      	str	r0, [r3, #0]
 800406e:	463b      	mov	r3, r7
 8004070:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004072:	463b      	mov	r3, r7
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 8557 	bne.w	8004b2c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800407e:	463b      	mov	r3, r7
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	463b      	mov	r3, r7
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d905      	bls.n	800409a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800408e:	463b      	mov	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004098:	e004      	b.n	80040a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800409a:	463b      	mov	r3, r7
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040a4:	463b      	mov	r3, r7
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	7b1b      	ldrb	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d12c      	bne.n	8004108 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040ae:	463b      	mov	r3, r7
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6959      	ldr	r1, [r3, #20]
 80040b4:	463b      	mov	r3, r7
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	88da      	ldrh	r2, [r3, #6]
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	b29b      	uxth	r3, r3
 80040c0:	1d38      	adds	r0, r7, #4
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	f001 fa2c 	bl	8005520 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4413      	add	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	463b      	mov	r3, r7
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	011a      	lsls	r2, r3, #4
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	f107 0310 	add.w	r3, r7, #16
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	f000 bcdd 	b.w	8004ac2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004108:	463b      	mov	r3, r7
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	78db      	ldrb	r3, [r3, #3]
 800410e:	2b02      	cmp	r3, #2
 8004110:	f040 8347 	bne.w	80047a2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004114:	463b      	mov	r3, r7
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a1a      	ldr	r2, [r3, #32]
 800411a:	463b      	mov	r3, r7
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	f240 82eb 	bls.w	80046fc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	463b      	mov	r3, r7
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800416a:	463b      	mov	r3, r7
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004174:	1ad2      	subs	r2, r2, r3
 8004176:	463b      	mov	r3, r7
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	463b      	mov	r3, r7
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8159 	beq.w	800444a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d164      	bne.n	8004272 <USB_EPStartXfer+0x20e>
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	4413      	add	r3, r2
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c0:	463b      	mov	r3, r7
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d112      	bne.n	8004200 <USB_EPStartXfer+0x19c>
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	e054      	b.n	80042aa <USB_EPStartXfer+0x246>
 8004200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004204:	2b3e      	cmp	r3, #62	; 0x3e
 8004206:	d817      	bhi.n	8004238 <USB_EPStartXfer+0x1d4>
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d004      	beq.n	8004228 <USB_EPStartXfer+0x1c4>
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004222:	3301      	adds	r3, #1
 8004224:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422c:	b29b      	uxth	r3, r3
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	b29a      	uxth	r2, r3
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	e038      	b.n	80042aa <USB_EPStartXfer+0x246>
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <USB_EPStartXfer+0x1f4>
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004252:	3b01      	subs	r3, #1
 8004254:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425c:	b29b      	uxth	r3, r3
 800425e:	029b      	lsls	r3, r3, #10
 8004260:	b29b      	uxth	r3, r3
 8004262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426a:	b29a      	uxth	r2, r3
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	e01b      	b.n	80042aa <USB_EPStartXfer+0x246>
 8004272:	463b      	mov	r3, r7
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d116      	bne.n	80042aa <USB_EPStartXfer+0x246>
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	4413      	add	r3, r2
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	4413      	add	r3, r2
 800429a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800429e:	633b      	str	r3, [r7, #48]	; 0x30
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80042aa:	463b      	mov	r3, r7
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	895b      	ldrh	r3, [r3, #10]
 80042b0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6959      	ldr	r1, [r3, #20]
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042c4:	1d38      	adds	r0, r7, #4
 80042c6:	6800      	ldr	r0, [r0, #0]
 80042c8:	f001 f92a 	bl	8005520 <USB_WritePMA>
            ep->xfer_buff += len;
 80042cc:	463b      	mov	r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d6:	441a      	add	r2, r3
 80042d8:	463b      	mov	r3, r7
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042de:	463b      	mov	r3, r7
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	463b      	mov	r3, r7
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d909      	bls.n	8004302 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80042ee:	463b      	mov	r3, r7
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	463b      	mov	r3, r7
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	621a      	str	r2, [r3, #32]
 8004300:	e008      	b.n	8004314 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004302:	463b      	mov	r3, r7
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800430c:	463b      	mov	r3, r7
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d164      	bne.n	80043e8 <USB_EPStartXfer+0x384>
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	1d3b      	adds	r3, r7, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	463b      	mov	r3, r7
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d112      	bne.n	8004376 <USB_EPStartXfer+0x312>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800435a:	b29a      	uxth	r2, r3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29a      	uxth	r2, r3
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	e057      	b.n	8004426 <USB_EPStartXfer+0x3c2>
 8004376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437a:	2b3e      	cmp	r3, #62	; 0x3e
 800437c:	d817      	bhi.n	80043ae <USB_EPStartXfer+0x34a>
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <USB_EPStartXfer+0x33a>
 8004394:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004398:	3301      	adds	r3, #1
 800439a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800439e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	029b      	lsls	r3, r3, #10
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	801a      	strh	r2, [r3, #0]
 80043ac:	e03b      	b.n	8004426 <USB_EPStartXfer+0x3c2>
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <USB_EPStartXfer+0x36a>
 80043c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043c8:	3b01      	subs	r3, #1
 80043ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	029b      	lsls	r3, r3, #10
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	e01e      	b.n	8004426 <USB_EPStartXfer+0x3c2>
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d119      	bne.n	8004426 <USB_EPStartXfer+0x3c2>
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	4413      	add	r3, r2
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	463b      	mov	r3, r7
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	011a      	lsls	r2, r3, #4
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	4413      	add	r3, r2
 8004416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004420:	b29a      	uxth	r2, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004426:	463b      	mov	r3, r7
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	891b      	ldrh	r3, [r3, #8]
 800442c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004430:	463b      	mov	r3, r7
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6959      	ldr	r1, [r3, #20]
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443a:	b29b      	uxth	r3, r3
 800443c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004440:	1d38      	adds	r0, r7, #4
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	f001 f86c 	bl	8005520 <USB_WritePMA>
 8004448:	e33b      	b.n	8004ac2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d164      	bne.n	800451e <USB_EPStartXfer+0x4ba>
 8004454:	1d3b      	adds	r3, r7, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	4413      	add	r3, r2
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800446c:	463b      	mov	r3, r7
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	011a      	lsls	r2, r3, #4
 8004474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004476:	4413      	add	r3, r2
 8004478:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800447c:	64bb      	str	r3, [r7, #72]	; 0x48
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d112      	bne.n	80044ac <USB_EPStartXfer+0x448>
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004490:	b29a      	uxth	r2, r3
 8004492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	e057      	b.n	800455c <USB_EPStartXfer+0x4f8>
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b0:	2b3e      	cmp	r3, #62	; 0x3e
 80044b2:	d817      	bhi.n	80044e4 <USB_EPStartXfer+0x480>
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <USB_EPStartXfer+0x470>
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ce:	3301      	adds	r3, #1
 80044d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d8:	b29b      	uxth	r3, r3
 80044da:	029b      	lsls	r3, r3, #10
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	e03b      	b.n	800455c <USB_EPStartXfer+0x4f8>
 80044e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80044ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <USB_EPStartXfer+0x4a0>
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fe:	3b01      	subs	r3, #1
 8004500:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004508:	b29b      	uxth	r3, r3
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	b29b      	uxth	r3, r3
 800450e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004516:	b29a      	uxth	r2, r3
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e01e      	b.n	800455c <USB_EPStartXfer+0x4f8>
 800451e:	463b      	mov	r3, r7
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d119      	bne.n	800455c <USB_EPStartXfer+0x4f8>
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	657b      	str	r3, [r7, #84]	; 0x54
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004536:	b29b      	uxth	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	4413      	add	r3, r2
 800453e:	657b      	str	r3, [r7, #84]	; 0x54
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	011a      	lsls	r2, r3, #4
 8004548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454a:	4413      	add	r3, r2
 800454c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004550:	653b      	str	r3, [r7, #80]	; 0x50
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004556:	b29a      	uxth	r2, r3
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	891b      	ldrh	r3, [r3, #8]
 8004562:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004566:	463b      	mov	r3, r7
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6959      	ldr	r1, [r3, #20]
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	b29b      	uxth	r3, r3
 8004572:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004576:	1d38      	adds	r0, r7, #4
 8004578:	6800      	ldr	r0, [r0, #0]
 800457a:	f000 ffd1 	bl	8005520 <USB_WritePMA>
            ep->xfer_buff += len;
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004588:	441a      	add	r2, r3
 800458a:	463b      	mov	r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6a1a      	ldr	r2, [r3, #32]
 8004596:	463b      	mov	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d909      	bls.n	80045b4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	621a      	str	r2, [r3, #32]
 80045b2:	e008      	b.n	80045c6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
 80045cc:	463b      	mov	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d164      	bne.n	80046a0 <USB_EPStartXfer+0x63c>
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	4413      	add	r3, r2
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ee:	463b      	mov	r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f8:	4413      	add	r3, r2
 80045fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d112      	bne.n	800462e <USB_EPStartXfer+0x5ca>
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004612:	b29a      	uxth	r2, r3
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004626:	b29a      	uxth	r2, r3
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e054      	b.n	80046d8 <USB_EPStartXfer+0x674>
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004632:	2b3e      	cmp	r3, #62	; 0x3e
 8004634:	d817      	bhi.n	8004666 <USB_EPStartXfer+0x602>
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <USB_EPStartXfer+0x5f2>
 800464c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004650:	3301      	adds	r3, #1
 8004652:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b29a      	uxth	r2, r3
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e038      	b.n	80046d8 <USB_EPStartXfer+0x674>
 8004666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <USB_EPStartXfer+0x622>
 800467c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004680:	3b01      	subs	r3, #1
 8004682:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800468a:	b29b      	uxth	r3, r3
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	b29b      	uxth	r3, r3
 8004690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004698:	b29a      	uxth	r2, r3
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e01b      	b.n	80046d8 <USB_EPStartXfer+0x674>
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d116      	bne.n	80046d8 <USB_EPStartXfer+0x674>
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b8:	4413      	add	r3, r2
 80046ba:	647b      	str	r3, [r7, #68]	; 0x44
 80046bc:	463b      	mov	r3, r7
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	011a      	lsls	r2, r3, #4
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	4413      	add	r3, r2
 80046c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046d8:	463b      	mov	r3, r7
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	895b      	ldrh	r3, [r3, #10]
 80046de:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046e2:	463b      	mov	r3, r7
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6959      	ldr	r1, [r3, #20]
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80046f2:	1d38      	adds	r0, r7, #4
 80046f4:	6800      	ldr	r0, [r0, #0]
 80046f6:	f000 ff13 	bl	8005520 <USB_WritePMA>
 80046fa:	e1e2      	b.n	8004ac2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	463b      	mov	r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	663b      	str	r3, [r7, #96]	; 0x60
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004758:	b29b      	uxth	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475e:	4413      	add	r3, r2
 8004760:	663b      	str	r3, [r7, #96]	; 0x60
 8004762:	463b      	mov	r3, r7
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	011a      	lsls	r2, r3, #4
 800476a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476c:	4413      	add	r3, r2
 800476e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004778:	b29a      	uxth	r2, r3
 800477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800477e:	463b      	mov	r3, r7
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	891b      	ldrh	r3, [r3, #8]
 8004784:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004788:	463b      	mov	r3, r7
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6959      	ldr	r1, [r3, #20]
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	b29b      	uxth	r3, r3
 8004794:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004798:	1d38      	adds	r0, r7, #4
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	f000 fec0 	bl	8005520 <USB_WritePMA>
 80047a0:	e18f      	b.n	8004ac2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 808f 	beq.w	80048dc <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c4:	463b      	mov	r3, r7
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d164      	bne.n	8004898 <USB_EPStartXfer+0x834>
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	673b      	str	r3, [r7, #112]	; 0x70
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e2:	4413      	add	r3, r2
 80047e4:	673b      	str	r3, [r7, #112]	; 0x70
 80047e6:	463b      	mov	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	011a      	lsls	r2, r3, #4
 80047ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d112      	bne.n	8004826 <USB_EPStartXfer+0x7c2>
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800480a:	b29a      	uxth	r2, r3
 800480c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480e:	801a      	strh	r2, [r3, #0]
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e054      	b.n	80048d0 <USB_EPStartXfer+0x86c>
 8004826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482a:	2b3e      	cmp	r3, #62	; 0x3e
 800482c:	d817      	bhi.n	800485e <USB_EPStartXfer+0x7fa>
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <USB_EPStartXfer+0x7ea>
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	3301      	adds	r3, #1
 800484a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	b29b      	uxth	r3, r3
 8004854:	029b      	lsls	r3, r3, #10
 8004856:	b29a      	uxth	r2, r3
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	e038      	b.n	80048d0 <USB_EPStartXfer+0x86c>
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <USB_EPStartXfer+0x81a>
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	3b01      	subs	r3, #1
 800487a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	b29b      	uxth	r3, r3
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	b29b      	uxth	r3, r3
 8004888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004890:	b29a      	uxth	r2, r3
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e01b      	b.n	80048d0 <USB_EPStartXfer+0x86c>
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d116      	bne.n	80048d0 <USB_EPStartXfer+0x86c>
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b0:	4413      	add	r3, r2
 80048b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80048b4:	463b      	mov	r3, r7
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	011a      	lsls	r2, r3, #4
 80048bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048be:	4413      	add	r3, r2
 80048c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048c4:	677b      	str	r3, [r7, #116]	; 0x74
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	895b      	ldrh	r3, [r3, #10]
 80048d6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80048da:	e097      	b.n	8004a0c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048dc:	463b      	mov	r3, r7
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d168      	bne.n	80049b8 <USB_EPStartXfer+0x954>
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048fe:	4413      	add	r3, r2
 8004900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004904:	463b      	mov	r3, r7
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	011a      	lsls	r2, r3, #4
 800490c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004910:	4413      	add	r3, r2
 8004912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d112      	bne.n	8004946 <USB_EPStartXfer+0x8e2>
 8004920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800492a:	b29a      	uxth	r2, r3
 800492c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29a      	uxth	r2, r3
 8004940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e05d      	b.n	8004a02 <USB_EPStartXfer+0x99e>
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494a:	2b3e      	cmp	r3, #62	; 0x3e
 800494c:	d817      	bhi.n	800497e <USB_EPStartXfer+0x91a>
 800494e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <USB_EPStartXfer+0x90a>
 8004964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004968:	3301      	adds	r3, #1
 800496a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800496e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004972:	b29b      	uxth	r3, r3
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	b29a      	uxth	r2, r3
 8004978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	e041      	b.n	8004a02 <USB_EPStartXfer+0x99e>
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <USB_EPStartXfer+0x93a>
 8004994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004998:	3b01      	subs	r3, #1
 800499a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800499e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e024      	b.n	8004a02 <USB_EPStartXfer+0x99e>
 80049b8:	463b      	mov	r3, r7
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d11f      	bne.n	8004a02 <USB_EPStartXfer+0x99e>
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049da:	4413      	add	r3, r2
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e0:	463b      	mov	r3, r7
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	011a      	lsls	r2, r3, #4
 80049e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	891b      	ldrh	r3, [r3, #8]
 8004a08:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6959      	ldr	r1, [r3, #20]
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a1c:	1d38      	adds	r0, r7, #4
 8004a1e:	6800      	ldr	r0, [r0, #0]
 8004a20:	f000 fd7e 	bl	8005520 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004a24:	463b      	mov	r3, r7
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d122      	bne.n	8004a74 <USB_EPStartXfer+0xa10>
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	463b      	mov	r3, r7
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a48:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	e026      	b.n	8004ac2 <USB_EPStartXfer+0xa5e>
 8004a74:	463b      	mov	r3, r7
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d121      	bne.n	8004ac2 <USB_EPStartXfer+0xa5e>
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	463b      	mov	r3, r7
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a98:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f107 020e 	add.w	r2, r7, #14
 8004ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae0:	8013      	strh	r3, [r2, #0]
 8004ae2:	f107 030e 	add.w	r3, r7, #14
 8004ae6:	f107 020e 	add.w	r2, r7, #14
 8004aea:	8812      	ldrh	r2, [r2, #0]
 8004aec:	f082 0210 	eor.w	r2, r2, #16
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	f107 030e 	add.w	r3, r7, #14
 8004af6:	f107 020e 	add.w	r2, r7, #14
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	f082 0220 	eor.w	r2, r2, #32
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	463b      	mov	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	f107 030e 	add.w	r3, r7, #14
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]
 8004b2a:	e3b5      	b.n	8005298 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	7b1b      	ldrb	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 8090 	bne.w	8004c58 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	463b      	mov	r3, r7
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d90e      	bls.n	8004b66 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004b48:	463b      	mov	r3, r7
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	463b      	mov	r3, r7
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	619a      	str	r2, [r3, #24]
 8004b64:	e008      	b.n	8004b78 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004b66:	463b      	mov	r3, r7
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004b70:	463b      	mov	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b90:	4413      	add	r3, r2
 8004b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b96:	463b      	mov	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	011a      	lsls	r2, r3, #4
 8004b9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d116      	bne.n	8004be2 <USB_EPStartXfer+0xb7e>
 8004bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e32c      	b.n	800523c <USB_EPStartXfer+0x11d8>
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be6:	2b3e      	cmp	r3, #62	; 0x3e
 8004be8:	d818      	bhi.n	8004c1c <USB_EPStartXfer+0xbb8>
 8004bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <USB_EPStartXfer+0xba6>
 8004c00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c04:	3301      	adds	r3, #1
 8004c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	029b      	lsls	r3, r3, #10
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	e30f      	b.n	800523c <USB_EPStartXfer+0x11d8>
 8004c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <USB_EPStartXfer+0xbd8>
 8004c32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	029b      	lsls	r3, r3, #10
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e2f1      	b.n	800523c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c58:	463b      	mov	r3, r7
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	f040 818f 	bne.w	8004f82 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d175      	bne.n	8004d5a <USB_EPStartXfer+0xcf6>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c86:	4413      	add	r3, r2
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	011a      	lsls	r2, r3, #4
 8004c94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c98:	4413      	add	r3, r2
 8004c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d116      	bne.n	8004cda <USB_EPStartXfer+0xc76>
 8004cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e065      	b.n	8004da6 <USB_EPStartXfer+0xd42>
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce2:	d81a      	bhi.n	8004d1a <USB_EPStartXfer+0xcb6>
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d004      	beq.n	8004d08 <USB_EPStartXfer+0xca4>
 8004cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d02:	3301      	adds	r3, #1
 8004d04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e045      	b.n	8004da6 <USB_EPStartXfer+0xd42>
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <USB_EPStartXfer+0xcda>
 8004d34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	029b      	lsls	r3, r3, #10
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e025      	b.n	8004da6 <USB_EPStartXfer+0xd42>
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d120      	bne.n	8004da6 <USB_EPStartXfer+0xd42>
 8004d64:	1d3b      	adds	r3, r7, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	011a      	lsls	r2, r3, #4
 8004d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d8e:	4413      	add	r3, r2
 8004d90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d98:	463b      	mov	r3, r7
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d175      	bne.n	8004ea4 <USB_EPStartXfer+0xe40>
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <USB_EPStartXfer+0xdc0>
 8004df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e08:	801a      	strh	r2, [r3, #0]
 8004e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e061      	b.n	8004ee8 <USB_EPStartXfer+0xe84>
 8004e24:	463b      	mov	r3, r7
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e2c:	d81a      	bhi.n	8004e64 <USB_EPStartXfer+0xe00>
 8004e2e:	463b      	mov	r3, r7
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <USB_EPStartXfer+0xdee>
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e041      	b.n	8004ee8 <USB_EPStartXfer+0xe84>
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <USB_EPStartXfer+0xe24>
 8004e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e82:	3b01      	subs	r3, #1
 8004e84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e021      	b.n	8004ee8 <USB_EPStartXfer+0xe84>
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d11c      	bne.n	8004ee8 <USB_EPStartXfer+0xe84>
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	011a      	lsls	r2, r3, #4
 8004ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004eda:	463b      	mov	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ee6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 81a4 	beq.w	800523c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f08:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <USB_EPStartXfer+0xebc>
 8004f14:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10d      	bne.n	8004f3c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f20:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 8187 	bne.w	800523c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f040 8180 	bne.w	800523c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	463b      	mov	r3, r7
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]
 8004f80:	e15c      	b.n	800523c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	f040 8155 	bne.w	8005238 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f8e:	463b      	mov	r3, r7
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d90e      	bls.n	8004fbc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	619a      	str	r2, [r3, #24]
 8004fba:	e008      	b.n	8004fce <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fce:	463b      	mov	r3, r7
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d16f      	bne.n	80050b8 <USB_EPStartXfer+0x1054>
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011a      	lsls	r2, r3, #4
 8004ffe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005002:	4413      	add	r3, r2
 8005004:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <USB_EPStartXfer+0xfde>
 8005014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005020:	b29a      	uxth	r2, r3
 8005022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005038:	b29a      	uxth	r2, r3
 800503a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800503e:	801a      	strh	r2, [r3, #0]
 8005040:	e05f      	b.n	8005102 <USB_EPStartXfer+0x109e>
 8005042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005046:	2b3e      	cmp	r3, #62	; 0x3e
 8005048:	d818      	bhi.n	800507c <USB_EPStartXfer+0x1018>
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <USB_EPStartXfer+0x1006>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	3301      	adds	r3, #1
 8005066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800506a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506e:	b29b      	uxth	r3, r3
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	b29a      	uxth	r2, r3
 8005074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	e042      	b.n	8005102 <USB_EPStartXfer+0x109e>
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <USB_EPStartXfer+0x1038>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	3b01      	subs	r3, #1
 8005098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e024      	b.n	8005102 <USB_EPStartXfer+0x109e>
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d11f      	bne.n	8005102 <USB_EPStartXfer+0x109e>
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050da:	4413      	add	r3, r2
 80050dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	011a      	lsls	r2, r3, #4
 80050e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ec:	4413      	add	r3, r2
 80050ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	1d3b      	adds	r3, r7, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800510a:	463b      	mov	r3, r7
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d16f      	bne.n	80051f4 <USB_EPStartXfer+0x1190>
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800511c:	1d3b      	adds	r3, r7, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005124:	b29b      	uxth	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800512c:	4413      	add	r3, r2
 800512e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	011a      	lsls	r2, r3, #4
 800513a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800513e:	4413      	add	r3, r2
 8005140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d116      	bne.n	800517e <USB_EPStartXfer+0x111a>
 8005150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29a      	uxth	r2, r3
 8005176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e05e      	b.n	800523c <USB_EPStartXfer+0x11d8>
 800517e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005182:	2b3e      	cmp	r3, #62	; 0x3e
 8005184:	d818      	bhi.n	80051b8 <USB_EPStartXfer+0x1154>
 8005186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <USB_EPStartXfer+0x1142>
 800519c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a0:	3301      	adds	r3, #1
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e041      	b.n	800523c <USB_EPStartXfer+0x11d8>
 80051b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <USB_EPStartXfer+0x1174>
 80051ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d2:	3b01      	subs	r3, #1
 80051d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051dc:	b29b      	uxth	r3, r3
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e023      	b.n	800523c <USB_EPStartXfer+0x11d8>
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d11e      	bne.n	800523c <USB_EPStartXfer+0x11d8>
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800520e:	4413      	add	r3, r2
 8005210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	011a      	lsls	r2, r3, #4
 800521c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005220:	4413      	add	r3, r2
 8005222:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800522a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522e:	b29a      	uxth	r2, r3
 8005230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e001      	b.n	800523c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e02e      	b.n	800529a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800525a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800525e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005262:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005266:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800526a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800526e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	463b      	mov	r3, r7
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052cc:	81bb      	strh	r3, [r7, #12]
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	f083 0310 	eor.w	r3, r3, #16
 80052d4:	81bb      	strh	r3, [r7, #12]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	89bb      	ldrh	r3, [r7, #12]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e01f      	b.n	8005338 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	81fb      	strh	r3, [r7, #14]
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005316:	81fb      	strh	r3, [r7, #14]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	7b1b      	ldrb	r3, [r3, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 809d 	bne.w	8005492 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d04c      	beq.n	80053fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	823b      	strh	r3, [r7, #16]
 800536e:	8a3b      	ldrh	r3, [r7, #16]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <USB_EPClearStall+0x6c>
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	81fb      	strh	r3, [r7, #14]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	78db      	ldrb	r3, [r3, #3]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d06c      	beq.n	8005492 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	81bb      	strh	r3, [r7, #12]
 80053d0:	89bb      	ldrh	r3, [r7, #12]
 80053d2:	f083 0320 	eor.w	r3, r3, #32
 80053d6:	81bb      	strh	r3, [r7, #12]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
 80053f8:	e04b      	b.n	8005492 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	82fb      	strh	r3, [r7, #22]
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01b      	beq.n	800544a <USB_EPClearStall+0x106>
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	82bb      	strh	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8abb      	ldrh	r3, [r7, #20]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800545c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005460:	827b      	strh	r3, [r7, #18]
 8005462:	8a7b      	ldrh	r3, [r7, #18]
 8005464:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005468:	827b      	strh	r3, [r7, #18]
 800546a:	8a7b      	ldrh	r3, [r7, #18]
 800546c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005470:	827b      	strh	r3, [r7, #18]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	8a7b      	ldrh	r3, [r7, #18]
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80054fe:	68fb      	ldr	r3, [r7, #12]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005520:	b480      	push	{r7}
 8005522:	b08d      	sub	sp, #52	; 0x34
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	460b      	mov	r3, r1
 8005530:	80fb      	strh	r3, [r7, #6]
 8005532:	4613      	mov	r3, r2
 8005534:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005536:	88bb      	ldrh	r3, [r7, #4]
 8005538:	3301      	adds	r3, #1
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	005a      	lsls	r2, r3, #1
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005558:	e01e      	b.n	8005598 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	3301      	adds	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	b29a      	uxth	r2, r3
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	3302      	adds	r3, #2
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	3302      	adds	r3, #2
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	3b01      	subs	r3, #1
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1dd      	bne.n	800555a <USB_WritePMA+0x3a>
  }
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	3734      	adds	r7, #52	; 0x34
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b08b      	sub	sp, #44	; 0x2c
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	4611      	mov	r1, r2
 80055b6:	461a      	mov	r2, r3
 80055b8:	460b      	mov	r3, r1
 80055ba:	80fb      	strh	r3, [r7, #6]
 80055bc:	4613      	mov	r3, r2
 80055be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055c0:	88bb      	ldrh	r3, [r7, #4]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	005a      	lsls	r2, r3, #1
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055dc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
 80055e2:	e01b      	b.n	800561c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	3302      	adds	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	b2da      	uxtb	r2, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	3302      	adds	r3, #2
 8005614:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	3b01      	subs	r3, #1
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e0      	bne.n	80055e4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005622:	88bb      	ldrh	r3, [r7, #4]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	701a      	strb	r2, [r3, #0]
  }
}
 800563e:	bf00      	nop
 8005640:	372c      	adds	r7, #44	; 0x2c
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005654:	2304      	movs	r3, #4
 8005656:	2203      	movs	r2, #3
 8005658:	2181      	movs	r1, #129	; 0x81
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f004 fbef 	bl	8009e3e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005666:	2010      	movs	r0, #16
 8005668:	f004 fcfe 	bl	800a068 <USBD_static_malloc>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800567e:	2302      	movs	r3, #2
 8005680:	e005      	b.n	800568e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005688:	2200      	movs	r2, #0
 800568a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056a2:	2181      	movs	r1, #129	; 0x81
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f004 fbf0 	bl	8009e8a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c0:	4618      	mov	r0, r3
 80056c2:	f004 fcdd 	bl	800a080 <USBD_static_free>
    pdev->pClassData = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005702:	2b00      	cmp	r3, #0
 8005704:	d045      	beq.n	8005792 <USBD_HID_Setup+0xba>
 8005706:	2b20      	cmp	r3, #32
 8005708:	f040 80d3 	bne.w	80058b2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	3b02      	subs	r3, #2
 8005712:	2b09      	cmp	r3, #9
 8005714:	d835      	bhi.n	8005782 <USBD_HID_Setup+0xaa>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <USBD_HID_Setup+0x44>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005773 	.word	0x08005773
 8005720:	08005753 	.word	0x08005753
 8005724:	08005783 	.word	0x08005783
 8005728:	08005783 	.word	0x08005783
 800572c:	08005783 	.word	0x08005783
 8005730:	08005783 	.word	0x08005783
 8005734:	08005783 	.word	0x08005783
 8005738:	08005783 	.word	0x08005783
 800573c:	08005761 	.word	0x08005761
 8005740:	08005745 	.word	0x08005745
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	885b      	ldrh	r3, [r3, #2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	601a      	str	r2, [r3, #0]
          break;
 8005750:	e01e      	b.n	8005790 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2201      	movs	r2, #1
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 f944 	bl	80069e6 <USBD_CtlSendData>
          break;
 800575e:	e017      	b.n	8005790 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	885b      	ldrh	r3, [r3, #2]
 8005764:	0a1b      	lsrs	r3, r3, #8
 8005766:	b29b      	uxth	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]
          break;
 8005770:	e00e      	b.n	8005790 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3304      	adds	r3, #4
 8005776:	2201      	movs	r2, #1
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 f933 	bl	80069e6 <USBD_CtlSendData>
          break;
 8005780:	e006      	b.n	8005790 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 f8c4 	bl	8006912 <USBD_CtlError>
          ret = USBD_FAIL;
 800578a:	2302      	movs	r3, #2
 800578c:	75fb      	strb	r3, [r7, #23]
          break;
 800578e:	bf00      	nop
      }
      break;
 8005790:	e096      	b.n	80058c0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b0b      	cmp	r3, #11
 8005798:	f200 8083 	bhi.w	80058a2 <USBD_HID_Setup+0x1ca>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <USBD_HID_Setup+0xcc>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057d5 	.word	0x080057d5
 80057a8:	080058a3 	.word	0x080058a3
 80057ac:	080058a3 	.word	0x080058a3
 80057b0:	080058a3 	.word	0x080058a3
 80057b4:	080058a3 	.word	0x080058a3
 80057b8:	080058a3 	.word	0x080058a3
 80057bc:	080057fd 	.word	0x080057fd
 80057c0:	080058a3 	.word	0x080058a3
 80057c4:	080058a3 	.word	0x080058a3
 80057c8:	080058a3 	.word	0x080058a3
 80057cc:	08005855 	.word	0x08005855
 80057d0:	0800587d 	.word	0x0800587d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d107      	bne.n	80057ee <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80057de:	f107 030e 	add.w	r3, r7, #14
 80057e2:	2202      	movs	r2, #2
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 f8fd 	bl	80069e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057ec:	e060      	b.n	80058b0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 f88e 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 80057f6:	2302      	movs	r3, #2
 80057f8:	75fb      	strb	r3, [r7, #23]
          break;
 80057fa:	e059      	b.n	80058b0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	885b      	ldrh	r3, [r3, #2]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b22      	cmp	r3, #34	; 0x22
 8005806:	d108      	bne.n	800581a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	88db      	ldrh	r3, [r3, #6]
 800580c:	2b3f      	cmp	r3, #63	; 0x3f
 800580e:	bf28      	it	cs
 8005810:	233f      	movcs	r3, #63	; 0x3f
 8005812:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 8005814:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <USBD_HID_Setup+0x1f4>)
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e015      	b.n	8005846 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	885b      	ldrh	r3, [r3, #2]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b21      	cmp	r3, #33	; 0x21
 8005824:	d108      	bne.n	8005838 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005826:	4b2a      	ldr	r3, [pc, #168]	; (80058d0 <USBD_HID_Setup+0x1f8>)
 8005828:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	88db      	ldrh	r3, [r3, #6]
 800582e:	2b09      	cmp	r3, #9
 8005830:	bf28      	it	cs
 8005832:	2309      	movcs	r3, #9
 8005834:	83fb      	strh	r3, [r7, #30]
 8005836:	e006      	b.n	8005846 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f869 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 8005840:	2302      	movs	r3, #2
 8005842:	75fb      	strb	r3, [r7, #23]
            break;
 8005844:	e034      	b.n	80058b0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005846:	8bfb      	ldrh	r3, [r7, #30]
 8005848:	461a      	mov	r2, r3
 800584a:	69b9      	ldr	r1, [r7, #24]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 f8ca 	bl	80069e6 <USBD_CtlSendData>
          break;
 8005852:	e02d      	b.n	80058b0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585a:	2b03      	cmp	r3, #3
 800585c:	d107      	bne.n	800586e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3308      	adds	r3, #8
 8005862:	2201      	movs	r2, #1
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f8bd 	bl	80069e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800586c:	e020      	b.n	80058b0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f84e 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 8005876:	2302      	movs	r3, #2
 8005878:	75fb      	strb	r3, [r7, #23]
          break;
 800587a:	e019      	b.n	80058b0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005882:	2b03      	cmp	r3, #3
 8005884:	d106      	bne.n	8005894 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	885b      	ldrh	r3, [r3, #2]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005892:	e00d      	b.n	80058b0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 f83b 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 800589c:	2302      	movs	r3, #2
 800589e:	75fb      	strb	r3, [r7, #23]
          break;
 80058a0:	e006      	b.n	80058b0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f834 	bl	8006912 <USBD_CtlError>
          ret = USBD_FAIL;
 80058aa:	2302      	movs	r3, #2
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	bf00      	nop
      }
      break;
 80058b0:	e006      	b.n	80058c0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f82c 	bl	8006912 <USBD_CtlError>
      ret = USBD_FAIL;
 80058ba:	2302      	movs	r3, #2
 80058bc:	75fb      	strb	r3, [r7, #23]
      break;
 80058be:	bf00      	nop
  }

  return ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	200000c8 	.word	0x200000c8
 80058d0:	200000b0 	.word	0x200000b0

080058d4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d10c      	bne.n	800590e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	7b1b      	ldrb	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2201      	movs	r2, #1
 8005900:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	2181      	movs	r1, #129	; 0x81
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f004 fb66 	bl	8009fda <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2222      	movs	r2, #34	; 0x22
 8005924:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005926:	4b03      	ldr	r3, [pc, #12]	; (8005934 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000044 	.word	0x20000044

08005938 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2222      	movs	r2, #34	; 0x22
 8005944:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005946:	4b03      	ldr	r3, [pc, #12]	; (8005954 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000068 	.word	0x20000068

08005958 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2222      	movs	r2, #34	; 0x22
 8005964:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000008c 	.word	0x2000008c

08005978 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598a:	2200      	movs	r2, #0
 800598c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
	...

0800599c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	220a      	movs	r2, #10
 80059a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80059aa:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200000bc 	.word	0x200000bc

080059bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059d0:	2302      	movs	r3, #2
 80059d2:	e01a      	b.n	8005a0a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	79fa      	ldrb	r2, [r7, #7]
 8005a00:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f004 f9b8 	bl	8009d78 <USBD_LL_Init>

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d006      	beq.n	8005a34 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	e001      	b.n	8005a38 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a34:	2302      	movs	r3, #2
 8005a36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr

08005a44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f004 f9db 	bl	8009e08 <USBD_LL_Start>

  return USBD_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	78fa      	ldrb	r2, [r7, #3]
 8005a94:	4611      	mov	r1, r2
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3

  return USBD_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fed7 	bl	800689a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d016      	beq.n	8005b3e <USBD_LL_SetupStage+0x6a>
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d81c      	bhi.n	8005b4e <USBD_LL_SetupStage+0x7a>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <USBD_LL_SetupStage+0x4a>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d008      	beq.n	8005b2e <USBD_LL_SetupStage+0x5a>
 8005b1c:	e017      	b.n	8005b4e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9ca 	bl	8005ec0 <USBD_StdDevReq>
      break;
 8005b2c:	e01a      	b.n	8005b64 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa2c 	bl	8005f94 <USBD_StdItfReq>
      break;
 8005b3c:	e012      	b.n	8005b64 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa6c 	bl	8006024 <USBD_StdEPReq>
      break;
 8005b4c:	e00a      	b.n	8005b64 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f004 f9b3 	bl	8009ec8 <USBD_LL_StallEP>
      break;
 8005b62:	bf00      	nop
  }

  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b086      	sub	sp, #24
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	460b      	mov	r3, r1
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d14b      	bne.n	8005c1a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d134      	bne.n	8005bfe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d919      	bls.n	8005bd4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	e002      	b.n	8005bc8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 ff38 	bl	8006a42 <USBD_CtlContinueRx>
 8005bd2:	e038      	b.n	8005c46 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d105      	bne.n	8005bf6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 ff35 	bl	8006a66 <USBD_CtlSendStatus>
 8005bfc:	e023      	b.n	8005c46 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d11e      	bne.n	8005c46 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005c10:	2100      	movs	r1, #0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f004 f958 	bl	8009ec8 <USBD_LL_StallEP>
 8005c18:	e015      	b.n	8005c46 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00d      	beq.n	8005c42 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d108      	bne.n	8005c42 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	7afa      	ldrb	r2, [r7, #11]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	4798      	blx	r3
 8005c40:	e001      	b.n	8005c46 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e000      	b.n	8005c48 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d17f      	bne.n	8005d64 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3314      	adds	r3, #20
 8005c68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d15c      	bne.n	8005d2e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d915      	bls.n	8005cac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fec0 	bl	8006a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f004 f9bb 	bl	800a020 <USBD_LL_PrepareReceive>
 8005caa:	e04e      	b.n	8005d4a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6912      	ldr	r2, [r2, #16]
 8005cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cb8:	fb02 f201 	mul.w	r2, r2, r1
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11c      	bne.n	8005cfc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d316      	bcc.n	8005cfc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d20f      	bcs.n	8005cfc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fe9c 	bl	8006a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f004 f993 	bl	800a020 <USBD_LL_PrepareReceive>
 8005cfa:	e026      	b.n	8005d4a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d105      	bne.n	8005d1e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f004 f8d1 	bl	8009ec8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 feb0 	bl	8006a8c <USBD_CtlReceiveStatus>
 8005d2c:	e00d      	b.n	8005d4a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d004      	beq.n	8005d42 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f004 f8bf 	bl	8009ec8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11d      	bne.n	8005d90 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fe81 	bl	8005a5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d62:	e015      	b.n	8005d90 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d108      	bne.n	8005d8c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	7afa      	ldrb	r2, [r7, #11]
 8005d84:	4611      	mov	r1, r2
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	4798      	blx	r3
 8005d8a:	e001      	b.n	8005d90 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e000      	b.n	8005d92 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005da2:	2340      	movs	r3, #64	; 0x40
 8005da4:	2200      	movs	r2, #0
 8005da6:	2100      	movs	r1, #0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f004 f848 	bl	8009e3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2240      	movs	r2, #64	; 0x40
 8005dba:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2180      	movs	r1, #128	; 0x80
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f004 f83a 	bl	8009e3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2240      	movs	r2, #64	; 0x40
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6852      	ldr	r2, [r2, #4]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
  }

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2204      	movs	r2, #4
 8005e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d105      	bne.n	8005e80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d10b      	bne.n	8005eb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d005      	beq.n	8005ee6 <USBD_StdDevReq+0x26>
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d84f      	bhi.n	8005f7e <USBD_StdDevReq+0xbe>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d009      	beq.n	8005ef6 <USBD_StdDevReq+0x36>
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d14b      	bne.n	8005f7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
      break;
 8005ef4:	e048      	b.n	8005f88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	d839      	bhi.n	8005f72 <USBD_StdDevReq+0xb2>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <USBD_StdDevReq+0x44>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f55 	.word	0x08005f55
 8005f08:	08005f69 	.word	0x08005f69
 8005f0c:	08005f73 	.word	0x08005f73
 8005f10:	08005f5f 	.word	0x08005f5f
 8005f14:	08005f73 	.word	0x08005f73
 8005f18:	08005f37 	.word	0x08005f37
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f73 	.word	0x08005f73
 8005f24:	08005f4b 	.word	0x08005f4b
 8005f28:	08005f41 	.word	0x08005f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9dc 	bl	80062ec <USBD_GetDescriptor>
          break;
 8005f34:	e022      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb3f 	bl	80065bc <USBD_SetAddress>
          break;
 8005f3e:	e01d      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fb7e 	bl	8006644 <USBD_SetConfig>
          break;
 8005f48:	e018      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc07 	bl	8006760 <USBD_GetConfig>
          break;
 8005f52:	e013      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fc37 	bl	80067ca <USBD_GetStatus>
          break;
 8005f5c:	e00e      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fc65 	bl	8006830 <USBD_SetFeature>
          break;
 8005f66:	e009      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fc74 	bl	8006858 <USBD_ClrFeature>
          break;
 8005f70:	e004      	b.n	8005f7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fccc 	bl	8006912 <USBD_CtlError>
          break;
 8005f7a:	bf00      	nop
      }
      break;
 8005f7c:	e004      	b.n	8005f88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fcc6 	bl	8006912 <USBD_CtlError>
      break;
 8005f86:	bf00      	nop
  }

  return ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop

08005f94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d005      	beq.n	8005fba <USBD_StdItfReq+0x26>
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d82e      	bhi.n	8006010 <USBD_StdItfReq+0x7c>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <USBD_StdItfReq+0x26>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d12a      	bne.n	8006010 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d81d      	bhi.n	8006002 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	889b      	ldrh	r3, [r3, #4]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d813      	bhi.n	8005ff8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	88db      	ldrh	r3, [r3, #6]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d110      	bne.n	800600c <USBD_StdItfReq+0x78>
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10d      	bne.n	800600c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fd38 	bl	8006a66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ff6:	e009      	b.n	800600c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fc89 	bl	8006912 <USBD_CtlError>
          break;
 8006000:	e004      	b.n	800600c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fc84 	bl	8006912 <USBD_CtlError>
          break;
 800600a:	e000      	b.n	800600e <USBD_StdItfReq+0x7a>
          break;
 800600c:	bf00      	nop
      }
      break;
 800600e:	e004      	b.n	800601a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc7d 	bl	8006912 <USBD_CtlError>
      break;
 8006018:	bf00      	nop
  }

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	889b      	ldrh	r3, [r3, #4]
 8006036:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d007      	beq.n	8006054 <USBD_StdEPReq+0x30>
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	f200 8146 	bhi.w	80062d6 <USBD_StdEPReq+0x2b2>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <USBD_StdEPReq+0x40>
 800604e:	2b20      	cmp	r3, #32
 8006050:	f040 8141 	bne.w	80062d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
      break;
 8006062:	e13d      	b.n	80062e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800606c:	2b20      	cmp	r3, #32
 800606e:	d10a      	bne.n	8006086 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	e12d      	b.n	80062e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b03      	cmp	r3, #3
 800608c:	d007      	beq.n	800609e <USBD_StdEPReq+0x7a>
 800608e:	2b03      	cmp	r3, #3
 8006090:	f300 811b 	bgt.w	80062ca <USBD_StdEPReq+0x2a6>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d072      	beq.n	800617e <USBD_StdEPReq+0x15a>
 8006098:	2b01      	cmp	r3, #1
 800609a:	d03a      	beq.n	8006112 <USBD_StdEPReq+0xee>
 800609c:	e115      	b.n	80062ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d002      	beq.n	80060ae <USBD_StdEPReq+0x8a>
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d015      	beq.n	80060d8 <USBD_StdEPReq+0xb4>
 80060ac:	e02b      	b.n	8006106 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <USBD_StdEPReq+0xaa>
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d009      	beq.n	80060ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f003 ff02 	bl	8009ec8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f003 fefe 	bl	8009ec8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060cc:	e020      	b.n	8006110 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fc1e 	bl	8006912 <USBD_CtlError>
              break;
 80060d6:	e01b      	b.n	8006110 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	885b      	ldrh	r3, [r3, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10e      	bne.n	80060fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <USBD_StdEPReq+0xda>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d008      	beq.n	80060fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	88db      	ldrh	r3, [r3, #6]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80060f4:	7bbb      	ldrb	r3, [r7, #14]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f003 fee5 	bl	8009ec8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fcb1 	bl	8006a66 <USBD_CtlSendStatus>

              break;
 8006104:	e004      	b.n	8006110 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fc02 	bl	8006912 <USBD_CtlError>
              break;
 800610e:	bf00      	nop
          }
          break;
 8006110:	e0e0      	b.n	80062d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	2b02      	cmp	r3, #2
 800611a:	d002      	beq.n	8006122 <USBD_StdEPReq+0xfe>
 800611c:	2b03      	cmp	r3, #3
 800611e:	d015      	beq.n	800614c <USBD_StdEPReq+0x128>
 8006120:	e026      	b.n	8006170 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <USBD_StdEPReq+0x11e>
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d009      	beq.n	8006142 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f003 fec8 	bl	8009ec8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f003 fec4 	bl	8009ec8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006140:	e01c      	b.n	800617c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fbe4 	bl	8006912 <USBD_CtlError>
              break;
 800614a:	e017      	b.n	800617c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d112      	bne.n	800617a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f003 fecf 	bl	8009f06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc7c 	bl	8006a66 <USBD_CtlSendStatus>
              }
              break;
 800616e:	e004      	b.n	800617a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fbcd 	bl	8006912 <USBD_CtlError>
              break;
 8006178:	e000      	b.n	800617c <USBD_StdEPReq+0x158>
              break;
 800617a:	bf00      	nop
          }
          break;
 800617c:	e0aa      	b.n	80062d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	2b02      	cmp	r3, #2
 8006186:	d002      	beq.n	800618e <USBD_StdEPReq+0x16a>
 8006188:	2b03      	cmp	r3, #3
 800618a:	d032      	beq.n	80061f2 <USBD_StdEPReq+0x1ce>
 800618c:	e097      	b.n	80062be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <USBD_StdEPReq+0x180>
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d004      	beq.n	80061a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fbb8 	bl	8006912 <USBD_CtlError>
                break;
 80061a2:	e091      	b.n	80062c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	da0b      	bge.n	80061c4 <USBD_StdEPReq+0x1a0>
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	3310      	adds	r3, #16
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	3304      	adds	r3, #4
 80061c2:	e00b      	b.n	80061dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	3304      	adds	r3, #4
 80061dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2202      	movs	r2, #2
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fbfb 	bl	80069e6 <USBD_CtlSendData>
              break;
 80061f0:	e06a      	b.n	80062c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	da11      	bge.n	800621e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3318      	adds	r3, #24
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d117      	bne.n	8006244 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb7b 	bl	8006912 <USBD_CtlError>
                  break;
 800621c:	e054      	b.n	80062c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb68 	bl	8006912 <USBD_CtlError>
                  break;
 8006242:	e041      	b.n	80062c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da0b      	bge.n	8006264 <USBD_StdEPReq+0x240>
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3310      	adds	r3, #16
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	e00b      	b.n	800627c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	3304      	adds	r3, #4
 800627c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <USBD_StdEPReq+0x266>
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d103      	bne.n	8006292 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	e00e      	b.n	80062b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f003 fe54 	bl	8009f44 <USBD_LL_IsStallEP>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e002      	b.n	80062b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2202      	movs	r2, #2
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb95 	bl	80069e6 <USBD_CtlSendData>
              break;
 80062bc:	e004      	b.n	80062c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb26 	bl	8006912 <USBD_CtlError>
              break;
 80062c6:	bf00      	nop
          }
          break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb20 	bl	8006912 <USBD_CtlError>
          break;
 80062d2:	bf00      	nop
      }
      break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fb1a 	bl	8006912 <USBD_CtlError>
      break;
 80062de:	bf00      	nop
  }

  return ret;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	885b      	ldrh	r3, [r3, #2]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	2b06      	cmp	r3, #6
 800630e:	f200 8128 	bhi.w	8006562 <USBD_GetDescriptor+0x276>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <USBD_GetDescriptor+0x2c>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006335 	.word	0x08006335
 800631c:	0800634d 	.word	0x0800634d
 8006320:	0800638d 	.word	0x0800638d
 8006324:	08006563 	.word	0x08006563
 8006328:	08006563 	.word	0x08006563
 800632c:	08006503 	.word	0x08006503
 8006330:	0800652f 	.word	0x0800652f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	7c12      	ldrb	r2, [r2, #16]
 8006340:	f107 0108 	add.w	r1, r7, #8
 8006344:	4610      	mov	r0, r2
 8006346:	4798      	blx	r3
 8006348:	60f8      	str	r0, [r7, #12]
      break;
 800634a:	e112      	b.n	8006572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7c1b      	ldrb	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	f107 0208 	add.w	r2, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	2202      	movs	r2, #2
 800636c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800636e:	e100      	b.n	8006572 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f107 0208 	add.w	r2, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	2202      	movs	r2, #2
 8006388:	701a      	strb	r2, [r3, #0]
      break;
 800638a:	e0f2      	b.n	8006572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	885b      	ldrh	r3, [r3, #2]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b05      	cmp	r3, #5
 8006394:	f200 80ac 	bhi.w	80064f0 <USBD_GetDescriptor+0x204>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <USBD_GetDescriptor+0xb4>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b9 	.word	0x080063b9
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006455 	.word	0x08006455
 80063b0:	08006489 	.word	0x08006489
 80063b4:	080064bd 	.word	0x080064bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	7c12      	ldrb	r2, [r2, #16]
 80063d0:	f107 0108 	add.w	r1, r7, #8
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
 80063d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063da:	e091      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa97 	bl	8006912 <USBD_CtlError>
            err++;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	3301      	adds	r3, #1
 80063e8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ea:	e089      	b.n	8006500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	7c12      	ldrb	r2, [r2, #16]
 8006404:	f107 0108 	add.w	r1, r7, #8
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
 800640c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800640e:	e077      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa7d 	bl	8006912 <USBD_CtlError>
            err++;
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	3301      	adds	r3, #1
 800641c:	72fb      	strb	r3, [r7, #11]
          break;
 800641e:	e06f      	b.n	8006500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7c12      	ldrb	r2, [r2, #16]
 8006438:	f107 0108 	add.w	r1, r7, #8
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
 8006440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006442:	e05d      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa63 	bl	8006912 <USBD_CtlError>
            err++;
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	3301      	adds	r3, #1
 8006450:	72fb      	strb	r3, [r7, #11]
          break;
 8006452:	e055      	b.n	8006500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	7c12      	ldrb	r2, [r2, #16]
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006476:	e043      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa49 	bl	8006912 <USBD_CtlError>
            err++;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3301      	adds	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]
          break;
 8006486:	e03b      	b.n	8006500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	7c12      	ldrb	r2, [r2, #16]
 80064a0:	f107 0108 	add.w	r1, r7, #8
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
 80064a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064aa:	e029      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa2f 	bl	8006912 <USBD_CtlError>
            err++;
 80064b4:	7afb      	ldrb	r3, [r7, #11]
 80064b6:	3301      	adds	r3, #1
 80064b8:	72fb      	strb	r3, [r7, #11]
          break;
 80064ba:	e021      	b.n	8006500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7c12      	ldrb	r2, [r2, #16]
 80064d4:	f107 0108 	add.w	r1, r7, #8
 80064d8:	4610      	mov	r0, r2
 80064da:	4798      	blx	r3
 80064dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064de:	e00f      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa15 	bl	8006912 <USBD_CtlError>
            err++;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	3301      	adds	r3, #1
 80064ec:	72fb      	strb	r3, [r7, #11]
          break;
 80064ee:	e007      	b.n	8006500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa0d 	bl	8006912 <USBD_CtlError>
          err++;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
 80064fa:	3301      	adds	r3, #1
 80064fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80064fe:	e038      	b.n	8006572 <USBD_GetDescriptor+0x286>
 8006500:	e037      	b.n	8006572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	7c1b      	ldrb	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	f107 0208 	add.w	r2, r7, #8
 8006516:	4610      	mov	r0, r2
 8006518:	4798      	blx	r3
 800651a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800651c:	e029      	b.n	8006572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9f6 	bl	8006912 <USBD_CtlError>
        err++;
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	3301      	adds	r3, #1
 800652a:	72fb      	strb	r3, [r7, #11]
      break;
 800652c:	e021      	b.n	8006572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7c1b      	ldrb	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10d      	bne.n	8006552 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	f107 0208 	add.w	r2, r7, #8
 8006542:	4610      	mov	r0, r2
 8006544:	4798      	blx	r3
 8006546:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	2207      	movs	r2, #7
 800654e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006550:	e00f      	b.n	8006572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9dc 	bl	8006912 <USBD_CtlError>
        err++;
 800655a:	7afb      	ldrb	r3, [r7, #11]
 800655c:	3301      	adds	r3, #1
 800655e:	72fb      	strb	r3, [r7, #11]
      break;
 8006560:	e007      	b.n	8006572 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9d4 	bl	8006912 <USBD_CtlError>
      err++;
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	3301      	adds	r3, #1
 800656e:	72fb      	strb	r3, [r7, #11]
      break;
 8006570:	bf00      	nop
  }

  if (err != 0U)
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11c      	bne.n	80065b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006578:	893b      	ldrh	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d011      	beq.n	80065a2 <USBD_GetDescriptor+0x2b6>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	88da      	ldrh	r2, [r3, #6]
 800658a:	893b      	ldrh	r3, [r7, #8]
 800658c:	4293      	cmp	r3, r2
 800658e:	bf28      	it	cs
 8006590:	4613      	movcs	r3, r2
 8006592:	b29b      	uxth	r3, r3
 8006594:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	461a      	mov	r2, r3
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fa22 	bl	80069e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88db      	ldrh	r3, [r3, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa5b 	bl	8006a66 <USBD_CtlSendStatus>
 80065b0:	e000      	b.n	80065b4 <USBD_GetDescriptor+0x2c8>
    return;
 80065b2:	bf00      	nop
    }
  }
}
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	889b      	ldrh	r3, [r3, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d130      	bne.n	8006630 <USBD_SetAddress+0x74>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	88db      	ldrh	r3, [r3, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d12c      	bne.n	8006630 <USBD_SetAddress+0x74>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d828      	bhi.n	8006630 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d104      	bne.n	80065fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f98b 	bl	8006912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fc:	e01d      	b.n	800663a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7bfa      	ldrb	r2, [r7, #15]
 8006602:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f003 fcc6 	bl	8009f9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa28 	bl	8006a66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006624:	e009      	b.n	800663a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662e:	e004      	b.n	800663a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f96d 	bl	8006912 <USBD_CtlError>
  }
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	885b      	ldrh	r3, [r3, #2]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b41      	ldr	r3, [pc, #260]	; (800675c <USBD_SetConfig+0x118>)
 8006656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006658:	4b40      	ldr	r3, [pc, #256]	; (800675c <USBD_SetConfig+0x118>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d904      	bls.n	800666a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f955 	bl	8006912 <USBD_CtlError>
 8006668:	e075      	b.n	8006756 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	2b02      	cmp	r3, #2
 8006672:	d002      	beq.n	800667a <USBD_SetConfig+0x36>
 8006674:	2b03      	cmp	r3, #3
 8006676:	d023      	beq.n	80066c0 <USBD_SetConfig+0x7c>
 8006678:	e062      	b.n	8006740 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800667a:	4b38      	ldr	r3, [pc, #224]	; (800675c <USBD_SetConfig+0x118>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01a      	beq.n	80066b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006682:	4b36      	ldr	r3, [pc, #216]	; (800675c <USBD_SetConfig+0x118>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2203      	movs	r2, #3
 8006690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006694:	4b31      	ldr	r3, [pc, #196]	; (800675c <USBD_SetConfig+0x118>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff f9e8 	bl	8005a70 <USBD_SetClassConfig>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d104      	bne.n	80066b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f932 	bl	8006912 <USBD_CtlError>
            return;
 80066ae:	e052      	b.n	8006756 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f9d8 	bl	8006a66 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066b6:	e04e      	b.n	8006756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9d4 	bl	8006a66 <USBD_CtlSendStatus>
        break;
 80066be:	e04a      	b.n	8006756 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80066c0:	4b26      	ldr	r3, [pc, #152]	; (800675c <USBD_SetConfig+0x118>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d112      	bne.n	80066ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <USBD_SetConfig+0x118>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80066da:	4b20      	ldr	r3, [pc, #128]	; (800675c <USBD_SetConfig+0x118>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff f9e4 	bl	8005aae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f9bd 	bl	8006a66 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066ec:	e033      	b.n	8006756 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80066ee:	4b1b      	ldr	r3, [pc, #108]	; (800675c <USBD_SetConfig+0x118>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d01d      	beq.n	8006738 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff f9d2 	bl	8005aae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <USBD_SetConfig+0x118>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006714:	4b11      	ldr	r3, [pc, #68]	; (800675c <USBD_SetConfig+0x118>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff f9a8 	bl	8005a70 <USBD_SetClassConfig>
 8006720:	4603      	mov	r3, r0
 8006722:	2b02      	cmp	r3, #2
 8006724:	d104      	bne.n	8006730 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8f2 	bl	8006912 <USBD_CtlError>
            return;
 800672e:	e012      	b.n	8006756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f998 	bl	8006a66 <USBD_CtlSendStatus>
        break;
 8006736:	e00e      	b.n	8006756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f994 	bl	8006a66 <USBD_CtlSendStatus>
        break;
 800673e:	e00a      	b.n	8006756 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f8e5 	bl	8006912 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <USBD_SetConfig+0x118>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff f9ad 	bl	8005aae <USBD_ClrClassConfig>
        break;
 8006754:	bf00      	nop
    }
  }
}
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200002a8 	.word	0x200002a8

08006760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d004      	beq.n	800677c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f8cc 	bl	8006912 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800677a:	e022      	b.n	80067c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006782:	2b02      	cmp	r3, #2
 8006784:	dc02      	bgt.n	800678c <USBD_GetConfig+0x2c>
 8006786:	2b00      	cmp	r3, #0
 8006788:	dc03      	bgt.n	8006792 <USBD_GetConfig+0x32>
 800678a:	e015      	b.n	80067b8 <USBD_GetConfig+0x58>
 800678c:	2b03      	cmp	r3, #3
 800678e:	d00b      	beq.n	80067a8 <USBD_GetConfig+0x48>
 8006790:	e012      	b.n	80067b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3308      	adds	r3, #8
 800679c:	2201      	movs	r2, #1
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f920 	bl	80069e6 <USBD_CtlSendData>
        break;
 80067a6:	e00c      	b.n	80067c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	2201      	movs	r2, #1
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f918 	bl	80069e6 <USBD_CtlSendData>
        break;
 80067b6:	e004      	b.n	80067c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8a9 	bl	8006912 <USBD_CtlError>
        break;
 80067c0:	bf00      	nop
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067da:	3b01      	subs	r3, #1
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d81e      	bhi.n	800681e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	88db      	ldrh	r3, [r3, #6]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d004      	beq.n	80067f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f891 	bl	8006912 <USBD_CtlError>
        break;
 80067f0:	e01a      	b.n	8006828 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	330c      	adds	r3, #12
 8006812:	2202      	movs	r2, #2
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8e5 	bl	80069e6 <USBD_CtlSendData>
      break;
 800681c:	e004      	b.n	8006828 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f876 	bl	8006912 <USBD_CtlError>
      break;
 8006826:	bf00      	nop
  }
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d106      	bne.n	8006850 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f90b 	bl	8006a66 <USBD_CtlSendStatus>
  }
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006868:	3b01      	subs	r3, #1
 800686a:	2b02      	cmp	r3, #2
 800686c:	d80b      	bhi.n	8006886 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10c      	bne.n	8006890 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8f1 	bl	8006a66 <USBD_CtlSendStatus>
      }
      break;
 8006884:	e004      	b.n	8006890 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f842 	bl	8006912 <USBD_CtlError>
      break;
 800688e:	e000      	b.n	8006892 <USBD_ClrFeature+0x3a>
      break;
 8006890:	bf00      	nop
  }
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	785a      	ldrb	r2, [r3, #1]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	3302      	adds	r3, #2
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	3303      	adds	r3, #3
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	3304      	adds	r3, #4
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	3305      	adds	r3, #5
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4413      	add	r3, r2
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	3306      	adds	r3, #6
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	3307      	adds	r3, #7
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4413      	add	r3, r2
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	80da      	strh	r2, [r3, #6]

}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f003 fad2 	bl	8009ec8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006924:	2100      	movs	r1, #0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f003 face 	bl	8009ec8 <USBD_LL_StallEP>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d032      	beq.n	80069b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f834 	bl	80069b8 <USBD_GetLen>
 8006950:	4603      	mov	r3, r0
 8006952:	3301      	adds	r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	75fa      	strb	r2, [r7, #23]
 8006964:	461a      	mov	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	75fa      	strb	r2, [r7, #23]
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4413      	add	r3, r2
 800697c:	2203      	movs	r2, #3
 800697e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006980:	e012      	b.n	80069a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	60fa      	str	r2, [r7, #12]
 8006988:	7dfa      	ldrb	r2, [r7, #23]
 800698a:	1c51      	adds	r1, r2, #1
 800698c:	75f9      	strb	r1, [r7, #23]
 800698e:	4611      	mov	r1, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	440a      	add	r2, r1
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	75fa      	strb	r2, [r7, #23]
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4413      	add	r3, r2
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e8      	bne.n	8006982 <USBD_GetString+0x4e>
    }
  }
}
 80069b0:	bf00      	nop
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80069c4:	e005      	b.n	80069d2 <USBD_GetLen+0x1a>
  {
    len++;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	3301      	adds	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3301      	adds	r3, #1
 80069d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f5      	bne.n	80069c6 <USBD_GetLen+0xe>
  }

  return len;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr

080069e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	4613      	mov	r3, r2
 80069f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f003 fae3 	bl	8009fda <USBD_LL_Transmit>

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	2100      	movs	r1, #0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f003 fad1 	bl	8009fda <USBD_LL_Transmit>

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f003 fae2 	bl	800a020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f003 faac 	bl	8009fda <USBD_LL_Transmit>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2205      	movs	r2, #5
 8006a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f003 fabc 	bl	800a020 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aba:	f3ef 8305 	mrs	r3, IPSR
 8006abe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aca:	607b      	str	r3, [r7, #4]
  return(result);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <osKernelInitialize+0x32>
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <osKernelInitialize+0x60>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d109      	bne.n	8006aee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ada:	f3ef 8311 	mrs	r3, BASEPRI
 8006ade:	603b      	str	r3, [r7, #0]
  return(result);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006ae6:	f06f 0305 	mvn.w	r3, #5
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e00c      	b.n	8006b08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <osKernelInitialize+0x60>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006af6:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <osKernelInitialize+0x60>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	e002      	b.n	8006b08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	200002ac 	.word	0x200002ac

08006b18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b1e:	f3ef 8305 	mrs	r3, IPSR
 8006b22:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2e:	607b      	str	r3, [r7, #4]
  return(result);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <osKernelStart+0x32>
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <osKernelStart+0x64>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d109      	bne.n	8006b52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b42:	603b      	str	r3, [r7, #0]
  return(result);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006b4a:	f06f 0305 	mvn.w	r3, #5
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e00e      	b.n	8006b70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <osKernelStart+0x64>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d107      	bne.n	8006b6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <osKernelStart+0x64>)
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006b60:	f001 fb0e 	bl	8008180 <vTaskStartScheduler>
      stat = osOK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e002      	b.n	8006b70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b70:	68fb      	ldr	r3, [r7, #12]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200002ac 	.word	0x200002ac

08006b80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b092      	sub	sp, #72	; 0x48
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b90:	f3ef 8305 	mrs	r3, IPSR
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8094 	bne.w	8006cc6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 808d 	bne.w	8006cc6 <osThreadNew+0x146>
 8006bac:	4b48      	ldr	r3, [pc, #288]	; (8006cd0 <osThreadNew+0x150>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d106      	bne.n	8006bc2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 8082 	bne.w	8006cc6 <osThreadNew+0x146>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d07e      	beq.n	8006cc6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006bcc:	2318      	movs	r3, #24
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006bd4:	f107 031b 	add.w	r3, r7, #27
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d045      	beq.n	8006c72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <osThreadNew+0x74>
        name = attr->name;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <osThreadNew+0x9a>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	2b38      	cmp	r3, #56	; 0x38
 8006c0c:	d805      	bhi.n	8006c1a <osThreadNew+0x9a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <osThreadNew+0x9e>
        return (NULL);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e054      	b.n	8006cc8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	089b      	lsrs	r3, r3, #2
 8006c2c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <osThreadNew+0xd4>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	2b5b      	cmp	r3, #91	; 0x5b
 8006c3c:	d90a      	bls.n	8006c54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <osThreadNew+0xd4>
        mem = 1;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c52:	e010      	b.n	8006c76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10c      	bne.n	8006c76 <osThreadNew+0xf6>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d108      	bne.n	8006c76 <osThreadNew+0xf6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <osThreadNew+0xf6>
          mem = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c70:	e001      	b.n	8006c76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d110      	bne.n	8006c9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c84:	9202      	str	r2, [sp, #8]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f001 f8a8 	bl	8007de8 <xTaskCreateStatic>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e013      	b.n	8006cc6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d110      	bne.n	8006cc6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f8f2 	bl	8007ea0 <xTaskCreate>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d001      	beq.n	8006cc6 <osThreadNew+0x146>
          hTask = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cc6:	697b      	ldr	r3, [r7, #20]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3738      	adds	r7, #56	; 0x38
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	200002ac 	.word	0x200002ac

08006cd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cdc:	f3ef 8305 	mrs	r3, IPSR
 8006ce0:	613b      	str	r3, [r7, #16]
  return(result);
 8006ce2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10f      	bne.n	8006d08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <osDelay+0x34>
 8006cf4:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <osDelay+0x58>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d109      	bne.n	8006d10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <osDelay+0x3c>
    stat = osErrorISR;
 8006d08:	f06f 0305 	mvn.w	r3, #5
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e007      	b.n	8006d20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f9fc 	bl	8008118 <vTaskDelay>
    }
  }

  return (stat);
 8006d20:	697b      	ldr	r3, [r7, #20]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200002ac 	.word	0x200002ac

08006d30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d40:	f3ef 8305 	mrs	r3, IPSR
 8006d44:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d16f      	bne.n	8006e2c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d50:	617b      	str	r3, [r7, #20]
  return(result);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d169      	bne.n	8006e2c <osMessageQueueNew+0xfc>
 8006d58:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <osMessageQueueNew+0x108>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d105      	bne.n	8006d6c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d60:	f3ef 8311 	mrs	r3, BASEPRI
 8006d64:	613b      	str	r3, [r7, #16]
  return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d15f      	bne.n	8006e2c <osMessageQueueNew+0xfc>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d05c      	beq.n	8006e2c <osMessageQueueNew+0xfc>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d059      	beq.n	8006e2c <osMessageQueueNew+0xfc>
    mem = -1;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d029      	beq.n	8006dd8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d012      	beq.n	8006db2 <osMessageQueueNew+0x82>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	2b4f      	cmp	r3, #79	; 0x4f
 8006d92:	d90e      	bls.n	8006db2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d302      	bcc.n	8006db2 <osMessageQueueNew+0x82>
        mem = 1;
 8006dac:	2301      	movs	r3, #1
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	e014      	b.n	8006ddc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d110      	bne.n	8006ddc <osMessageQueueNew+0xac>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10c      	bne.n	8006ddc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d108      	bne.n	8006ddc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <osMessageQueueNew+0xac>
          mem = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
 8006dd6:	e001      	b.n	8006ddc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d10b      	bne.n	8006dfa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2100      	movs	r1, #0
 8006dec:	9100      	str	r1, [sp, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fa85 	bl	8007300 <xQueueGenericCreateStatic>
 8006df6:	6278      	str	r0, [r7, #36]	; 0x24
 8006df8:	e008      	b.n	8006e0c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006e00:	2200      	movs	r2, #0
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 faf2 	bl	80073ee <xQueueGenericCreate>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e001      	b.n	8006e24 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e24:	69f9      	ldr	r1, [r7, #28]
 8006e26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e28:	f000 ff82 	bl	8007d30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3728      	adds	r7, #40	; 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200002ac 	.word	0x200002ac

08006e3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e54:	f3ef 8305 	mrs	r3, IPSR
 8006e58:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e5a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10f      	bne.n	8006e80 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <osMessageQueuePut+0x44>
 8006e6c:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <osMessageQueuePut+0xe0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d12e      	bne.n	8006ed2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e74:	f3ef 8311 	mrs	r3, BASEPRI
 8006e78:	617b      	str	r3, [r7, #20]
  return(result);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d028      	beq.n	8006ed2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <osMessageQueuePut+0x56>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <osMessageQueuePut+0x56>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006e92:	f06f 0303 	mvn.w	r3, #3
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e98:	e039      	b.n	8006f0e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e9e:	f107 0210 	add.w	r2, r7, #16
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	6a38      	ldr	r0, [r7, #32]
 8006ea8:	f000 fc00 	bl	80076ac <xQueueGenericSendFromISR>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d003      	beq.n	8006eba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006eb2:	f06f 0302 	mvn.w	r3, #2
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006eb8:	e029      	b.n	8006f0e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d026      	beq.n	8006f0e <osMessageQueuePut+0xd2>
 8006ec0:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <osMessageQueuePut+0xe4>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ed0:	e01d      	b.n	8006f0e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <osMessageQueuePut+0xa2>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006ede:	f06f 0303 	mvn.w	r3, #3
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee4:	e014      	b.n	8006f10 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	6a38      	ldr	r0, [r7, #32]
 8006eee:	f000 fadf 	bl	80074b0 <xQueueGenericSend>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d00b      	beq.n	8006f10 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006efe:	f06f 0301 	mvn.w	r3, #1
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
 8006f04:	e004      	b.n	8006f10 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006f06:	f06f 0302 	mvn.w	r3, #2
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	e000      	b.n	8006f10 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3728      	adds	r7, #40	; 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200002ac 	.word	0x200002ac
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	; 0x28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3a:	f3ef 8305 	mrs	r3, IPSR
 8006f3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f40:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10f      	bne.n	8006f66 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f46:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <osMessageQueueGet+0x42>
 8006f52:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <osMessageQueueGet+0xdc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d12e      	bne.n	8006fb8 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d028      	beq.n	8006fb8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <osMessageQueueGet+0x54>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <osMessageQueueGet+0x54>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006f78:	f06f 0303 	mvn.w	r3, #3
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f7e:	e038      	b.n	8006ff2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	6a38      	ldr	r0, [r7, #32]
 8006f8e:	f000 fd05 	bl	800799c <xQueueReceiveFromISR>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006f98:	f06f 0302 	mvn.w	r3, #2
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f9e:	e028      	b.n	8006ff2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d025      	beq.n	8006ff2 <osMessageQueueGet+0xce>
 8006fa6:	4b17      	ldr	r3, [pc, #92]	; (8007004 <osMessageQueueGet+0xe0>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fb6:	e01c      	b.n	8006ff2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osMessageQueueGet+0xa0>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006fc4:	f06f 0303 	mvn.w	r3, #3
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fca:	e013      	b.n	8006ff4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	6a38      	ldr	r0, [r7, #32]
 8006fd2:	f000 fc03 	bl	80077dc <xQueueReceive>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d00b      	beq.n	8006ff4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006fe2:	f06f 0301 	mvn.w	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe8:	e004      	b.n	8006ff4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006fea:	f06f 0302 	mvn.w	r3, #2
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff0:	e000      	b.n	8006ff4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ff2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3728      	adds	r7, #40	; 0x28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200002ac 	.word	0x200002ac
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <osMessageQueueGetCount+0x18>
    count = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	e01e      	b.n	800705e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007020:	f3ef 8305 	mrs	r3, IPSR
 8007024:	617b      	str	r3, [r7, #20]
  return(result);
 8007026:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10f      	bne.n	800704c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800702c:	f3ef 8310 	mrs	r3, PRIMASK
 8007030:	613b      	str	r3, [r7, #16]
  return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <osMessageQueueGetCount+0x44>
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <osMessageQueueGetCount+0x60>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d10a      	bne.n	8007056 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007040:	f3ef 8311 	mrs	r3, BASEPRI
 8007044:	60fb      	str	r3, [r7, #12]
  return(result);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800704c:	69b8      	ldr	r0, [r7, #24]
 800704e:	f000 fd43 	bl	8007ad8 <uxQueueMessagesWaitingFromISR>
 8007052:	61f8      	str	r0, [r7, #28]
 8007054:	e003      	b.n	800705e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007056:	69b8      	ldr	r0, [r7, #24]
 8007058:	f000 fd20 	bl	8007a9c <uxQueueMessagesWaiting>
 800705c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800705e:	69fb      	ldr	r3, [r7, #28]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200002ac 	.word	0x200002ac

0800706c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a06      	ldr	r2, [pc, #24]	; (8007094 <vApplicationGetIdleTaskMemory+0x28>)
 800707c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a05      	ldr	r2, [pc, #20]	; (8007098 <vApplicationGetIdleTaskMemory+0x2c>)
 8007082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	200002b0 	.word	0x200002b0
 8007098:	2000030c 	.word	0x2000030c

0800709c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80070ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a06      	ldr	r2, [pc, #24]	; (80070cc <vApplicationGetTimerTaskMemory+0x30>)
 80070b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ba:	601a      	str	r2, [r3, #0]
}
 80070bc:	bf00      	nop
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	2000050c 	.word	0x2000050c
 80070cc:	20000568 	.word	0x20000568

080070d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f103 0208 	add.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f103 0208 	add.w	r2, r3, #8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f103 0208 	add.w	r2, r3, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e00c      	b.n	80071a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3308      	adds	r3, #8
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e002      	b.n	800719a <vListInsert+0x2e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d2f6      	bcs.n	8007194 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6892      	ldr	r2, [r2, #8]
 80071f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	429a      	cmp	r2, r3
 8007206:	d103      	bne.n	8007210 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr
	...

08007230 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800725a:	f002 f8bf 	bl	80093dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	441a      	add	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	3b01      	subs	r3, #1
 800728c:	68f9      	ldr	r1, [r7, #12]
 800728e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	441a      	add	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	22ff      	movs	r2, #255	; 0xff
 800729e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	22ff      	movs	r2, #255	; 0xff
 80072a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d114      	bne.n	80072da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01a      	beq.n	80072ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3310      	adds	r3, #16
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f9e9 	bl	8008694 <xTaskRemoveFromEventList>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072c8:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <xQueueGenericReset+0xcc>)
 80072ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	e009      	b.n	80072ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3310      	adds	r3, #16
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff fef6 	bl	80070d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3324      	adds	r3, #36	; 0x24
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fef1 	bl	80070d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072ee:	f002 f8a5 	bl	800943c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072f2:	2301      	movs	r3, #1
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08e      	sub	sp, #56	; 0x38
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <xQueueGenericCreateStatic+0x52>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <xQueueGenericCreateStatic+0x56>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <xQueueGenericCreateStatic+0x58>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	623b      	str	r3, [r7, #32]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <xQueueGenericCreateStatic+0x7e>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <xQueueGenericCreateStatic+0x82>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueGenericCreateStatic+0x84>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800739e:	2350      	movs	r3, #80	; 0x50
 80073a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b50      	cmp	r3, #80	; 0x50
 80073a6:	d00a      	beq.n	80073be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	61bb      	str	r3, [r7, #24]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f843 	bl	800746a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3730      	adds	r7, #48	; 0x30
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b08a      	sub	sp, #40	; 0x28
 80073f2:	af02      	add	r7, sp, #8
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	613b      	str	r3, [r7, #16]
}
 8007414:	bf00      	nop
 8007416:	e7fe      	b.n	8007416 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	e004      	b.n	800742e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3350      	adds	r3, #80	; 0x50
 8007432:	4618      	mov	r0, r3
 8007434:	f002 f8d2 	bl	80095dc <pvPortMalloc>
 8007438:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00f      	beq.n	8007460 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	3350      	adds	r3, #80	; 0x50
 8007444:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800744e:	79fa      	ldrb	r2, [r7, #7]
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f805 	bl	800746a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007460:	69bb      	ldr	r3, [r7, #24]
	}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
 8007476:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e002      	b.n	800748c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007498:	2101      	movs	r1, #1
 800749a:	69b8      	ldr	r0, [r7, #24]
 800749c:	f7ff fec8 	bl	8007230 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08e      	sub	sp, #56	; 0x38
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xQueueGenericSend+0x32>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <xQueueGenericSend+0x40>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <xQueueGenericSend+0x44>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <xQueueGenericSend+0x46>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <xQueueGenericSend+0x60>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d103      	bne.n	800751e <xQueueGenericSend+0x6e>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <xQueueGenericSend+0x72>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSend+0x74>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueGenericSend+0x8e>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	623b      	str	r3, [r7, #32]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800753e:	f001 fa6b 	bl	8008a18 <xTaskGetSchedulerState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <xQueueGenericSend+0x9e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <xQueueGenericSend+0xa2>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSend+0xa4>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xQueueGenericSend+0xbe>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	61fb      	str	r3, [r7, #28]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800756e:	f001 ff35 	bl	80093dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	429a      	cmp	r2, r3
 800757c:	d302      	bcc.n	8007584 <xQueueGenericSend+0xd4>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b02      	cmp	r3, #2
 8007582:	d129      	bne.n	80075d8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758a:	f000 fac0 	bl	8007b0e <prvCopyDataToQueue>
 800758e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d010      	beq.n	80075ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	3324      	adds	r3, #36	; 0x24
 800759c:	4618      	mov	r0, r3
 800759e:	f001 f879 	bl	8008694 <xTaskRemoveFromEventList>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d013      	beq.n	80075d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075a8:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <xQueueGenericSend+0x1f8>)
 80075aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	e00a      	b.n	80075d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075c0:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <xQueueGenericSend+0x1f8>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075d0:	f001 ff34 	bl	800943c <vPortExitCritical>
				return pdPASS;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e063      	b.n	80076a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075de:	f001 ff2d 	bl	800943c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e05c      	b.n	80076a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 f8b3 	bl	800875c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075fa:	f001 ff1f 	bl	800943c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075fe:	f000 fe25 	bl	800824c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007602:	f001 feeb 	bl	80093dc <vPortEnterCritical>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800760c:	b25b      	sxtb	r3, r3
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d103      	bne.n	800761c <xQueueGenericSend+0x16c>
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007622:	b25b      	sxtb	r3, r3
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d103      	bne.n	8007632 <xQueueGenericSend+0x182>
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007632:	f001 ff03 	bl	800943c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007636:	1d3a      	adds	r2, r7, #4
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	4611      	mov	r1, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f8a2 	bl	8008788 <xTaskCheckForTimeOut>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d124      	bne.n	8007694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800764a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800764c:	f000 fb57 	bl	8007cfe <prvIsQueueFull>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d018      	beq.n	8007688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	3310      	adds	r3, #16
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f000 ffc8 	bl	80085f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007666:	f000 fae2 	bl	8007c2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800766a:	f000 fdfd 	bl	8008268 <xTaskResumeAll>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f47f af7c 	bne.w	800756e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <xQueueGenericSend+0x1f8>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	e772      	b.n	800756e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800768a:	f000 fad0 	bl	8007c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800768e:	f000 fdeb 	bl	8008268 <xTaskResumeAll>
 8007692:	e76c      	b.n	800756e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007696:	f000 faca 	bl	8007c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800769a:	f000 fde5 	bl	8008268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800769e:	2300      	movs	r3, #0
		}
	}
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3738      	adds	r7, #56	; 0x38
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08e      	sub	sp, #56	; 0x38
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <xQueueGenericSendFromISR+0x3c>
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <xQueueGenericSendFromISR+0x40>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <xQueueGenericSendFromISR+0x42>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	623b      	str	r3, [r7, #32]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d103      	bne.n	8007716 <xQueueGenericSendFromISR+0x6a>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <xQueueGenericSendFromISR+0x6e>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericSendFromISR+0x70>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	61fb      	str	r3, [r7, #28]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007736:	f001 ff13 	bl	8009560 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800773a:	f3ef 8211 	mrs	r2, BASEPRI
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	61ba      	str	r2, [r7, #24]
 8007750:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007752:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <xQueueGenericSendFromISR+0xbc>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d12c      	bne.n	80077c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007778:	f000 f9c9 	bl	8007b0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800777c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d112      	bne.n	80077ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	d016      	beq.n	80077bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	3324      	adds	r3, #36	; 0x24
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ff7e 	bl	8008694 <xTaskRemoveFromEventList>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e007      	b.n	80077bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077b0:	3301      	adds	r3, #1
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	b25a      	sxtb	r2, r3
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077bc:	2301      	movs	r3, #1
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80077c0:	e001      	b.n	80077c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3738      	adds	r7, #56	; 0x38
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <xQueueReceive+0x30>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	623b      	str	r3, [r7, #32]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <xQueueReceive+0x3e>
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <xQueueReceive+0x42>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <xQueueReceive+0x44>
 800781e:	2300      	movs	r3, #0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xQueueReceive+0x5e>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	61fb      	str	r3, [r7, #28]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800783a:	f001 f8ed 	bl	8008a18 <xTaskGetSchedulerState>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <xQueueReceive+0x6e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <xQueueReceive+0x72>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueReceive+0x74>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <xQueueReceive+0x8e>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	61bb      	str	r3, [r7, #24]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800786a:	f001 fdb7 	bl	80093dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01f      	beq.n	80078ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787e:	f000 f9b0 	bl	8007be2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00f      	beq.n	80078b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	3310      	adds	r3, #16
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fefc 	bl	8008694 <xTaskRemoveFromEventList>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078a2:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <xQueueReceive+0x1bc>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078b2:	f001 fdc3 	bl	800943c <vPortExitCritical>
				return pdPASS;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e069      	b.n	800798e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c0:	f001 fdbc 	bl	800943c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e062      	b.n	800798e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 ff42 	bl	800875c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078dc:	f001 fdae 	bl	800943c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e0:	f000 fcb4 	bl	800824c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e4:	f001 fd7a 	bl	80093dc <vPortEnterCritical>
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ee:	b25b      	sxtb	r3, r3
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d103      	bne.n	80078fe <xQueueReceive+0x122>
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007904:	b25b      	sxtb	r3, r3
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d103      	bne.n	8007914 <xQueueReceive+0x138>
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007914:	f001 fd92 	bl	800943c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007918:	1d3a      	adds	r2, r7, #4
 800791a:	f107 0310 	add.w	r3, r7, #16
 800791e:	4611      	mov	r1, r2
 8007920:	4618      	mov	r0, r3
 8007922:	f000 ff31 	bl	8008788 <xTaskCheckForTimeOut>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d123      	bne.n	8007974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f000 f9d0 	bl	8007cd2 <prvIsQueueEmpty>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d017      	beq.n	8007968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	3324      	adds	r3, #36	; 0x24
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fe57 	bl	80085f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007948:	f000 f971 	bl	8007c2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800794c:	f000 fc8c 	bl	8008268 <xTaskResumeAll>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d189      	bne.n	800786a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007956:	4b10      	ldr	r3, [pc, #64]	; (8007998 <xQueueReceive+0x1bc>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	e780      	b.n	800786a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796a:	f000 f960 	bl	8007c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800796e:	f000 fc7b 	bl	8008268 <xTaskResumeAll>
 8007972:	e77a      	b.n	800786a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 f95a 	bl	8007c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797a:	f000 fc75 	bl	8008268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800797e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007980:	f000 f9a7 	bl	8007cd2 <prvIsQueueEmpty>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	f43f af6f 	beq.w	800786a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800798c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800798e:	4618      	mov	r0, r3
 8007990:	3730      	adds	r7, #48	; 0x30
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	; 0x38
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	623b      	str	r3, [r7, #32]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d103      	bne.n	80079d6 <xQueueReceiveFromISR+0x3a>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <xQueueReceiveFromISR+0x3e>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <xQueueReceiveFromISR+0x40>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	61fb      	str	r3, [r7, #28]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079f6:	f001 fdb3 	bl	8009560 <vPortValidateInterruptPriority>
	__asm volatile
 80079fa:	f3ef 8211 	mrs	r2, BASEPRI
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	61ba      	str	r2, [r7, #24]
 8007a10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d02f      	beq.n	8007a82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a2c:	68b9      	ldr	r1, [r7, #8]
 8007a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a30:	f000 f8d7 	bl	8007be2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d112      	bne.n	8007a6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	3310      	adds	r3, #16
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fe1e 	bl	8008694 <xTaskRemoveFromEventList>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e007      	b.n	8007a7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	3301      	adds	r3, #1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	b25a      	sxtb	r2, r3
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a80:	e001      	b.n	8007a86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f383 8811 	msr	BASEPRI, r3
}
 8007a90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3738      	adds	r7, #56	; 0x38
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	60bb      	str	r3, [r7, #8]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007ac0:	f001 fc8c 	bl	80093dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007aca:	f001 fcb7 	bl	800943c <vPortExitCritical>

	return uxReturn;
 8007ace:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	60bb      	str	r3, [r7, #8]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8007b02:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d14d      	bne.n	8007bd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 ff8b 	bl	8008a54 <xTaskPriorityDisinherit>
 8007b3e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	e043      	b.n	8007bd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d119      	bne.n	8007b82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6898      	ldr	r0, [r3, #8]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	461a      	mov	r2, r3
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	f002 faf5 	bl	800a148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d32b      	bcc.n	8007bd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	e026      	b.n	8007bd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68d8      	ldr	r0, [r3, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	f002 fadb 	bl	800a148 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	425b      	negs	r3, r3
 8007b9c:	441a      	add	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d207      	bcs.n	8007bbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	425b      	negs	r3, r3
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d105      	bne.n	8007bd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bd8:	697b      	ldr	r3, [r7, #20]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d303      	bcc.n	8007c16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68d9      	ldr	r1, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6838      	ldr	r0, [r7, #0]
 8007c22:	f002 fa91 	bl	800a148 <memcpy>
	}
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c36:	f001 fbd1 	bl	80093dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c42:	e011      	b.n	8007c68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d012      	beq.n	8007c72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fd1f 	bl	8008694 <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c5c:	f000 fdf6 	bl	800884c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dce9      	bgt.n	8007c44 <prvUnlockQueue+0x16>
 8007c70:	e000      	b.n	8007c74 <prvUnlockQueue+0x46>
					break;
 8007c72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22ff      	movs	r2, #255	; 0xff
 8007c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c7c:	f001 fbde 	bl	800943c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c80:	f001 fbac 	bl	80093dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c8c:	e011      	b.n	8007cb2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d012      	beq.n	8007cbc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3310      	adds	r3, #16
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fcfa 	bl	8008694 <xTaskRemoveFromEventList>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ca6:	f000 fdd1 	bl	800884c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dce9      	bgt.n	8007c8e <prvUnlockQueue+0x60>
 8007cba:	e000      	b.n	8007cbe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cbc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	22ff      	movs	r2, #255	; 0xff
 8007cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cc6:	f001 fbb9 	bl	800943c <vPortExitCritical>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cda:	f001 fb7f 	bl	80093dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e001      	b.n	8007cf0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cf0:	f001 fba4 	bl	800943c <vPortExitCritical>

	return xReturn;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d06:	f001 fb69 	bl	80093dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d102      	bne.n	8007d1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e001      	b.n	8007d20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d20:	f001 fb8c 	bl	800943c <vPortExitCritical>

	return xReturn;
 8007d24:	68fb      	ldr	r3, [r7, #12]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e014      	b.n	8007d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d40:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <vQueueAddToRegistry+0x4c>)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10b      	bne.n	8007d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d4c:	490b      	ldr	r1, [pc, #44]	; (8007d7c <vQueueAddToRegistry+0x4c>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <vQueueAddToRegistry+0x4c>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d62:	e006      	b.n	8007d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	d9e7      	bls.n	8007d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr
 8007d7c:	20001be0 	.word	0x20001be0

08007d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d90:	f001 fb24 	bl	80093dc <vPortEnterCritical>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d103      	bne.n	8007daa <vQueueWaitForMessageRestricted+0x2a>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d103      	bne.n	8007dc0 <vQueueWaitForMessageRestricted+0x40>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dc0:	f001 fb3c 	bl	800943c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d106      	bne.n	8007dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3324      	adds	r3, #36	; 0x24
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fc31 	bl	800863c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f7ff ff27 	bl	8007c2e <prvUnlockQueue>
	}
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08e      	sub	sp, #56	; 0x38
 8007dec:	af04      	add	r7, sp, #16
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	623b      	str	r3, [r7, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <xTaskCreateStatic+0x46>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	61fb      	str	r3, [r7, #28]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e2e:	235c      	movs	r3, #92	; 0x5c
 8007e30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b5c      	cmp	r3, #92	; 0x5c
 8007e36:	d00a      	beq.n	8007e4e <xTaskCreateStatic+0x66>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	61bb      	str	r3, [r7, #24]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01e      	beq.n	8007e92 <xTaskCreateStatic+0xaa>
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01b      	beq.n	8007e92 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	9303      	str	r3, [sp, #12]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	9302      	str	r3, [sp, #8]
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f850 	bl	8007f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e8c:	f000 f8d4 	bl	8008038 <prvAddNewTaskToReadyList>
 8007e90:	e001      	b.n	8007e96 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e96:	697b      	ldr	r3, [r7, #20]
	}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3728      	adds	r7, #40	; 0x28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	; 0x30
 8007ea4:	af04      	add	r7, sp, #16
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 fb91 	bl	80095dc <pvPortMalloc>
 8007eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007ec2:	205c      	movs	r0, #92	; 0x5c
 8007ec4:	f001 fb8a 	bl	80095dc <pvPortMalloc>
 8007ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ed6:	e005      	b.n	8007ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ed8:	6978      	ldr	r0, [r7, #20]
 8007eda:	f001 fc43 	bl	8009764 <vPortFree>
 8007ede:	e001      	b.n	8007ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ef2:	88fa      	ldrh	r2, [r7, #6]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f80e 	bl	8007f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f0e:	69f8      	ldr	r0, [r7, #28]
 8007f10:	f000 f892 	bl	8008038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f14:	2301      	movs	r3, #1
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	e002      	b.n	8007f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f20:	69bb      	ldr	r3, [r7, #24]
	}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	461a      	mov	r2, r3
 8007f42:	21a5      	movs	r1, #165	; 0xa5
 8007f44:	f002 f90e 	bl	800a164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f52:	3b01      	subs	r3, #1
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f023 0307 	bic.w	r3, r3, #7
 8007f60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	617b      	str	r3, [r7, #20]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e012      	b.n	8007fae <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	7819      	ldrb	r1, [r3, #0]
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	3334      	adds	r3, #52	; 0x34
 8007f98:	460a      	mov	r2, r1
 8007f9a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d006      	beq.n	8007fb6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	3301      	adds	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d9e9      	bls.n	8007f88 <prvInitialiseNewTask+0x5e>
 8007fb4:	e000      	b.n	8007fb8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007fb6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b37      	cmp	r3, #55	; 0x37
 8007fc4:	d901      	bls.n	8007fca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fc6:	2337      	movs	r3, #55	; 0x37
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2200      	movs	r2, #0
 8007fda:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f894 	bl	800710e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	3318      	adds	r3, #24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f88f 	bl	800710e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008004:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2200      	movs	r2, #0
 800800a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	69b8      	ldr	r0, [r7, #24]
 800801a:	f001 f8ef 	bl	80091fc <pxPortInitialiseStack>
 800801e:	4602      	mov	r2, r0
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008030:	bf00      	nop
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008040:	f001 f9cc 	bl	80093dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	4a2c      	ldr	r2, [pc, #176]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 800804c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800804e:	4b2c      	ldr	r3, [pc, #176]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008056:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800805c:	4b27      	ldr	r3, [pc, #156]	; (80080fc <prvAddNewTaskToReadyList+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d110      	bne.n	8008086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008064:	f000 fc16 	bl	8008894 <prvInitialiseTaskLists>
 8008068:	e00d      	b.n	8008086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800806a:	4b26      	ldr	r3, [pc, #152]	; (8008104 <prvAddNewTaskToReadyList+0xcc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	429a      	cmp	r2, r3
 800807e:	d802      	bhi.n	8008086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008080:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008086:	4b20      	ldr	r3, [pc, #128]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 800808e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008090:	4b1d      	ldr	r3, [pc, #116]	; (8008108 <prvAddNewTaskToReadyList+0xd0>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <prvAddNewTaskToReadyList+0xd4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <prvAddNewTaskToReadyList+0x74>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <prvAddNewTaskToReadyList+0xd4>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4a15      	ldr	r2, [pc, #84]	; (8008110 <prvAddNewTaskToReadyList+0xd8>)
 80080ba:	441a      	add	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7ff f82f 	bl	8007126 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080c8:	f001 f9b8 	bl	800943c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <prvAddNewTaskToReadyList+0xcc>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00e      	beq.n	80080f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <prvAddNewTaskToReadyList+0xc8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d207      	bcs.n	80080f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <prvAddNewTaskToReadyList+0xdc>)
 80080e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000e3c 	.word	0x20000e3c
 8008100:	20000968 	.word	0x20000968
 8008104:	20000e48 	.word	0x20000e48
 8008108:	20000e58 	.word	0x20000e58
 800810c:	20000e44 	.word	0x20000e44
 8008110:	2000096c 	.word	0x2000096c
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d017      	beq.n	800815a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800812a:	4b13      	ldr	r3, [pc, #76]	; (8008178 <vTaskDelay+0x60>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <vTaskDelay+0x30>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60bb      	str	r3, [r7, #8]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008148:	f000 f880 	bl	800824c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fcee 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008154:	f000 f888 	bl	8008268 <xTaskResumeAll>
 8008158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d107      	bne.n	8008170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008160:	4b06      	ldr	r3, [pc, #24]	; (800817c <vTaskDelay+0x64>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000e64 	.word	0x20000e64
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08a      	sub	sp, #40	; 0x28
 8008184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800818e:	463a      	mov	r2, r7
 8008190:	1d39      	adds	r1, r7, #4
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe ff68 	bl	800706c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	9202      	str	r2, [sp, #8]
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	460a      	mov	r2, r1
 80081ae:	4921      	ldr	r1, [pc, #132]	; (8008234 <vTaskStartScheduler+0xb4>)
 80081b0:	4821      	ldr	r0, [pc, #132]	; (8008238 <vTaskStartScheduler+0xb8>)
 80081b2:	f7ff fe19 	bl	8007de8 <xTaskCreateStatic>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4a20      	ldr	r2, [pc, #128]	; (800823c <vTaskStartScheduler+0xbc>)
 80081ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081bc:	4b1f      	ldr	r3, [pc, #124]	; (800823c <vTaskStartScheduler+0xbc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e001      	b.n	80081ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081d4:	f000 fd00 	bl	8008bd8 <xTimerCreateTimerTask>
 80081d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d116      	bne.n	800820e <vTaskStartScheduler+0x8e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	613b      	str	r3, [r7, #16]
}
 80081f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081f4:	4b12      	ldr	r3, [pc, #72]	; (8008240 <vTaskStartScheduler+0xc0>)
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <vTaskStartScheduler+0xc4>)
 80081fe:	2201      	movs	r2, #1
 8008200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008202:	4b11      	ldr	r3, [pc, #68]	; (8008248 <vTaskStartScheduler+0xc8>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008208:	f001 f876 	bl	80092f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800820c:	e00e      	b.n	800822c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008214:	d10a      	bne.n	800822c <vTaskStartScheduler+0xac>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60fb      	str	r3, [r7, #12]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <vTaskStartScheduler+0xaa>
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	0800a1dc 	.word	0x0800a1dc
 8008238:	08008865 	.word	0x08008865
 800823c:	20000e60 	.word	0x20000e60
 8008240:	20000e5c 	.word	0x20000e5c
 8008244:	20000e48 	.word	0x20000e48
 8008248:	20000e40 	.word	0x20000e40

0800824c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008250:	4b04      	ldr	r3, [pc, #16]	; (8008264 <vTaskSuspendAll+0x18>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	4a03      	ldr	r2, [pc, #12]	; (8008264 <vTaskSuspendAll+0x18>)
 8008258:	6013      	str	r3, [r2, #0]
}
 800825a:	bf00      	nop
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000e64 	.word	0x20000e64

08008268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008276:	4b42      	ldr	r3, [pc, #264]	; (8008380 <xTaskResumeAll+0x118>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xTaskResumeAll+0x2c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	603b      	str	r3, [r7, #0]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008294:	f001 f8a2 	bl	80093dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008298:	4b39      	ldr	r3, [pc, #228]	; (8008380 <xTaskResumeAll+0x118>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	4a38      	ldr	r2, [pc, #224]	; (8008380 <xTaskResumeAll+0x118>)
 80082a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a2:	4b37      	ldr	r3, [pc, #220]	; (8008380 <xTaskResumeAll+0x118>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d162      	bne.n	8008370 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <xTaskResumeAll+0x11c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d05e      	beq.n	8008370 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082b2:	e02f      	b.n	8008314 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80082b4:	4b34      	ldr	r3, [pc, #208]	; (8008388 <xTaskResumeAll+0x120>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3318      	adds	r3, #24
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fe ff8b 	bl	80071dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe ff86 	bl	80071dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d4:	4b2d      	ldr	r3, [pc, #180]	; (800838c <xTaskResumeAll+0x124>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d903      	bls.n	80082e4 <xTaskResumeAll+0x7c>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	4a2a      	ldr	r2, [pc, #168]	; (800838c <xTaskResumeAll+0x124>)
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4a27      	ldr	r2, [pc, #156]	; (8008390 <xTaskResumeAll+0x128>)
 80082f2:	441a      	add	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f7fe ff13 	bl	8007126 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4b23      	ldr	r3, [pc, #140]	; (8008394 <xTaskResumeAll+0x12c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800830e:	4b22      	ldr	r3, [pc, #136]	; (8008398 <xTaskResumeAll+0x130>)
 8008310:	2201      	movs	r2, #1
 8008312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008314:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <xTaskResumeAll+0x120>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1cb      	bne.n	80082b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008322:	f000 fb55 	bl	80089d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008326:	4b1d      	ldr	r3, [pc, #116]	; (800839c <xTaskResumeAll+0x134>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d010      	beq.n	8008354 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008332:	f000 f845 	bl	80083c0 <xTaskIncrementTick>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800833c:	4b16      	ldr	r3, [pc, #88]	; (8008398 <xTaskResumeAll+0x130>)
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3b01      	subs	r3, #1
 8008346:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f1      	bne.n	8008332 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <xTaskResumeAll+0x134>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008354:	4b10      	ldr	r3, [pc, #64]	; (8008398 <xTaskResumeAll+0x130>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <xTaskResumeAll+0x138>)
 8008362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008370:	f001 f864 	bl	800943c <vPortExitCritical>

	return xAlreadyYielded;
 8008374:	68bb      	ldr	r3, [r7, #8]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000e64 	.word	0x20000e64
 8008384:	20000e3c 	.word	0x20000e3c
 8008388:	20000dfc 	.word	0x20000dfc
 800838c:	20000e44 	.word	0x20000e44
 8008390:	2000096c 	.word	0x2000096c
 8008394:	20000968 	.word	0x20000968
 8008398:	20000e50 	.word	0x20000e50
 800839c:	20000e4c 	.word	0x20000e4c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083aa:	4b04      	ldr	r3, [pc, #16]	; (80083bc <xTaskGetTickCount+0x18>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083b0:	687b      	ldr	r3, [r7, #4]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr
 80083bc:	20000e40 	.word	0x20000e40

080083c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ca:	4b51      	ldr	r3, [pc, #324]	; (8008510 <xTaskIncrementTick+0x150>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 808e 	bne.w	80084f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083d4:	4b4f      	ldr	r3, [pc, #316]	; (8008514 <xTaskIncrementTick+0x154>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3301      	adds	r3, #1
 80083da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083dc:	4a4d      	ldr	r2, [pc, #308]	; (8008514 <xTaskIncrementTick+0x154>)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d120      	bne.n	800842a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083e8:	4b4b      	ldr	r3, [pc, #300]	; (8008518 <xTaskIncrementTick+0x158>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <xTaskIncrementTick+0x48>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	603b      	str	r3, [r7, #0]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <xTaskIncrementTick+0x46>
 8008408:	4b43      	ldr	r3, [pc, #268]	; (8008518 <xTaskIncrementTick+0x158>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	4b43      	ldr	r3, [pc, #268]	; (800851c <xTaskIncrementTick+0x15c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a41      	ldr	r2, [pc, #260]	; (8008518 <xTaskIncrementTick+0x158>)
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4a41      	ldr	r2, [pc, #260]	; (800851c <xTaskIncrementTick+0x15c>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	4b40      	ldr	r3, [pc, #256]	; (8008520 <xTaskIncrementTick+0x160>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a3f      	ldr	r2, [pc, #252]	; (8008520 <xTaskIncrementTick+0x160>)
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	f000 fad3 	bl	80089d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800842a:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <xTaskIncrementTick+0x164>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	429a      	cmp	r2, r3
 8008432:	d34e      	bcc.n	80084d2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008434:	4b38      	ldr	r3, [pc, #224]	; (8008518 <xTaskIncrementTick+0x158>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <xTaskIncrementTick+0x82>
 800843e:	2301      	movs	r3, #1
 8008440:	e000      	b.n	8008444 <xTaskIncrementTick+0x84>
 8008442:	2300      	movs	r3, #0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008448:	4b36      	ldr	r3, [pc, #216]	; (8008524 <xTaskIncrementTick+0x164>)
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	601a      	str	r2, [r3, #0]
					break;
 8008450:	e03f      	b.n	80084d2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <xTaskIncrementTick+0x158>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d203      	bcs.n	8008472 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800846a:	4a2e      	ldr	r2, [pc, #184]	; (8008524 <xTaskIncrementTick+0x164>)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6013      	str	r3, [r2, #0]
						break;
 8008470:	e02f      	b.n	80084d2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	3304      	adds	r3, #4
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe feb0 	bl	80071dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	3318      	adds	r3, #24
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fea7 	bl	80071dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4b25      	ldr	r3, [pc, #148]	; (8008528 <xTaskIncrementTick+0x168>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d903      	bls.n	80084a2 <xTaskIncrementTick+0xe2>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	4a22      	ldr	r2, [pc, #136]	; (8008528 <xTaskIncrementTick+0x168>)
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4a1f      	ldr	r2, [pc, #124]	; (800852c <xTaskIncrementTick+0x16c>)
 80084b0:	441a      	add	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fe fe34 	bl	8007126 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <xTaskIncrementTick+0x170>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d3b3      	bcc.n	8008434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d0:	e7b0      	b.n	8008434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084d2:	4b17      	ldr	r3, [pc, #92]	; (8008530 <xTaskIncrementTick+0x170>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4914      	ldr	r1, [pc, #80]	; (800852c <xTaskIncrementTick+0x16c>)
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d907      	bls.n	80084fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	e004      	b.n	80084fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <xTaskIncrementTick+0x174>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	4a0f      	ldr	r2, [pc, #60]	; (8008534 <xTaskIncrementTick+0x174>)
 80084f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <xTaskIncrementTick+0x178>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008502:	2301      	movs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008506:	697b      	ldr	r3, [r7, #20]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000e64 	.word	0x20000e64
 8008514:	20000e40 	.word	0x20000e40
 8008518:	20000df4 	.word	0x20000df4
 800851c:	20000df8 	.word	0x20000df8
 8008520:	20000e54 	.word	0x20000e54
 8008524:	20000e5c 	.word	0x20000e5c
 8008528:	20000e44 	.word	0x20000e44
 800852c:	2000096c 	.word	0x2000096c
 8008530:	20000968 	.word	0x20000968
 8008534:	20000e4c 	.word	0x20000e4c
 8008538:	20000e50 	.word	0x20000e50

0800853c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008542:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <vTaskSwitchContext+0xa4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800854a:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <vTaskSwitchContext+0xa8>)
 800854c:	2201      	movs	r2, #1
 800854e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008550:	e041      	b.n	80085d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008552:	4b24      	ldr	r3, [pc, #144]	; (80085e4 <vTaskSwitchContext+0xa8>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008558:	4b23      	ldr	r3, [pc, #140]	; (80085e8 <vTaskSwitchContext+0xac>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e010      	b.n	8008582 <vTaskSwitchContext+0x46>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <vTaskSwitchContext+0x40>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	607b      	str	r3, [r7, #4]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <vTaskSwitchContext+0x3e>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3b01      	subs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	491a      	ldr	r1, [pc, #104]	; (80085ec <vTaskSwitchContext+0xb0>)
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0e4      	beq.n	8008560 <vTaskSwitchContext+0x24>
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4a12      	ldr	r2, [pc, #72]	; (80085ec <vTaskSwitchContext+0xb0>)
 80085a2:	4413      	add	r3, r2
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	3308      	adds	r3, #8
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d104      	bne.n	80085c6 <vTaskSwitchContext+0x8a>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <vTaskSwitchContext+0xb4>)
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	4a05      	ldr	r2, [pc, #20]	; (80085e8 <vTaskSwitchContext+0xac>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6013      	str	r3, [r2, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	20000e64 	.word	0x20000e64
 80085e4:	20000e50 	.word	0x20000e50
 80085e8:	20000e44 	.word	0x20000e44
 80085ec:	2000096c 	.word	0x2000096c
 80085f0:	20000968 	.word	0x20000968

080085f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <vTaskPlaceOnEventList+0x44>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3318      	adds	r3, #24
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fda2 	bl	800716c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008628:	2101      	movs	r1, #1
 800862a:	6838      	ldr	r0, [r7, #0]
 800862c:	f000 fa80 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
}
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20000968 	.word	0x20000968

0800863c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	617b      	str	r3, [r7, #20]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <vTaskPlaceOnEventListRestricted+0x54>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3318      	adds	r3, #24
 800866a:	4619      	mov	r1, r3
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7fe fd5a 	bl	8007126 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	68b8      	ldr	r0, [r7, #8]
 8008682:	f000 fa55 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
	}
 8008686:	bf00      	nop
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000968 	.word	0x20000968

08008694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	60fb      	str	r3, [r7, #12]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3318      	adds	r3, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fd89 	bl	80071dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ca:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <xTaskRemoveFromEventList+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d11d      	bne.n	800870e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fd80 	bl	80071dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <xTaskRemoveFromEventList+0xb4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d903      	bls.n	80086f0 <xTaskRemoveFromEventList+0x5c>
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <xTaskRemoveFromEventList+0xb4>)
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4a13      	ldr	r2, [pc, #76]	; (800874c <xTaskRemoveFromEventList+0xb8>)
 80086fe:	441a      	add	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fd0d 	bl	8007126 <vListInsertEnd>
 800870c:	e005      	b.n	800871a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3318      	adds	r3, #24
 8008712:	4619      	mov	r1, r3
 8008714:	480e      	ldr	r0, [pc, #56]	; (8008750 <xTaskRemoveFromEventList+0xbc>)
 8008716:	f7fe fd06 	bl	8007126 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <xTaskRemoveFromEventList+0xc0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	429a      	cmp	r2, r3
 8008726:	d905      	bls.n	8008734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800872c:	4b0a      	ldr	r3, [pc, #40]	; (8008758 <xTaskRemoveFromEventList+0xc4>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e001      	b.n	8008738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008738:	697b      	ldr	r3, [r7, #20]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000e64 	.word	0x20000e64
 8008748:	20000e44 	.word	0x20000e44
 800874c:	2000096c 	.word	0x2000096c
 8008750:	20000dfc 	.word	0x20000dfc
 8008754:	20000968 	.word	0x20000968
 8008758:	20000e50 	.word	0x20000e50

0800875c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <vTaskInternalSetTimeOutState+0x24>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <vTaskInternalSetTimeOutState+0x28>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	605a      	str	r2, [r3, #4]
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000e54 	.word	0x20000e54
 8008784:	20000e40 	.word	0x20000e40

08008788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	613b      	str	r3, [r7, #16]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ca:	f000 fe07 	bl	80093dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ce:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <xTaskCheckForTimeOut+0xbc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e6:	d102      	bne.n	80087ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e023      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <xTaskCheckForTimeOut+0xc0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d007      	beq.n	800880a <xTaskCheckForTimeOut+0x82>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	e015      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	429a      	cmp	r2, r3
 8008812:	d20b      	bcs.n	800882c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff9b 	bl	800875c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e004      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f000 fe01 	bl	800943c <vPortExitCritical>

	return xReturn;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20000e40 	.word	0x20000e40
 8008848:	20000e54 	.word	0x20000e54

0800884c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008850:	4b03      	ldr	r3, [pc, #12]	; (8008860 <vTaskMissedYield+0x14>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20000e50 	.word	0x20000e50

08008864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800886c:	f000 f852 	bl	8008914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <prvIdleTask+0x28>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d9f9      	bls.n	800886c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <prvIdleTask+0x2c>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008888:	e7f0      	b.n	800886c <prvIdleTask+0x8>
 800888a:	bf00      	nop
 800888c:	2000096c 	.word	0x2000096c
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	e00c      	b.n	80088ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4a12      	ldr	r2, [pc, #72]	; (80088f4 <prvInitialiseTaskLists+0x60>)
 80088ac:	4413      	add	r3, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc0e 	bl	80070d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3301      	adds	r3, #1
 80088b8:	607b      	str	r3, [r7, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b37      	cmp	r3, #55	; 0x37
 80088be:	d9ef      	bls.n	80088a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088c0:	480d      	ldr	r0, [pc, #52]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088c2:	f7fe fc05 	bl	80070d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088c6:	480d      	ldr	r0, [pc, #52]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088c8:	f7fe fc02 	bl	80070d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <prvInitialiseTaskLists+0x6c>)
 80088ce:	f7fe fbff 	bl	80070d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088d2:	480c      	ldr	r0, [pc, #48]	; (8008904 <prvInitialiseTaskLists+0x70>)
 80088d4:	f7fe fbfc 	bl	80070d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088d8:	480b      	ldr	r0, [pc, #44]	; (8008908 <prvInitialiseTaskLists+0x74>)
 80088da:	f7fe fbf9 	bl	80070d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088de:	4b0b      	ldr	r3, [pc, #44]	; (800890c <prvInitialiseTaskLists+0x78>)
 80088e0:	4a05      	ldr	r2, [pc, #20]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvInitialiseTaskLists+0x7c>)
 80088e6:	4a05      	ldr	r2, [pc, #20]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088e8:	601a      	str	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	2000096c 	.word	0x2000096c
 80088f8:	20000dcc 	.word	0x20000dcc
 80088fc:	20000de0 	.word	0x20000de0
 8008900:	20000dfc 	.word	0x20000dfc
 8008904:	20000e10 	.word	0x20000e10
 8008908:	20000e28 	.word	0x20000e28
 800890c:	20000df4 	.word	0x20000df4
 8008910:	20000df8 	.word	0x20000df8

08008914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800891a:	e019      	b.n	8008950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800891c:	f000 fd5e 	bl	80093dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008920:	4b10      	ldr	r3, [pc, #64]	; (8008964 <prvCheckTasksWaitingTermination+0x50>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fc55 	bl	80071dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008932:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3b01      	subs	r3, #1
 8008938:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 800893a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3b01      	subs	r3, #1
 8008942:	4a0a      	ldr	r2, [pc, #40]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008946:	f000 fd79 	bl	800943c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f810 	bl	8008970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e1      	bne.n	800891c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000e10 	.word	0x20000e10
 8008968:	20000e3c 	.word	0x20000e3c
 800896c:	20000e24 	.word	0x20000e24

08008970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800897e:	2b00      	cmp	r3, #0
 8008980:	d108      	bne.n	8008994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	4618      	mov	r0, r3
 8008988:	f000 feec 	bl	8009764 <vPortFree>
				vPortFree( pxTCB );
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fee9 	bl	8009764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008992:	e018      	b.n	80089c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800899a:	2b01      	cmp	r3, #1
 800899c:	d103      	bne.n	80089a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fee0 	bl	8009764 <vPortFree>
	}
 80089a4:	e00f      	b.n	80089c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d00a      	beq.n	80089c6 <prvDeleteTCB+0x56>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <prvDeleteTCB+0x54>
	}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d6:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <prvResetNextTaskUnblockTime+0x40>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <prvResetNextTaskUnblockTime+0x14>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <prvResetNextTaskUnblockTime+0x16>
 80089e4:	2300      	movs	r3, #0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvResetNextTaskUnblockTime+0x44>)
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295
 80089f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f2:	e008      	b.n	8008a06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089f4:	4b06      	ldr	r3, [pc, #24]	; (8008a10 <prvResetNextTaskUnblockTime+0x40>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	4a04      	ldr	r2, [pc, #16]	; (8008a14 <prvResetNextTaskUnblockTime+0x44>)
 8008a04:	6013      	str	r3, [r2, #0]
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	20000df4 	.word	0x20000df4
 8008a14:	20000e5c 	.word	0x20000e5c

08008a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <xTaskGetSchedulerState+0x34>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a26:	2301      	movs	r3, #1
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	e008      	b.n	8008a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2c:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <xTaskGetSchedulerState+0x38>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a34:	2302      	movs	r3, #2
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	e001      	b.n	8008a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a3e:	687b      	ldr	r3, [r7, #4]
	}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000e48 	.word	0x20000e48
 8008a50:	20000e64 	.word	0x20000e64

08008a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d056      	beq.n	8008b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <xTaskPriorityDisinherit+0xd0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d00a      	beq.n	8008a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60bb      	str	r3, [r7, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	1e5a      	subs	r2, r3, #1
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d02c      	beq.n	8008b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d128      	bne.n	8008b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fb86 	bl	80071dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <xTaskPriorityDisinherit+0xd4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <xTaskPriorityDisinherit+0xa4>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <xTaskPriorityDisinherit+0xd4>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <xTaskPriorityDisinherit+0xd8>)
 8008b06:	441a      	add	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe fb09 	bl	8007126 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b18:	697b      	ldr	r3, [r7, #20]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000968 	.word	0x20000968
 8008b28:	20000e44 	.word	0x20000e44
 8008b2c:	2000096c 	.word	0x2000096c

08008b30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3a:	4b21      	ldr	r3, [pc, #132]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b40:	4b20      	ldr	r3, [pc, #128]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fb48 	bl	80071dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d10a      	bne.n	8008b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d007      	beq.n	8008b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5a:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4619      	mov	r1, r3
 8008b62:	4819      	ldr	r0, [pc, #100]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b64:	f7fe fadf 	bl	8007126 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b68:	e026      	b.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b72:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d209      	bcs.n	8008b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe faec 	bl	800716c <vListInsert>
}
 8008b94:	e010      	b.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7fe fae2 	bl	800716c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d202      	bcs.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bb2:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6013      	str	r3, [r2, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000e40 	.word	0x20000e40
 8008bc4:	20000968 	.word	0x20000968
 8008bc8:	20000e28 	.word	0x20000e28
 8008bcc:	20000df8 	.word	0x20000df8
 8008bd0:	20000df4 	.word	0x20000df4
 8008bd4:	20000e5c 	.word	0x20000e5c

08008bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08a      	sub	sp, #40	; 0x28
 8008bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008be2:	f000 facb 	bl	800917c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008be6:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <xTimerCreateTimerTask+0x80>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d021      	beq.n	8008c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bf6:	1d3a      	adds	r2, r7, #4
 8008bf8:	f107 0108 	add.w	r1, r7, #8
 8008bfc:	f107 030c 	add.w	r3, r7, #12
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fa4b 	bl	800709c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	2302      	movs	r3, #2
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	460a      	mov	r2, r1
 8008c18:	4910      	ldr	r1, [pc, #64]	; (8008c5c <xTimerCreateTimerTask+0x84>)
 8008c1a:	4811      	ldr	r0, [pc, #68]	; (8008c60 <xTimerCreateTimerTask+0x88>)
 8008c1c:	f7ff f8e4 	bl	8007de8 <xTaskCreateStatic>
 8008c20:	4603      	mov	r3, r0
 8008c22:	4a10      	ldr	r2, [pc, #64]	; (8008c64 <xTimerCreateTimerTask+0x8c>)
 8008c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c26:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <xTimerCreateTimerTask+0x8c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	613b      	str	r3, [r7, #16]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c4e:	697b      	ldr	r3, [r7, #20]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000e98 	.word	0x20000e98
 8008c5c:	0800a1e4 	.word	0x0800a1e4
 8008c60:	08008d85 	.word	0x08008d85
 8008c64:	20000e9c 	.word	0x20000e9c

08008c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	623b      	str	r3, [r7, #32]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d02a      	beq.n	8008cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	dc18      	bgt.n	8008ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cb0:	f7ff feb2 	bl	8008a18 <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d109      	bne.n	8008cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f107 0110 	add.w	r1, r7, #16
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc6:	f7fe fbf3 	bl	80074b0 <xQueueGenericSend>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
 8008ccc:	e012      	b.n	8008cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f107 0110 	add.w	r1, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f7fe fbe9 	bl	80074b0 <xQueueGenericSend>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce0:	e008      	b.n	8008cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	2300      	movs	r3, #0
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	f7fe fcdd 	bl	80076ac <xQueueGenericSendFromISR>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000e98 	.word	0x20000e98

08008d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d0e:	4b1c      	ldr	r3, [pc, #112]	; (8008d80 <prvProcessExpiredTimer+0x7c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fa5d 	bl	80071dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d122      	bne.n	8008d70 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	18d1      	adds	r1, r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	6978      	ldr	r0, [r7, #20]
 8008d38:	f000 f8c8 	bl	8008ecc <prvInsertTimerInActiveList>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d016      	beq.n	8008d70 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d42:	2300      	movs	r3, #0
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	2300      	movs	r3, #0
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	6978      	ldr	r0, [r7, #20]
 8008d4e:	f7ff ff8b 	bl	8008c68 <xTimerGenericCommand>
 8008d52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	60fb      	str	r3, [r7, #12]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	6978      	ldr	r0, [r7, #20]
 8008d76:	4798      	blx	r3
}
 8008d78:	bf00      	nop
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20000e90 	.word	0x20000e90

08008d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 f857 	bl	8008e44 <prvGetNextExpireTime>
 8008d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f803 	bl	8008da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008da2:	f000 f8d5 	bl	8008f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008da6:	e7f1      	b.n	8008d8c <prvTimerTask+0x8>

08008da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008db2:	f7ff fa4b 	bl	800824c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f866 	bl	8008e8c <prvSampleTimeNow>
 8008dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d130      	bne.n	8008e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <prvProcessTimerOrBlockTask+0x3c>
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d806      	bhi.n	8008de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dd6:	f7ff fa47 	bl	8008268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ff91 	bl	8008d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008de2:	e024      	b.n	8008e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d008      	beq.n	8008dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <prvProcessTimerOrBlockTask+0x90>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008dfc:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <prvProcessTimerOrBlockTask+0x94>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f7fe ffb9 	bl	8007d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e0e:	f7ff fa2b 	bl	8008268 <xTaskResumeAll>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e18:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <prvProcessTimerOrBlockTask+0x98>)
 8008e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	f3bf 8f6f 	isb	sy
}
 8008e28:	e001      	b.n	8008e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e2a:	f7ff fa1d 	bl	8008268 <xTaskResumeAll>
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000e94 	.word	0x20000e94
 8008e3c:	20000e98 	.word	0x20000e98
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <prvGetNextExpireTime+0x44>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	bf0c      	ite	eq
 8008e56:	2301      	moveq	r3, #1
 8008e58:	2300      	movne	r3, #0
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e6a:	4b07      	ldr	r3, [pc, #28]	; (8008e88 <prvGetNextExpireTime+0x44>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e001      	b.n	8008e7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bc80      	pop	{r7}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000e90 	.word	0x20000e90

08008e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e94:	f7ff fa86 	bl	80083a4 <xTaskGetTickCount>
 8008e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <prvSampleTimeNow+0x3c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d205      	bcs.n	8008eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ea4:	f000 f908 	bl	80090b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e002      	b.n	8008eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008eb6:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <prvSampleTimeNow+0x3c>)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20000ea0 	.word	0x20000ea0

08008ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d812      	bhi.n	8008f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	1ad2      	subs	r2, r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f00:	2301      	movs	r3, #1
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e01b      	b.n	8008f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f06:	4b10      	ldr	r3, [pc, #64]	; (8008f48 <prvInsertTimerInActiveList+0x7c>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4610      	mov	r0, r2
 8008f12:	f7fe f92b 	bl	800716c <vListInsert>
 8008f16:	e012      	b.n	8008f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d206      	bcs.n	8008f2e <prvInsertTimerInActiveList+0x62>
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d302      	bcc.n	8008f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	e007      	b.n	8008f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <prvInsertTimerInActiveList+0x80>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe f917 	bl	800716c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f3e:	697b      	ldr	r3, [r7, #20]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000e94 	.word	0x20000e94
 8008f4c:	20000e90 	.word	0x20000e90

08008f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08e      	sub	sp, #56	; 0x38
 8008f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f56:	e09d      	b.n	8009094 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da18      	bge.n	8008f90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f5e:	1d3b      	adds	r3, r7, #4
 8008f60:	3304      	adds	r3, #4
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61fb      	str	r3, [r7, #28]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f86:	6850      	ldr	r0, [r2, #4]
 8008f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8a:	6892      	ldr	r2, [r2, #8]
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	db7d      	blt.n	8009092 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe f918 	bl	80071dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fac:	463b      	mov	r3, r7
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff ff6c 	bl	8008e8c <prvSampleTimeNow>
 8008fb4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d86b      	bhi.n	8009094 <prvProcessReceivedCommands+0x144>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <prvProcessReceivedCommands+0x74>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08008fed 	.word	0x08008fed
 8008fd0:	08009095 	.word	0x08009095
 8008fd4:	08009049 	.word	0x08009049
 8008fd8:	08009081 	.word	0x08009081
 8008fdc:	08008fed 	.word	0x08008fed
 8008fe0:	08008fed 	.word	0x08008fed
 8008fe4:	08009095 	.word	0x08009095
 8008fe8:	08009049 	.word	0x08009049
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	18d1      	adds	r1, r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ffa:	f7ff ff67 	bl	8008ecc <prvInsertTimerInActiveList>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d047      	beq.n	8009094 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d13f      	bne.n	8009094 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	441a      	add	r2, r3
 800901c:	2300      	movs	r3, #0
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	2300      	movs	r3, #0
 8009022:	2100      	movs	r1, #0
 8009024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009026:	f7ff fe1f 	bl	8008c68 <xTimerGenericCommand>
 800902a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d130      	bne.n	8009094 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	61bb      	str	r3, [r7, #24]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	617b      	str	r3, [r7, #20]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	18d1      	adds	r1, r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907a:	f7ff ff27 	bl	8008ecc <prvInsertTimerInActiveList>
					break;
 800907e:	e009      	b.n	8009094 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800908a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908c:	f000 fb6a 	bl	8009764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009090:	e000      	b.n	8009094 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009092:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <prvProcessReceivedCommands+0x164>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	1d39      	adds	r1, r7, #4
 800909a:	2200      	movs	r2, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fb9d 	bl	80077dc <xQueueReceive>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f47f af57 	bne.w	8008f58 <prvProcessReceivedCommands+0x8>
	}
}
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	3730      	adds	r7, #48	; 0x30
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000e98 	.word	0x20000e98

080090b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090be:	e045      	b.n	800914c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090c0:	4b2c      	ldr	r3, [pc, #176]	; (8009174 <prvSwitchTimerLists+0xbc>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090ca:	4b2a      	ldr	r3, [pc, #168]	; (8009174 <prvSwitchTimerLists+0xbc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe f87f 	bl	80071dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d12e      	bne.n	800914c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4413      	add	r3, r2
 80090f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d90e      	bls.n	800911e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800910c:	4b19      	ldr	r3, [pc, #100]	; (8009174 <prvSwitchTimerLists+0xbc>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe f828 	bl	800716c <vListInsert>
 800911c:	e016      	b.n	800914c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800911e:	2300      	movs	r3, #0
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	2300      	movs	r3, #0
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fd9d 	bl	8008c68 <xTimerGenericCommand>
 800912e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <prvSwitchTimerLists+0x94>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	603b      	str	r3, [r7, #0]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvSwitchTimerLists+0xbc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1b4      	bne.n	80090c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <prvSwitchTimerLists+0xbc>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <prvSwitchTimerLists+0xc0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a04      	ldr	r2, [pc, #16]	; (8009174 <prvSwitchTimerLists+0xbc>)
 8009162:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009164:	4a04      	ldr	r2, [pc, #16]	; (8009178 <prvSwitchTimerLists+0xc0>)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6013      	str	r3, [r2, #0]
}
 800916a:	bf00      	nop
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000e90 	.word	0x20000e90
 8009178:	20000e94 	.word	0x20000e94

0800917c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009182:	f000 f92b 	bl	80093dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009186:	4b15      	ldr	r3, [pc, #84]	; (80091dc <prvCheckForValidListAndQueue+0x60>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d120      	bne.n	80091d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800918e:	4814      	ldr	r0, [pc, #80]	; (80091e0 <prvCheckForValidListAndQueue+0x64>)
 8009190:	f7fd ff9e 	bl	80070d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009194:	4813      	ldr	r0, [pc, #76]	; (80091e4 <prvCheckForValidListAndQueue+0x68>)
 8009196:	f7fd ff9b 	bl	80070d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800919a:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <prvCheckForValidListAndQueue+0x6c>)
 800919c:	4a10      	ldr	r2, [pc, #64]	; (80091e0 <prvCheckForValidListAndQueue+0x64>)
 800919e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091a0:	4b12      	ldr	r3, [pc, #72]	; (80091ec <prvCheckForValidListAndQueue+0x70>)
 80091a2:	4a10      	ldr	r2, [pc, #64]	; (80091e4 <prvCheckForValidListAndQueue+0x68>)
 80091a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091a6:	2300      	movs	r3, #0
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <prvCheckForValidListAndQueue+0x74>)
 80091ac:	4a11      	ldr	r2, [pc, #68]	; (80091f4 <prvCheckForValidListAndQueue+0x78>)
 80091ae:	2110      	movs	r1, #16
 80091b0:	200a      	movs	r0, #10
 80091b2:	f7fe f8a5 	bl	8007300 <xQueueGenericCreateStatic>
 80091b6:	4603      	mov	r3, r0
 80091b8:	4a08      	ldr	r2, [pc, #32]	; (80091dc <prvCheckForValidListAndQueue+0x60>)
 80091ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <prvCheckForValidListAndQueue+0x60>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <prvCheckForValidListAndQueue+0x60>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	490b      	ldr	r1, [pc, #44]	; (80091f8 <prvCheckForValidListAndQueue+0x7c>)
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fdb0 	bl	8007d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091d0:	f000 f934 	bl	800943c <vPortExitCritical>
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	20000e98 	.word	0x20000e98
 80091e0:	20000e68 	.word	0x20000e68
 80091e4:	20000e7c 	.word	0x20000e7c
 80091e8:	20000e90 	.word	0x20000e90
 80091ec:	20000e94 	.word	0x20000e94
 80091f0:	20000f44 	.word	0x20000f44
 80091f4:	20000ea4 	.word	0x20000ea4
 80091f8:	0800a1ec 	.word	0x0800a1ec

080091fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3b04      	subs	r3, #4
 800920c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3b04      	subs	r3, #4
 800921a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f023 0201 	bic.w	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3b04      	subs	r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800922c:	4a08      	ldr	r2, [pc, #32]	; (8009250 <pxPortInitialiseStack+0x54>)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3b14      	subs	r3, #20
 8009236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3b20      	subs	r3, #32
 8009242:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009244:	68fb      	ldr	r3, [r7, #12]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr
 8009250:	08009255 	.word	0x08009255

08009254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800925a:	2300      	movs	r3, #0
 800925c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <prvTaskExitError+0x54>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009266:	d00a      	beq.n	800927e <prvTaskExitError+0x2a>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60fb      	str	r3, [r7, #12]
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <prvTaskExitError+0x28>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60bb      	str	r3, [r7, #8]
}
 8009290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009292:	bf00      	nop
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0fc      	beq.n	8009294 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000108 	.word	0x20000108
 80092ac:	00000000 	.word	0x00000000

080092b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <pxCurrentTCBConst2>)
 80092b2:	6819      	ldr	r1, [r3, #0]
 80092b4:	6808      	ldr	r0, [r1, #0]
 80092b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092ba:	f380 8809 	msr	PSP, r0
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8811 	msr	BASEPRI, r0
 80092ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80092ce:	4770      	bx	lr

080092d0 <pxCurrentTCBConst2>:
 80092d0:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80092d8:	4806      	ldr	r0, [pc, #24]	; (80092f4 <prvPortStartFirstTask+0x1c>)
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f380 8808 	msr	MSP, r0
 80092e2:	b662      	cpsie	i
 80092e4:	b661      	cpsie	f
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	df00      	svc	0
 80092f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092f2:	bf00      	nop
 80092f4:	e000ed08 	.word	0xe000ed08

080092f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092fe:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <xPortStartScheduler+0xd0>)
 8009300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	22ff      	movs	r2, #255	; 0xff
 800930e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <xPortStartScheduler+0xd4>)
 8009324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009326:	4b2a      	ldr	r3, [pc, #168]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009328:	2207      	movs	r2, #7
 800932a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932c:	e009      	b.n	8009342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800932e:	4b28      	ldr	r3, [pc, #160]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3b01      	subs	r3, #1
 8009334:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934a:	2b80      	cmp	r3, #128	; 0x80
 800934c:	d0ef      	beq.n	800932e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800934e:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f1c3 0307 	rsb	r3, r3, #7
 8009356:	2b04      	cmp	r3, #4
 8009358:	d00a      	beq.n	8009370 <xPortStartScheduler+0x78>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60bb      	str	r3, [r7, #8]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009370:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	021b      	lsls	r3, r3, #8
 8009376:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800937a:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <xPortStartScheduler+0xd8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009382:	4a13      	ldr	r2, [pc, #76]	; (80093d0 <xPortStartScheduler+0xd8>)
 8009384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <xPortStartScheduler+0xdc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <xPortStartScheduler+0xdc>)
 8009394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <xPortStartScheduler+0xdc>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a0d      	ldr	r2, [pc, #52]	; (80093d4 <xPortStartScheduler+0xdc>)
 80093a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093a6:	f000 f8b9 	bl	800951c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093aa:	4b0b      	ldr	r3, [pc, #44]	; (80093d8 <xPortStartScheduler+0xe0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093b0:	f7ff ff92 	bl	80092d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093b4:	f7ff f8c2 	bl	800853c <vTaskSwitchContext>
	prvTaskExitError();
 80093b8:	f7ff ff4c 	bl	8009254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	e000e400 	.word	0xe000e400
 80093cc:	20000f94 	.word	0x20000f94
 80093d0:	20000f98 	.word	0x20000f98
 80093d4:	e000ed20 	.word	0xe000ed20
 80093d8:	20000108 	.word	0x20000108

080093dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	607b      	str	r3, [r7, #4]
}
 80093f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093f6:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <vPortEnterCritical+0x58>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a0d      	ldr	r2, [pc, #52]	; (8009434 <vPortEnterCritical+0x58>)
 80093fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <vPortEnterCritical+0x58>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d10f      	bne.n	8009428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <vPortEnterCritical+0x5c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <vPortEnterCritical+0x4c>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <vPortEnterCritical+0x4a>
	}
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	bc80      	pop	{r7}
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000108 	.word	0x20000108
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009442:	4b11      	ldr	r3, [pc, #68]	; (8009488 <vPortExitCritical+0x4c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <vPortExitCritical+0x24>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009460:	4b09      	ldr	r3, [pc, #36]	; (8009488 <vPortExitCritical+0x4c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3b01      	subs	r3, #1
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <vPortExitCritical+0x4c>)
 8009468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <vPortExitCritical+0x4c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <vPortExitCritical+0x42>
 8009472:	2300      	movs	r3, #0
 8009474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	f383 8811 	msr	BASEPRI, r3
}
 800947c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	20000108 	.word	0x20000108
 800948c:	00000000 	.word	0x00000000

08009490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009490:	f3ef 8009 	mrs	r0, PSP
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4b0d      	ldr	r3, [pc, #52]	; (80094d0 <pxCurrentTCBConst>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094a0:	6010      	str	r0, [r2, #0]
 80094a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80094a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094aa:	f380 8811 	msr	BASEPRI, r0
 80094ae:	f7ff f845 	bl	800853c <vTaskSwitchContext>
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	6808      	ldr	r0, [r1, #0]
 80094c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094c6:	f380 8809 	msr	PSP, r0
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	4770      	bx	lr

080094d0 <pxCurrentTCBConst>:
 80094d0:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	607b      	str	r3, [r7, #4]
}
 80094f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094f2:	f7fe ff65 	bl	80083c0 <xTaskIncrementTick>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094fc:	4b06      	ldr	r3, [pc, #24]	; (8009518 <xPortSysTickHandler+0x40>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	2300      	movs	r3, #0
 8009506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f383 8811 	msr	BASEPRI, r3
}
 800950e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009520:	4b0a      	ldr	r3, [pc, #40]	; (800954c <vPortSetupTimerInterrupt+0x30>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009526:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <vPortSetupTimerInterrupt+0x34>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <vPortSetupTimerInterrupt+0x38>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a09      	ldr	r2, [pc, #36]	; (8009558 <vPortSetupTimerInterrupt+0x3c>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	099b      	lsrs	r3, r3, #6
 8009538:	4a08      	ldr	r2, [pc, #32]	; (800955c <vPortSetupTimerInterrupt+0x40>)
 800953a:	3b01      	subs	r3, #1
 800953c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <vPortSetupTimerInterrupt+0x30>)
 8009540:	2207      	movs	r2, #7
 8009542:	601a      	str	r2, [r3, #0]
}
 8009544:	bf00      	nop
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr
 800954c:	e000e010 	.word	0xe000e010
 8009550:	e000e018 	.word	0xe000e018
 8009554:	20000000 	.word	0x20000000
 8009558:	10624dd3 	.word	0x10624dd3
 800955c:	e000e014 	.word	0xe000e014

08009560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009566:	f3ef 8305 	mrs	r3, IPSR
 800956a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b0f      	cmp	r3, #15
 8009570:	d914      	bls.n	800959c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009572:	4a16      	ldr	r2, [pc, #88]	; (80095cc <vPortValidateInterruptPriority+0x6c>)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800957c:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <vPortValidateInterruptPriority+0x70>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	7afa      	ldrb	r2, [r7, #11]
 8009582:	429a      	cmp	r2, r3
 8009584:	d20a      	bcs.n	800959c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	607b      	str	r3, [r7, #4]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <vPortValidateInterruptPriority+0x74>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095a4:	4b0c      	ldr	r3, [pc, #48]	; (80095d8 <vPortValidateInterruptPriority+0x78>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d90a      	bls.n	80095c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	603b      	str	r3, [r7, #0]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <vPortValidateInterruptPriority+0x60>
	}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	e000e3f0 	.word	0xe000e3f0
 80095d0:	20000f94 	.word	0x20000f94
 80095d4:	e000ed0c 	.word	0xe000ed0c
 80095d8:	20000f98 	.word	0x20000f98

080095dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095e4:	2300      	movs	r3, #0
 80095e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095e8:	f7fe fe30 	bl	800824c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095ec:	4b58      	ldr	r3, [pc, #352]	; (8009750 <pvPortMalloc+0x174>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095f4:	f000 f910 	bl	8009818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095f8:	4b56      	ldr	r3, [pc, #344]	; (8009754 <pvPortMalloc+0x178>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4013      	ands	r3, r2
 8009600:	2b00      	cmp	r3, #0
 8009602:	f040 808e 	bne.w	8009722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01d      	beq.n	8009648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800960c:	2208      	movs	r2, #8
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4413      	add	r3, r2
 8009612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d014      	beq.n	8009648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f023 0307 	bic.w	r3, r3, #7
 8009624:	3308      	adds	r3, #8
 8009626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00a      	beq.n	8009648 <pvPortMalloc+0x6c>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	617b      	str	r3, [r7, #20]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d069      	beq.n	8009722 <pvPortMalloc+0x146>
 800964e:	4b42      	ldr	r3, [pc, #264]	; (8009758 <pvPortMalloc+0x17c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	429a      	cmp	r2, r3
 8009656:	d864      	bhi.n	8009722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009658:	4b40      	ldr	r3, [pc, #256]	; (800975c <pvPortMalloc+0x180>)
 800965a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800965c:	4b3f      	ldr	r3, [pc, #252]	; (800975c <pvPortMalloc+0x180>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009662:	e004      	b.n	800966e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d903      	bls.n	8009680 <pvPortMalloc+0xa4>
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1f1      	bne.n	8009664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009680:	4b33      	ldr	r3, [pc, #204]	; (8009750 <pvPortMalloc+0x174>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	429a      	cmp	r2, r3
 8009688:	d04b      	beq.n	8009722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2208      	movs	r2, #8
 8009690:	4413      	add	r3, r2
 8009692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	2308      	movs	r3, #8
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d91f      	bls.n	80096ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <pvPortMalloc+0xf8>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	613b      	str	r3, [r7, #16]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	1ad2      	subs	r2, r2, r3
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e6:	69b8      	ldr	r0, [r7, #24]
 80096e8:	f000 f8f8 	bl	80098dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096ec:	4b1a      	ldr	r3, [pc, #104]	; (8009758 <pvPortMalloc+0x17c>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	4a18      	ldr	r2, [pc, #96]	; (8009758 <pvPortMalloc+0x17c>)
 80096f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096fa:	4b17      	ldr	r3, [pc, #92]	; (8009758 <pvPortMalloc+0x17c>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <pvPortMalloc+0x184>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d203      	bcs.n	800970e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009706:	4b14      	ldr	r3, [pc, #80]	; (8009758 <pvPortMalloc+0x17c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a15      	ldr	r2, [pc, #84]	; (8009760 <pvPortMalloc+0x184>)
 800970c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <pvPortMalloc+0x178>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	431a      	orrs	r2, r3
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009722:	f7fe fda1 	bl	8008268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00a      	beq.n	8009746 <pvPortMalloc+0x16a>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <pvPortMalloc+0x168>
	return pvReturn;
 8009746:	69fb      	ldr	r3, [r7, #28]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3728      	adds	r7, #40	; 0x28
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20001ba4 	.word	0x20001ba4
 8009754:	20001bb0 	.word	0x20001bb0
 8009758:	20001ba8 	.word	0x20001ba8
 800975c:	20001b9c 	.word	0x20001b9c
 8009760:	20001bac 	.word	0x20001bac

08009764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d048      	beq.n	8009808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009776:	2308      	movs	r3, #8
 8009778:	425b      	negs	r3, r3
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	4b21      	ldr	r3, [pc, #132]	; (8009810 <vPortFree+0xac>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4013      	ands	r3, r2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <vPortFree+0x44>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	60fb      	str	r3, [r7, #12]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <vPortFree+0x62>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60bb      	str	r3, [r7, #8]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <vPortFree+0xac>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d019      	beq.n	8009808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d115      	bne.n	8009808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <vPortFree+0xac>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	43db      	mvns	r3, r3
 80097e6:	401a      	ands	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097ec:	f7fe fd2e 	bl	800824c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <vPortFree+0xb0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4413      	add	r3, r2
 80097fa:	4a06      	ldr	r2, [pc, #24]	; (8009814 <vPortFree+0xb0>)
 80097fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097fe:	6938      	ldr	r0, [r7, #16]
 8009800:	f000 f86c 	bl	80098dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009804:	f7fe fd30 	bl	8008268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009808:	bf00      	nop
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20001bb0 	.word	0x20001bb0
 8009814:	20001ba8 	.word	0x20001ba8

08009818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800981e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009824:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <prvHeapInit+0xac>)
 8009826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00c      	beq.n	800984c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3307      	adds	r3, #7
 8009836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0307 	bic.w	r3, r3, #7
 800983e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	4a1f      	ldr	r2, [pc, #124]	; (80098c4 <prvHeapInit+0xac>)
 8009848:	4413      	add	r3, r2
 800984a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009850:	4a1d      	ldr	r2, [pc, #116]	; (80098c8 <prvHeapInit+0xb0>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009856:	4b1c      	ldr	r3, [pc, #112]	; (80098c8 <prvHeapInit+0xb0>)
 8009858:	2200      	movs	r2, #0
 800985a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009864:	2208      	movs	r2, #8
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4a15      	ldr	r2, [pc, #84]	; (80098cc <prvHeapInit+0xb4>)
 8009878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800987a:	4b14      	ldr	r3, [pc, #80]	; (80098cc <prvHeapInit+0xb4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2200      	movs	r2, #0
 8009880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <prvHeapInit+0xb4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	1ad2      	subs	r2, r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009898:	4b0c      	ldr	r3, [pc, #48]	; (80098cc <prvHeapInit+0xb4>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <prvHeapInit+0xb8>)
 80098a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	4a09      	ldr	r2, [pc, #36]	; (80098d4 <prvHeapInit+0xbc>)
 80098ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <prvHeapInit+0xc0>)
 80098b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098b6:	601a      	str	r2, [r3, #0]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000f9c 	.word	0x20000f9c
 80098c8:	20001b9c 	.word	0x20001b9c
 80098cc:	20001ba4 	.word	0x20001ba4
 80098d0:	20001bac 	.word	0x20001bac
 80098d4:	20001ba8 	.word	0x20001ba8
 80098d8:	20001bb0 	.word	0x20001bb0

080098dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098e4:	4b27      	ldr	r3, [pc, #156]	; (8009984 <prvInsertBlockIntoFreeList+0xa8>)
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e002      	b.n	80098f0 <prvInsertBlockIntoFreeList+0x14>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d8f7      	bhi.n	80098ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	4413      	add	r3, r2
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d108      	bne.n	800991e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	441a      	add	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	441a      	add	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d118      	bne.n	8009964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b14      	ldr	r3, [pc, #80]	; (8009988 <prvInsertBlockIntoFreeList+0xac>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d00d      	beq.n	800995a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	441a      	add	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	e008      	b.n	800996c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800995a:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <prvInsertBlockIntoFreeList+0xac>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	e003      	b.n	800996c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d002      	beq.n	800997a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr
 8009984:	20001b9c 	.word	0x20001b9c
 8009988:	20001ba4 	.word	0x20001ba4

0800998c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009990:	2200      	movs	r2, #0
 8009992:	490e      	ldr	r1, [pc, #56]	; (80099cc <MX_USB_DEVICE_Init+0x40>)
 8009994:	480e      	ldr	r0, [pc, #56]	; (80099d0 <MX_USB_DEVICE_Init+0x44>)
 8009996:	f7fc f811 	bl	80059bc <USBD_Init>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099a0:	f7f6 fd0e 	bl	80003c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80099a4:	490b      	ldr	r1, [pc, #44]	; (80099d4 <MX_USB_DEVICE_Init+0x48>)
 80099a6:	480a      	ldr	r0, [pc, #40]	; (80099d0 <MX_USB_DEVICE_Init+0x44>)
 80099a8:	f7fc f833 	bl	8005a12 <USBD_RegisterClass>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099b2:	f7f6 fd05 	bl	80003c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099b6:	4806      	ldr	r0, [pc, #24]	; (80099d0 <MX_USB_DEVICE_Init+0x44>)
 80099b8:	f7fc f844 	bl	8005a44 <USBD_Start>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80099c2:	f7f6 fcfd 	bl	80003c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099c6:	bf00      	nop
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000010c 	.word	0x2000010c
 80099d0:	20001c20 	.word	0x20001c20
 80099d4:	2000000c 	.word	0x2000000c

080099d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2212      	movs	r2, #18
 80099e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20000128 	.word	0x20000128

080099fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bc80      	pop	{r7}
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	2000013c 	.word	0x2000013c

08009a20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4907      	ldr	r1, [pc, #28]	; (8009a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a36:	4808      	ldr	r0, [pc, #32]	; (8009a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a38:	f7fc ff7c 	bl	8006934 <USBD_GetString>
 8009a3c:	e004      	b.n	8009a48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4904      	ldr	r1, [pc, #16]	; (8009a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a42:	4805      	ldr	r0, [pc, #20]	; (8009a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a44:	f7fc ff76 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a48:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20001ee4 	.word	0x20001ee4
 8009a58:	0800a1f4 	.word	0x0800a1f4

08009a5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	6039      	str	r1, [r7, #0]
 8009a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	4904      	ldr	r1, [pc, #16]	; (8009a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a6c:	4804      	ldr	r0, [pc, #16]	; (8009a80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a6e:	f7fc ff61 	bl	8006934 <USBD_GetString>
  return USBD_StrDesc;
 8009a72:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20001ee4 	.word	0x20001ee4
 8009a80:	0800a200 	.word	0x0800a200

08009a84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6039      	str	r1, [r7, #0]
 8009a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	221a      	movs	r2, #26
 8009a94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a96:	f000 f843 	bl	8009b20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a9a:	4b02      	ldr	r3, [pc, #8]	; (8009aa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20000140 	.word	0x20000140

08009aa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	6039      	str	r1, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	4907      	ldr	r1, [pc, #28]	; (8009adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009abe:	4808      	ldr	r0, [pc, #32]	; (8009ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ac0:	f7fc ff38 	bl	8006934 <USBD_GetString>
 8009ac4:	e004      	b.n	8009ad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4904      	ldr	r1, [pc, #16]	; (8009adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aca:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009acc:	f7fc ff32 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20001ee4 	.word	0x20001ee4
 8009ae0:	0800a210 	.word	0x0800a210

08009ae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	6039      	str	r1, [r7, #0]
 8009aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d105      	bne.n	8009b02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4907      	ldr	r1, [pc, #28]	; (8009b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009afa:	4808      	ldr	r0, [pc, #32]	; (8009b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009afc:	f7fc ff1a 	bl	8006934 <USBD_GetString>
 8009b00:	e004      	b.n	8009b0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	4904      	ldr	r1, [pc, #16]	; (8009b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b06:	4805      	ldr	r0, [pc, #20]	; (8009b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b08:	f7fc ff14 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20001ee4 	.word	0x20001ee4
 8009b1c:	0800a21c 	.word	0x0800a21c

08009b20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <Get_SerialNum+0x44>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <Get_SerialNum+0x48>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b32:	4b0e      	ldr	r3, [pc, #56]	; (8009b6c <Get_SerialNum+0x4c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b46:	2208      	movs	r2, #8
 8009b48:	4909      	ldr	r1, [pc, #36]	; (8009b70 <Get_SerialNum+0x50>)
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 f814 	bl	8009b78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b50:	2204      	movs	r2, #4
 8009b52:	4908      	ldr	r1, [pc, #32]	; (8009b74 <Get_SerialNum+0x54>)
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	f000 f80f 	bl	8009b78 <IntToUnicode>
  }
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	1ffff7e8 	.word	0x1ffff7e8
 8009b68:	1ffff7ec 	.word	0x1ffff7ec
 8009b6c:	1ffff7f0 	.word	0x1ffff7f0
 8009b70:	20000142 	.word	0x20000142
 8009b74:	20000152 	.word	0x20000152

08009b78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	75fb      	strb	r3, [r7, #23]
 8009b8e:	e027      	b.n	8009be0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	0f1b      	lsrs	r3, r3, #28
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	d80b      	bhi.n	8009bb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	0f1b      	lsrs	r3, r3, #28
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3230      	adds	r2, #48	; 0x30
 8009baa:	b2d2      	uxtb	r2, r2
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	e00a      	b.n	8009bc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	0f1b      	lsrs	r3, r3, #28
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3237      	adds	r2, #55	; 0x37
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]
 8009be0:	7dfa      	ldrb	r2, [r7, #23]
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d3d3      	bcc.n	8009b90 <IntToUnicode+0x18>
  }
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a0d      	ldr	r2, [pc, #52]	; (8009c38 <HAL_PCD_MspInit+0x44>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d113      	bne.n	8009c2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <HAL_PCD_MspInit+0x48>)
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	4a0c      	ldr	r2, [pc, #48]	; (8009c3c <HAL_PCD_MspInit+0x48>)
 8009c0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c10:	61d3      	str	r3, [r2, #28]
 8009c12:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <HAL_PCD_MspInit+0x48>)
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2105      	movs	r1, #5
 8009c22:	2014      	movs	r0, #20
 8009c24:	f7f7 fa59 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009c28:	2014      	movs	r0, #20
 8009c2a:	f7f7 fa72 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40005c00 	.word	0x40005c00
 8009c3c:	40021000 	.word	0x40021000

08009c40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7fb ff3c 	bl	8005ad4 <USBD_LL_SetupStage>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c76:	78fa      	ldrb	r2, [r7, #3]
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	440b      	add	r3, r1
 8009c84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	f7fb ff6e 	bl	8005b6e <USBD_LL_DataOutStage>
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	440b      	add	r3, r1
 8009cba:	333c      	adds	r3, #60	; 0x3c
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f7fb ffc5 	bl	8005c50 <USBD_LL_DataInStage>
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fc f8d5 	bl	8005e8c <USBD_LL_SOF>
}
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d001      	beq.n	8009d02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cfe:	f7f6 fb5f 	bl	80003c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d08:	7bfa      	ldrb	r2, [r7, #15]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fc f885 	bl	8005e1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fc f83e 	bl	8005d9a <USBD_LL_Reset>
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fc f87f 	bl	8005e3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <HAL_PCD_SuspendCallback+0x30>)
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	4a03      	ldr	r2, [pc, #12]	; (8009d58 <HAL_PCD_SuspendCallback+0x30>)
 8009d4a:	f043 0306 	orr.w	r3, r3, #6
 8009d4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	e000ed00 	.word	0xe000ed00

08009d5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fc f879 	bl	8005e62 <USBD_LL_Resume>
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d80:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <USBD_LL_Init+0x88>)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a1d      	ldr	r2, [pc, #116]	; (8009e00 <USBD_LL_Init+0x88>)
 8009d8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009d90:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <USBD_LL_Init+0x88>)
 8009d92:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <USBD_LL_Init+0x8c>)
 8009d94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d96:	4b1a      	ldr	r3, [pc, #104]	; (8009e00 <USBD_LL_Init+0x88>)
 8009d98:	2208      	movs	r2, #8
 8009d9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d9c:	4b18      	ldr	r3, [pc, #96]	; (8009e00 <USBD_LL_Init+0x88>)
 8009d9e:	2202      	movs	r2, #2
 8009da0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009da2:	4b17      	ldr	r3, [pc, #92]	; (8009e00 <USBD_LL_Init+0x88>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009da8:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <USBD_LL_Init+0x88>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <USBD_LL_Init+0x88>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009db4:	4812      	ldr	r0, [pc, #72]	; (8009e00 <USBD_LL_Init+0x88>)
 8009db6:	f7f7 fb7a 	bl	80014ae <HAL_PCD_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009dc0:	f7f6 fafe 	bl	80003c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dca:	2318      	movs	r3, #24
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	f7f8 fea5 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dda:	2358      	movs	r3, #88	; 0x58
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2180      	movs	r1, #128	; 0x80
 8009de0:	f7f8 fe9d 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dee:	2200      	movs	r2, #0
 8009df0:	2181      	movs	r1, #129	; 0x81
 8009df2:	f7f8 fe94 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	200020e4 	.word	0x200020e4
 8009e04:	40005c00 	.word	0x40005c00

08009e08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7f7 fc50 	bl	80016c4 <HAL_PCD_Start>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 f93c 	bl	800a0a8 <USBD_Get_USB_Status>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	4608      	mov	r0, r1
 8009e48:	4611      	mov	r1, r2
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	70fb      	strb	r3, [r7, #3]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70bb      	strb	r3, [r7, #2]
 8009e54:	4613      	mov	r3, r2
 8009e56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e66:	78bb      	ldrb	r3, [r7, #2]
 8009e68:	883a      	ldrh	r2, [r7, #0]
 8009e6a:	78f9      	ldrb	r1, [r7, #3]
 8009e6c:	f7f7 fdca 	bl	8001a04 <HAL_PCD_EP_Open>
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 f916 	bl	800a0a8 <USBD_Get_USB_Status>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ea4:	78fa      	ldrb	r2, [r7, #3]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7f7 fe11 	bl	8001ad0 <HAL_PCD_EP_Close>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 f8f7 	bl	800a0a8 <USBD_Get_USB_Status>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f7 feba 	bl	8001c60 <HAL_PCD_EP_SetStall>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f8d8 	bl	800a0a8 <USBD_Get_USB_Status>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f7 fefb 	bl	8001d20 <HAL_PCD_EP_ClrStall>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f8b9 	bl	800a0a8 <USBD_Get_USB_Status>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	da0c      	bge.n	8009f7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	440b      	add	r3, r1
 8009f74:	3302      	adds	r3, #2
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	e00b      	b.n	8009f92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	4613      	mov	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bc80      	pop	{r7}
 8009f9a:	4770      	bx	lr

08009f9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fb6:	78fa      	ldrb	r2, [r7, #3]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7f7 fcfd 	bl	80019ba <HAL_PCD_SetAddress>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f86e 	bl	800a0a8 <USBD_Get_USB_Status>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	72fb      	strb	r3, [r7, #11]
 8009fea:	4613      	mov	r3, r2
 8009fec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ffc:	893b      	ldrh	r3, [r7, #8]
 8009ffe:	7af9      	ldrb	r1, [r7, #11]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	f7f7 fdea 	bl	8001bda <HAL_PCD_EP_Transmit>
 800a006:	4603      	mov	r3, r0
 800a008:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 f84b 	bl	800a0a8 <USBD_Get_USB_Status>
 800a012:	4603      	mov	r3, r0
 800a014:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a016:	7dbb      	ldrb	r3, [r7, #22]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	461a      	mov	r2, r3
 800a02c:	460b      	mov	r3, r1
 800a02e:	72fb      	strb	r3, [r7, #11]
 800a030:	4613      	mov	r3, r2
 800a032:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a042:	893b      	ldrh	r3, [r7, #8]
 800a044:	7af9      	ldrb	r1, [r7, #11]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	f7f7 fd8a 	bl	8001b60 <HAL_PCD_EP_Receive>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 f828 	bl	800a0a8 <USBD_Get_USB_Status>
 800a058:	4603      	mov	r3, r0
 800a05a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a05c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
	...

0800a068 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a070:	4b02      	ldr	r3, [pc, #8]	; (800a07c <USBD_static_malloc+0x14>)
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr
 800a07c:	20001bb4 	.word	0x20001bb4

0800a080 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr

0800a092 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bc80      	pop	{r7}
 800a0a6:	4770      	bx	lr

0800a0a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d817      	bhi.n	800a0ec <USBD_Get_USB_Status+0x44>
 800a0bc:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <USBD_Get_USB_Status+0x1c>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0db 	.word	0x0800a0db
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e7 	.word	0x0800a0e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d8:	e00b      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0de:	e008      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e4:	e005      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ea:	e002      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	bf00      	nop
  }
  return usb_status;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop

0800a100 <__libc_init_array>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	2600      	movs	r6, #0
 800a104:	4d0c      	ldr	r5, [pc, #48]	; (800a138 <__libc_init_array+0x38>)
 800a106:	4c0d      	ldr	r4, [pc, #52]	; (800a13c <__libc_init_array+0x3c>)
 800a108:	1b64      	subs	r4, r4, r5
 800a10a:	10a4      	asrs	r4, r4, #2
 800a10c:	42a6      	cmp	r6, r4
 800a10e:	d109      	bne.n	800a124 <__libc_init_array+0x24>
 800a110:	f000 f830 	bl	800a174 <_init>
 800a114:	2600      	movs	r6, #0
 800a116:	4d0a      	ldr	r5, [pc, #40]	; (800a140 <__libc_init_array+0x40>)
 800a118:	4c0a      	ldr	r4, [pc, #40]	; (800a144 <__libc_init_array+0x44>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	42a6      	cmp	r6, r4
 800a120:	d105      	bne.n	800a12e <__libc_init_array+0x2e>
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	f855 3b04 	ldr.w	r3, [r5], #4
 800a128:	4798      	blx	r3
 800a12a:	3601      	adds	r6, #1
 800a12c:	e7ee      	b.n	800a10c <__libc_init_array+0xc>
 800a12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a132:	4798      	blx	r3
 800a134:	3601      	adds	r6, #1
 800a136:	e7f2      	b.n	800a11e <__libc_init_array+0x1e>
 800a138:	0800a470 	.word	0x0800a470
 800a13c:	0800a470 	.word	0x0800a470
 800a140:	0800a470 	.word	0x0800a470
 800a144:	0800a474 	.word	0x0800a474

0800a148 <memcpy>:
 800a148:	440a      	add	r2, r1
 800a14a:	4291      	cmp	r1, r2
 800a14c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a150:	d100      	bne.n	800a154 <memcpy+0xc>
 800a152:	4770      	bx	lr
 800a154:	b510      	push	{r4, lr}
 800a156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a15a:	4291      	cmp	r1, r2
 800a15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a160:	d1f9      	bne.n	800a156 <memcpy+0xe>
 800a162:	bd10      	pop	{r4, pc}

0800a164 <memset>:
 800a164:	4603      	mov	r3, r0
 800a166:	4402      	add	r2, r0
 800a168:	4293      	cmp	r3, r2
 800a16a:	d100      	bne.n	800a16e <memset+0xa>
 800a16c:	4770      	bx	lr
 800a16e:	f803 1b01 	strb.w	r1, [r3], #1
 800a172:	e7f9      	b.n	800a168 <memset+0x4>

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
