
PlagueKBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e0  0800a2e0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2e0  0800a2e0  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2e0  0800a2e0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002274  2000015c  0800a444  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d0  0800a444  000223d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d16d  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004428  00000000  00000000  0003d2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00041720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00042908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000572a  00000000  00000000  00043918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c46  00000000  00000000  00049042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3d4  00000000  00000000  0005fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  000ef0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a104 	.word	0x0800a104

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	0800a104 	.word	0x0800a104

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fe50 	bl	8000df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f83e 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f898 	bl	8000290 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f006 fc70 	bl	8006a44 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of keyboardRecordQueue */
  keyboardRecordQueueHandle = osMessageQueueNew (16, sizeof(KEYMSGQUEUE_OBJ_t), &keyboardRecordQueue_attributes);
 8000164:	4a11      	ldr	r2, [pc, #68]	; (80001ac <main+0x5c>)
 8000166:	210d      	movs	r1, #13
 8000168:	2010      	movs	r0, #16
 800016a:	f006 fda9 	bl	8006cc0 <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <main+0x60>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a0f      	ldr	r2, [pc, #60]	; (80001b4 <main+0x64>)
 8000176:	2100      	movs	r1, #0
 8000178:	480f      	ldr	r0, [pc, #60]	; (80001b8 <main+0x68>)
 800017a:	f006 fcc9 	bl	8006b10 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <main+0x6c>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of kbdMatrixRead */
  kbdMatrixReadHandle = osThreadNew(StartTask_kbdMatrixRead, NULL, &kbdMatrixRead_attributes);
 8000184:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <main+0x70>)
 8000186:	2100      	movs	r1, #0
 8000188:	480e      	ldr	r0, [pc, #56]	; (80001c4 <main+0x74>)
 800018a:	f006 fcc1 	bl	8006b10 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <main+0x78>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of processRecord */
  processRecordHandle = osThreadNew(StartTask_processRecord, NULL, &processRecord_attributes);
 8000194:	4a0d      	ldr	r2, [pc, #52]	; (80001cc <main+0x7c>)
 8000196:	2100      	movs	r1, #0
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <main+0x80>)
 800019a:	f006 fcb9 	bl	8006b10 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <main+0x84>)
 80001a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a4:	f006 fc80 	bl	8006aa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a8:	e7fe      	b.n	80001a8 <main+0x58>
 80001aa:	bf00      	nop
 80001ac:	0800a228 	.word	0x0800a228
 80001b0:	20001bcc 	.word	0x20001bcc
 80001b4:	0800a1bc 	.word	0x0800a1bc
 80001b8:	08000385 	.word	0x08000385
 80001bc:	20001bc8 	.word	0x20001bc8
 80001c0:	0800a1e0 	.word	0x0800a1e0
 80001c4:	08000399 	.word	0x08000399
 80001c8:	20001bd4 	.word	0x20001bd4
 80001cc:	0800a204 	.word	0x0800a204
 80001d0:	080003ad 	.word	0x080003ad
 80001d4:	20001bd0 	.word	0x20001bd0

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f009 ff84 	bl	800a0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021a:	2302      	movs	r3, #2
 800021c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fc80 	bl	8002b34 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023a:	f000 f8c1 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f002 feea 	bl	8003034 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000266:	f000 f8ab 	bl	80003c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800026a:	2310      	movs	r3, #16
 800026c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800026e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000272:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f003 f844 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000282:	f000 f89d 	bl	80003c0 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	; 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a4:	4b34      	ldr	r3, [pc, #208]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a33      	ldr	r2, [pc, #204]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b31      	ldr	r3, [pc, #196]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2d      	ldr	r2, [pc, #180]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <MX_GPIO_Init+0xe8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80002ec:	2200      	movs	r2, #0
 80002ee:	f64f 41e6 	movw	r1, #64742	; 0xfce6
 80002f2:	4822      	ldr	r0, [pc, #136]	; (800037c <MX_GPIO_Init+0xec>)
 80002f4:	f001 f88b 	bl	800140e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002fe:	4820      	ldr	r0, [pc, #128]	; (8000380 <MX_GPIO_Init+0xf0>)
 8000300:	f001 f885 	bl	800140e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000304:	23ff      	movs	r3, #255	; 0xff
 8000306:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	481a      	ldr	r0, [pc, #104]	; (8000380 <MX_GPIO_Init+0xf0>)
 8000318:	f000 fede 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800031c:	2301      	movs	r3, #1
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000324:	2302      	movs	r3, #2
 8000326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4619      	mov	r1, r3
 800032e:	4813      	ldr	r0, [pc, #76]	; (800037c <MX_GPIO_Init+0xec>)
 8000330:	f000 fed2 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000334:	f64f 43e6 	movw	r3, #64742	; 0xfce6
 8000338:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480b      	ldr	r0, [pc, #44]	; (800037c <MX_GPIO_Init+0xec>)
 800034e:	f000 fec3 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035c:	2301      	movs	r3, #1
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2302      	movs	r3, #2
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_GPIO_Init+0xf0>)
 800036c:	f000 feb4 	bl	80010d8 <HAL_GPIO_Init>

}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40010800 	.word	0x40010800

08000384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800038c:	f009 fac6 	bl	800991c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000390:	20c8      	movs	r0, #200	; 0xc8
 8000392:	f006 fc67 	bl	8006c64 <osDelay>
 8000396:	e7fb      	b.n	8000390 <StartDefaultTask+0xc>

08000398 <StartTask_kbdMatrixRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_kbdMatrixRead */
void StartTask_kbdMatrixRead(void *argument)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_kbdMatrixRead */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 80003a0:	2032      	movs	r0, #50	; 0x32
 80003a2:	f006 fc5f 	bl	8006c64 <osDelay>

    kbdMatrixRead();
 80003a6:	f000 f971 	bl	800068c <kbdMatrixRead>
  {
 80003aa:	e7f9      	b.n	80003a0 <StartTask_kbdMatrixRead+0x8>

080003ac <StartTask_processRecord>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_processRecord */
void StartTask_processRecord(void *argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartTask_processRecord */
  /* Infinite loop */
  for(;;)
  {
    osDelay(30);
 80003b4:	201e      	movs	r0, #30
 80003b6:	f006 fc55 	bl	8006c64 <osDelay>
    processRecord();
 80003ba:	f000 fac5 	bl	8000948 <processRecord>
  {
 80003be:	e7f9      	b.n	80003b4 <StartTask_processRecord+0x8>

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <HAL_MspInit+0x68>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a17      	ldr	r2, [pc, #92]	; (8000434 <HAL_MspInit+0x68>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x68>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x68>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a11      	ldr	r2, [pc, #68]	; (8000434 <HAL_MspInit+0x68>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x68>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	210f      	movs	r1, #15
 8000406:	f06f 0001 	mvn.w	r0, #1
 800040a:	f000 fe2e 	bl	800106a <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x6c>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x6c>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x4>

08000442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <MemManage_Handler+0x4>

0800044e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <BusFault_Handler+0x4>

08000454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler+0x4>

0800045a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046a:	f000 fd0b 	bl	8000e84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800046e:	f008 fa9b 	bl	80089a8 <xTaskGetSchedulerState>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d001      	beq.n	800047c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000478:	f008 fff6 	bl	8009468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000486:	f001 f90b 	bl	80016a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200020e4 	.word	0x200020e4

08000494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <kbdRecord>:
uint8_t currentKeymapLevel=0;
uint8_t currentModifier=0;

extern osMessageQueueId_t keyboardRecordQueueHandle;

char kbdRecord(uint8_t *currentPressedKeys ){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

	int i,j;
	int keyIdx=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
	char matrixChanged = False;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char found=False;
 80004b2:	2300      	movs	r3, #0
 80004b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t newKeyPressedMsg[KEY_PRESS_NB_MAX]={0};
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
 80004bc:	f107 031c 	add.w	r3, r7, #28
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	809a      	strh	r2, [r3, #4]
	KEYMSGQUEUE_OBJ_t keyMsgQueueObj;

	//changement tableau boutons appuyés
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004ca:	e010      	b.n	80004ee <kbdRecord+0x4e>
	{
		if (currentPressedKeys[i]!=globalPressedKeys[i])
 80004cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	496b      	ldr	r1, [pc, #428]	; (8000684 <kbdRecord+0x1e4>)
 80004d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d8:	440b      	add	r3, r1
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d003      	beq.n	80004e8 <kbdRecord+0x48>
		{
			matrixChanged= True;
 80004e0:	2301      	movs	r3, #1
 80004e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 80004e6:	e005      	b.n	80004f4 <kbdRecord+0x54>
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80004e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ea:	3301      	adds	r3, #1
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	ddeb      	ble.n	80004cc <kbdRecord+0x2c>
		}
	}

	if (matrixChanged==True)
 80004f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	f040 80aa 	bne.w	8000652 <kbdRecord+0x1b2>
	{
		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	220d      	movs	r2, #13
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f009 fdf4 	bl	800a0f4 <memset>
		keyIdx=0;
 800050c:	2300      	movs	r3, #0
 800050e:	627b      	str	r3, [r7, #36]	; 0x24

		//detect newly pressed keys
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000510:	2300      	movs	r3, #0
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000514:	e033      	b.n	800057e <kbdRecord+0xde>
		{
			found=False;
 8000516:	2300      	movs	r3, #0
 8000518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			//find globalPressedKeys elmt in currentPressedKeys
			if (currentPressedKeys[i]!=0x00){
 800051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d027      	beq.n	8000578 <kbdRecord+0xd8>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 8000528:	2300      	movs	r3, #0
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
 800052c:	e010      	b.n	8000550 <kbdRecord+0xb0>
					if (currentPressedKeys[i]==globalPressedKeys[j]){
 800052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4953      	ldr	r1, [pc, #332]	; (8000684 <kbdRecord+0x1e4>)
 8000538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800053a:	440b      	add	r3, r1
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d103      	bne.n	800054a <kbdRecord+0xaa>
						found=True;
 8000542:	2301      	movs	r3, #1
 8000544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 8000548:	e005      	b.n	8000556 <kbdRecord+0xb6>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 800054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054c:	3301      	adds	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000552:	2b09      	cmp	r3, #9
 8000554:	ddeb      	ble.n	800052e <kbdRecord+0x8e>
					}
				}

				//If not found, key newly pressed
				if (found==False)
 8000556:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800055a:	2b00      	cmp	r3, #0
 800055c:	d10c      	bne.n	8000578 <kbdRecord+0xd8>
				{
					keyMsgQueueObj.Buf[keyIdx]=currentPressedKeys[i];
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	7819      	ldrb	r1, [r3, #0]
 8000566:	f107 0208 	add.w	r2, r7, #8
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	4413      	add	r3, r2
 800056e:	460a      	mov	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	3301      	adds	r3, #1
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	3301      	adds	r3, #1
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000580:	2b09      	cmp	r3, #9
 8000582:	ddc8      	ble.n	8000516 <kbdRecord+0x76>

		}


		//send to processRecord in case of key(s) newly pressed
		if (keyIdx != 0){
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00e      	beq.n	80005a8 <kbdRecord+0x108>
			keyMsgQueueObj.KeyNbr=keyIdx;
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	b2db      	uxtb	r3, r3
 800058e:	74bb      	strb	r3, [r7, #18]
			keyMsgQueueObj.Action=PRESS;
 8000590:	2300      	movs	r3, #0
 8000592:	753b      	strb	r3, [r7, #20]
			keyMsgQueueObj.KeyType=UNICODE;
 8000594:	2302      	movs	r3, #2
 8000596:	74fb      	strb	r3, [r7, #19]
			osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 8000598:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <kbdRecord+0x1e8>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	f107 0108 	add.w	r1, r7, #8
 80005a0:	2300      	movs	r3, #0
 80005a2:	2200      	movs	r2, #0
 80005a4:	f006 fc12 	bl	8006dcc <osMessageQueuePut>
		}

		//detect newly released keys
		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	220d      	movs	r2, #13
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f009 fd9f 	bl	800a0f4 <memset>
		keyIdx=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005be:	e033      	b.n	8000628 <kbdRecord+0x188>
		{
			found=False;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			if (globalPressedKeys[i]!=0x00)
 80005c6:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <kbdRecord+0x1e4>)
 80005c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d027      	beq.n	8000622 <kbdRecord+0x182>
			{
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d6:	e010      	b.n	80005fa <kbdRecord+0x15a>
				{
					if (globalPressedKeys[i]==currentPressedKeys[j]){
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <kbdRecord+0x1e4>)
 80005da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005dc:	4413      	add	r3, r2
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	440b      	add	r3, r1
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d103      	bne.n	80005f4 <kbdRecord+0x154>
						found=True;
 80005ec:	2301      	movs	r3, #1
 80005ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 80005f2:	e005      	b.n	8000600 <kbdRecord+0x160>
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 80005f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f6:	3301      	adds	r3, #1
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80005fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	ddeb      	ble.n	80005d8 <kbdRecord+0x138>
					}
				}

				//If not found, key newly released
				if (found==False)
 8000600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10c      	bne.n	8000622 <kbdRecord+0x182>
				{

					keyMsgQueueObj.Buf[keyIdx]= globalPressedKeys[i];
 8000608:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <kbdRecord+0x1e4>)
 800060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060c:	4413      	add	r3, r2
 800060e:	7819      	ldrb	r1, [r3, #0]
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	4413      	add	r3, r2
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	3301      	adds	r3, #1
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	3301      	adds	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062a:	2b09      	cmp	r3, #9
 800062c:	ddc8      	ble.n	80005c0 <kbdRecord+0x120>
				}
			}
		}

		//send to processRecord in case of key(s) newly released
		if (keyIdx != 0){
 800062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00e      	beq.n	8000652 <kbdRecord+0x1b2>
			keyMsgQueueObj.KeyNbr=keyIdx;
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	b2db      	uxtb	r3, r3
 8000638:	74bb      	strb	r3, [r7, #18]
			keyMsgQueueObj.Action=RELEASE;
 800063a:	2301      	movs	r3, #1
 800063c:	753b      	strb	r3, [r7, #20]
			keyMsgQueueObj.KeyType=UNICODE;
 800063e:	2302      	movs	r3, #2
 8000640:	74fb      	strb	r3, [r7, #19]
			osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <kbdRecord+0x1e8>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f107 0108 	add.w	r1, r7, #8
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	f006 fbbd 	bl	8006dcc <osMessageQueuePut>

	}


	//copy currentPressedKeys in globalPressedKeys
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000656:	e00b      	b.n	8000670 <kbdRecord+0x1d0>
	{
		globalPressedKeys[i]=currentPressedKeys[i];
 8000658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <kbdRecord+0x1e4>)
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	4413      	add	r3, r2
 8000666:	460a      	mov	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 800066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066c:	3301      	adds	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	2b09      	cmp	r3, #9
 8000674:	ddf0      	ble.n	8000658 <kbdRecord+0x1b8>
	}

	return matrixChanged;
 8000676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23

}
 800067a:	4618      	mov	r0, r3
 800067c:	3730      	adds	r7, #48	; 0x30
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000178 	.word	0x20000178
 8000688:	20001bcc 	.word	0x20001bcc

0800068c <kbdMatrixRead>:


void kbdMatrixRead(void){
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0

	matrixState *matrixState;
	uint8_t currentPressedKeys[KEY_PRESS_NB_MAX];
	int i;

	memset(currentPressedKeys, 0, sizeof(currentPressedKeys));
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	220a      	movs	r2, #10
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f009 fd2b 	bl	800a0f4 <memset>
	matrixState=ReadMatrixState();
 800069e:	f000 f901 	bl	80008a4 <ReadMatrixState>
 80006a2:	6138      	str	r0, [r7, #16]


	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e020      	b.n	80006ec <kbdMatrixRead+0x60>
		currentPressedKeys[i]=keymap_azerty[currentKeymapLevel][(matrixState->keyTab[i][1])-1][(matrixState->keyTab[i][0])-1];
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <kbdMatrixRead+0x7c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461c      	mov	r4, r3
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	889b      	ldrh	r3, [r3, #4]
 80006ba:	1e59      	subs	r1, r3, #1
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <kbdMatrixRead+0x80>)
 80006ca:	4623      	mov	r3, r4
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	4423      	add	r3, r4
 80006d0:	440b      	add	r3, r1
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4413      	add	r3, r2
 80006d6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80006da:	b2d9      	uxtb	r1, r3
 80006dc:	1d3a      	adds	r2, r7, #4
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	dbd8      	blt.n	80006aa <kbdMatrixRead+0x1e>
	}


    kbdRecord(currentPressedKeys);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fed0 	bl	80004a0 <kbdRecord>
}
 8000700:	bf00      	nop
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	20000182 	.word	0x20000182
 800070c:	0800a250 	.word	0x0800a250

08000710 <bWriteColumnState>:


#include "matrixRead.h"


void bWriteColumnState(int column, uint8_t state){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	2b07      	cmp	r3, #7
 8000722:	d851      	bhi.n	80007c8 <bWriteColumnState+0xb8>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <bWriteColumnState+0x1c>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800074d 	.word	0x0800074d
 8000730:	0800075b 	.word	0x0800075b
 8000734:	08000769 	.word	0x08000769
 8000738:	08000779 	.word	0x08000779
 800073c:	08000789 	.word	0x08000789
 8000740:	08000799 	.word	0x08000799
 8000744:	080007a9 	.word	0x080007a9
 8000748:	080007b9 	.word	0x080007b9
	switch (column){
		case 1 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,state);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	461a      	mov	r2, r3
 8000750:	2102      	movs	r1, #2
 8000752:	481f      	ldr	r0, [pc, #124]	; (80007d0 <bWriteColumnState+0xc0>)
 8000754:	f000 fe5b 	bl	800140e <HAL_GPIO_WritePin>
				break;
 8000758:	e036      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 2 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,state);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	461a      	mov	r2, r3
 800075e:	2104      	movs	r1, #4
 8000760:	481b      	ldr	r0, [pc, #108]	; (80007d0 <bWriteColumnState+0xc0>)
 8000762:	f000 fe54 	bl	800140e <HAL_GPIO_WritePin>
				break;
 8000766:	e02f      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,state);
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	461a      	mov	r2, r3
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4817      	ldr	r0, [pc, #92]	; (80007d0 <bWriteColumnState+0xc0>)
 8000772:	f000 fe4c 	bl	800140e <HAL_GPIO_WritePin>
				break;
 8000776:	e027      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 4 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,state);
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	461a      	mov	r2, r3
 800077c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <bWriteColumnState+0xc0>)
 8000782:	f000 fe44 	bl	800140e <HAL_GPIO_WritePin>
				break;
 8000786:	e01f      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 5 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,state);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	461a      	mov	r2, r3
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	480f      	ldr	r0, [pc, #60]	; (80007d0 <bWriteColumnState+0xc0>)
 8000792:	f000 fe3c 	bl	800140e <HAL_GPIO_WritePin>
				break;
 8000796:	e017      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 6 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,state);
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <bWriteColumnState+0xc0>)
 80007a2:	f000 fe34 	bl	800140e <HAL_GPIO_WritePin>
				break;
 80007a6:	e00f      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 7 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,state);
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <bWriteColumnState+0xc0>)
 80007b2:	f000 fe2c 	bl	800140e <HAL_GPIO_WritePin>
				break;
 80007b6:	e007      	b.n	80007c8 <bWriteColumnState+0xb8>
		case 8 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,state);
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	461a      	mov	r2, r3
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <bWriteColumnState+0xc0>)
 80007c2:	f000 fe24 	bl	800140e <HAL_GPIO_WritePin>
				break;
 80007c6:	bf00      	nop
			}
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40010c00 	.word	0x40010c00

080007d4 <bReadRowState>:


int bReadRowState(int row){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	int state=0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d854      	bhi.n	8000892 <bReadRowState+0xbe>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <bReadRowState+0x1c>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000815 	.word	0x08000815
 80007f4:	08000823 	.word	0x08000823
 80007f8:	08000831 	.word	0x08000831
 80007fc:	0800083f 	.word	0x0800083f
 8000800:	0800084d 	.word	0x0800084d
 8000804:	0800085b 	.word	0x0800085b
 8000808:	08000869 	.word	0x08000869
 800080c:	08000877 	.word	0x08000877
 8000810:	08000885 	.word	0x08000885
	switch (row){
		case 1 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8000814:	2101      	movs	r1, #1
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <bReadRowState+0xc8>)
 8000818:	f000 fde2 	bl	80013e0 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	60fb      	str	r3, [r7, #12]
			break;
 8000820:	e037      	b.n	8000892 <bReadRowState+0xbe>
		case 2 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8000822:	2102      	movs	r1, #2
 8000824:	481d      	ldr	r0, [pc, #116]	; (800089c <bReadRowState+0xc8>)
 8000826:	f000 fddb 	bl	80013e0 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	60fb      	str	r3, [r7, #12]
			break;
 800082e:	e030      	b.n	8000892 <bReadRowState+0xbe>
		case 3:
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
 8000830:	2104      	movs	r1, #4
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <bReadRowState+0xc8>)
 8000834:	f000 fdd4 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	60fb      	str	r3, [r7, #12]
			break;
 800083c:	e029      	b.n	8000892 <bReadRowState+0xbe>
		case 4 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 800083e:	2108      	movs	r1, #8
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <bReadRowState+0xc8>)
 8000842:	f000 fdcd 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	60fb      	str	r3, [r7, #12]
			break;
 800084a:	e022      	b.n	8000892 <bReadRowState+0xbe>
		case 5 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 800084c:	2110      	movs	r1, #16
 800084e:	4813      	ldr	r0, [pc, #76]	; (800089c <bReadRowState+0xc8>)
 8000850:	f000 fdc6 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	60fb      	str	r3, [r7, #12]
			break;
 8000858:	e01b      	b.n	8000892 <bReadRowState+0xbe>
		case 6 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 800085a:	2120      	movs	r1, #32
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <bReadRowState+0xc8>)
 800085e:	f000 fdbf 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	60fb      	str	r3, [r7, #12]
			break;
 8000866:	e014      	b.n	8000892 <bReadRowState+0xbe>
		case 7 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <bReadRowState+0xc8>)
 800086c:	f000 fdb8 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	60fb      	str	r3, [r7, #12]
			break;
 8000874:	e00d      	b.n	8000892 <bReadRowState+0xbe>
		case 8 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <bReadRowState+0xc8>)
 800087a:	f000 fdb1 	bl	80013e0 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	60fb      	str	r3, [r7, #12]
			break;
 8000882:	e006      	b.n	8000892 <bReadRowState+0xbe>
		case 9:
			state=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000884:	2101      	movs	r1, #1
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <bReadRowState+0xcc>)
 8000888:	f000 fdaa 	bl	80013e0 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	60fb      	str	r3, [r7, #12]
			break;
 8000890:	bf00      	nop
	}
	return state;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40010800 	.word	0x40010800
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <ReadMatrixState>:
 * The function then return the pointer to int array size 2 containing:
 * 			- array[0]=column
 * 			- array[1]=row
 * if no key is pressed, it then return {0,0}
 */
matrixState * ReadMatrixState(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	int col=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
	int row=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
	static matrixState matrixState;

	matrixState.keyCurrentEntriesNb=0;
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <ReadMatrixState+0x9c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	memset(matrixState.keyTab, 0, sizeof matrixState.keyTab);
 80008b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80008bc:	2100      	movs	r1, #0
 80008be:	4821      	ldr	r0, [pc, #132]	; (8000944 <ReadMatrixState+0xa0>)
 80008c0:	f009 fc18 	bl	800a0f4 <memset>


	for(col=1;col<=8;col++){
 80008c4:	2301      	movs	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	e031      	b.n	800092e <ReadMatrixState+0x8a>

		bWriteColumnState(col,1);
 80008ca:	2101      	movs	r1, #1
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff1f 	bl	8000710 <bWriteColumnState>

		for (row=1;row<=9;row++)
 80008d2:	2301      	movs	r3, #1
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	e020      	b.n	800091a <ReadMatrixState+0x76>
			{
				if (bReadRowState(row))
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	f7ff ff7b 	bl	80007d4 <bReadRowState>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d017      	beq.n	8000914 <ReadMatrixState+0x70>
				{
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][0]=col;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <ReadMatrixState+0x9c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	b291      	uxth	r1, r2
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <ReadMatrixState+0x9c>)
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	460a      	mov	r2, r1
 80008f4:	805a      	strh	r2, [r3, #2]
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][1]=row;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <ReadMatrixState+0x9c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	b291      	uxth	r1, r2
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <ReadMatrixState+0x9c>)
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	460a      	mov	r2, r1
 8000906:	809a      	strh	r2, [r3, #4]
					matrixState.keyCurrentEntriesNb++;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ReadMatrixState+0x9c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <ReadMatrixState+0x9c>)
 8000912:	701a      	strb	r2, [r3, #0]
		for (row=1;row<=9;row++)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b09      	cmp	r3, #9
 800091e:	dddb      	ble.n	80008d8 <ReadMatrixState+0x34>
				}

			}
		bWriteColumnState(col,0);
 8000920:	2100      	movs	r1, #0
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fef4 	bl	8000710 <bWriteColumnState>
	for(col=1;col<=8;col++){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b08      	cmp	r3, #8
 8000932:	ddca      	ble.n	80008ca <ReadMatrixState+0x26>
	}
	return &matrixState;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <ReadMatrixState+0x9c>)

}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000184 	.word	0x20000184
 8000944:	20000186 	.word	0x20000186

08000948 <processRecord>:
#include "usb_device.h"

extern osMessageQueueId_t keyboardRecordQueueHandle;
extern USBD_HandleTypeDef hUsbDeviceFS;

void processRecord(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
	uint8_t firstIdx;
	uint8_t keyNbr;
	uint8_t i,keycodeIdx;
	uint8_t currentModifier;

	queueCount= osMessageQueueGetCount(keyboardRecordQueueHandle);
 800094e:	4bac      	ldr	r3, [pc, #688]	; (8000c00 <processRecord+0x2b8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f006 fb20 	bl	8006f98 <osMessageQueueGetCount>
 8000958:	61b8      	str	r0, [r7, #24]

	if (queueCount>=1){
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 821a 	beq.w	8000d96 <processRecord+0x44e>
		status=osMessageQueueGet(keyboardRecordQueueHandle,&keyMsgQueueObj,NULL,0U);
 8000962:	4ba7      	ldr	r3, [pc, #668]	; (8000c00 <processRecord+0x2b8>)
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	1d39      	adds	r1, r7, #4
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	f006 faa2 	bl	8006eb4 <osMessageQueueGet>
 8000970:	6178      	str	r0, [r7, #20]

		if(keyMsgQueueObj.Action==PRESS)
 8000972:	7c3b      	ldrb	r3, [r7, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f040 80f6 	bne.w	8000b66 <processRecord+0x21e>
		{
			firstIdx=keyMsgQueueObj.Buf[0];
 800097a:	793b      	ldrb	r3, [r7, #4]
 800097c:	74fb      	strb	r3, [r7, #19]
			keyNbr=keyMsgQueueObj.KeyNbr;
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	74bb      	strb	r3, [r7, #18]

			keycodeIdx=0;
 8000982:	2300      	movs	r3, #0
 8000984:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000986:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <processRecord+0x2bc>)
 8000988:	461a      	mov	r2, r3
 800098a:	2300      	movs	r3, #0
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000990:	4b9d      	ldr	r3, [pc, #628]	; (8000c08 <processRecord+0x2c0>)
 8000992:	785a      	ldrb	r2, [r3, #1]
 8000994:	4b9b      	ldr	r3, [pc, #620]	; (8000c04 <processRecord+0x2bc>)
 8000996:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000998:	2300      	movs	r3, #0
 800099a:	77fb      	strb	r3, [r7, #31]
 800099c:	e0d9      	b.n	8000b52 <processRecord+0x20a>
			{

				switch (keyMsgQueueObj.Buf[i])
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	f107 0220 	add.w	r2, r7, #32
 80009a4:	4413      	add	r3, r2
 80009a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80009aa:	3be0      	subs	r3, #224	; 0xe0
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d873      	bhi.n	8000a98 <processRecord+0x150>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <processRecord+0x70>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	080009d9 	.word	0x080009d9
 80009bc:	080009f1 	.word	0x080009f1
 80009c0:	08000a09 	.word	0x08000a09
 80009c4:	08000a21 	.word	0x08000a21
 80009c8:	08000a39 	.word	0x08000a39
 80009cc:	08000a51 	.word	0x08000a51
 80009d0:	08000a69 	.word	0x08000a69
 80009d4:	08000a81 	.word	0x08000a81
					{
					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LCTRL);
 80009d8:	4b8b      	ldr	r3, [pc, #556]	; (8000c08 <processRecord+0x2c0>)
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b88      	ldr	r3, [pc, #544]	; (8000c04 <processRecord+0x2bc>)
 80009e4:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 80009e6:	4b87      	ldr	r3, [pc, #540]	; (8000c04 <processRecord+0x2bc>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <processRecord+0x2c0>)
 80009ec:	705a      	strb	r2, [r3, #1]
						break;
 80009ee:	e0ad      	b.n	8000b4c <processRecord+0x204>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LSHIFT);
 80009f0:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <processRecord+0x2c0>)
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b82      	ldr	r3, [pc, #520]	; (8000c04 <processRecord+0x2bc>)
 80009fc:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 80009fe:	4b81      	ldr	r3, [pc, #516]	; (8000c04 <processRecord+0x2bc>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b81      	ldr	r3, [pc, #516]	; (8000c08 <processRecord+0x2c0>)
 8000a04:	705a      	strb	r2, [r3, #1]
						break;
 8000a06:	e0a1      	b.n	8000b4c <processRecord+0x204>
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LALT);
 8000a08:	4b7f      	ldr	r3, [pc, #508]	; (8000c08 <processRecord+0x2c0>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b7c      	ldr	r3, [pc, #496]	; (8000c04 <processRecord+0x2bc>)
 8000a14:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a16:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <processRecord+0x2bc>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <processRecord+0x2c0>)
 8000a1c:	705a      	strb	r2, [r3, #1]
						break;
 8000a1e:	e095      	b.n	8000b4c <processRecord+0x204>
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LMETA);
 8000a20:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <processRecord+0x2c0>)
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b76      	ldr	r3, [pc, #472]	; (8000c04 <processRecord+0x2bc>)
 8000a2c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a2e:	4b75      	ldr	r3, [pc, #468]	; (8000c04 <processRecord+0x2bc>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <processRecord+0x2c0>)
 8000a34:	705a      	strb	r2, [r3, #1]
						break;
 8000a36:	e089      	b.n	8000b4c <processRecord+0x204>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RCTRL);
 8000a38:	4b73      	ldr	r3, [pc, #460]	; (8000c08 <processRecord+0x2c0>)
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b70      	ldr	r3, [pc, #448]	; (8000c04 <processRecord+0x2bc>)
 8000a44:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a46:	4b6f      	ldr	r3, [pc, #444]	; (8000c04 <processRecord+0x2bc>)
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4b6f      	ldr	r3, [pc, #444]	; (8000c08 <processRecord+0x2c0>)
 8000a4c:	705a      	strb	r2, [r3, #1]
						break;
 8000a4e:	e07d      	b.n	8000b4c <processRecord+0x204>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RSHIFT);
 8000a50:	4b6d      	ldr	r3, [pc, #436]	; (8000c08 <processRecord+0x2c0>)
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <processRecord+0x2bc>)
 8000a5c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a5e:	4b69      	ldr	r3, [pc, #420]	; (8000c04 <processRecord+0x2bc>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b69      	ldr	r3, [pc, #420]	; (8000c08 <processRecord+0x2c0>)
 8000a64:	705a      	strb	r2, [r3, #1]
						break;
 8000a66:	e071      	b.n	8000b4c <processRecord+0x204>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RALT);
 8000a68:	4b67      	ldr	r3, [pc, #412]	; (8000c08 <processRecord+0x2c0>)
 8000a6a:	785b      	ldrb	r3, [r3, #1]
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b64      	ldr	r3, [pc, #400]	; (8000c04 <processRecord+0x2bc>)
 8000a74:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a76:	4b63      	ldr	r3, [pc, #396]	; (8000c04 <processRecord+0x2bc>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b63      	ldr	r3, [pc, #396]	; (8000c08 <processRecord+0x2c0>)
 8000a7c:	705a      	strb	r2, [r3, #1]
						break;
 8000a7e:	e065      	b.n	8000b4c <processRecord+0x204>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RMETA);
 8000a80:	4b61      	ldr	r3, [pc, #388]	; (8000c08 <processRecord+0x2c0>)
 8000a82:	785b      	ldrb	r3, [r3, #1]
 8000a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b5e      	ldr	r3, [pc, #376]	; (8000c04 <processRecord+0x2bc>)
 8000a8c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000a8e:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <processRecord+0x2bc>)
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <processRecord+0x2c0>)
 8000a94:	705a      	strb	r2, [r3, #1]
						break;
 8000a96:	e059      	b.n	8000b4c <processRecord+0x204>

					default:
						switch (keycodeIdx)
 8000a98:	7fbb      	ldrb	r3, [r7, #30]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d856      	bhi.n	8000b4c <processRecord+0x204>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <processRecord+0x15c>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad5 	.word	0x08000ad5
 8000aac:	08000aed 	.word	0x08000aed
 8000ab0:	08000b05 	.word	0x08000b05
 8000ab4:	08000b1d 	.word	0x08000b1d
 8000ab8:	08000b35 	.word	0x08000b35
						{
							case 0:
								keyboardhid.KEYCODE1=keyMsgQueueObj.Buf[i];
 8000abc:	7ffb      	ldrb	r3, [r7, #31]
 8000abe:	f107 0220 	add.w	r2, r7, #32
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	; (8000c04 <processRecord+0x2bc>)
 8000aca:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000acc:	7fbb      	ldrb	r3, [r7, #30]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	77bb      	strb	r3, [r7, #30]
								break;
 8000ad2:	e03b      	b.n	8000b4c <processRecord+0x204>
							case 1:
								keyboardhid.KEYCODE2=keyMsgQueueObj.Buf[i];
 8000ad4:	7ffb      	ldrb	r3, [r7, #31]
 8000ad6:	f107 0220 	add.w	r2, r7, #32
 8000ada:	4413      	add	r3, r2
 8000adc:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <processRecord+0x2bc>)
 8000ae2:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000ae4:	7fbb      	ldrb	r3, [r7, #30]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	77bb      	strb	r3, [r7, #30]
								break;
 8000aea:	e02f      	b.n	8000b4c <processRecord+0x204>
							case 2:
								keyboardhid.KEYCODE3=keyMsgQueueObj.Buf[i];
 8000aec:	7ffb      	ldrb	r3, [r7, #31]
 8000aee:	f107 0220 	add.w	r2, r7, #32
 8000af2:	4413      	add	r3, r2
 8000af4:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000af8:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <processRecord+0x2bc>)
 8000afa:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000afc:	7fbb      	ldrb	r3, [r7, #30]
 8000afe:	3301      	adds	r3, #1
 8000b00:	77bb      	strb	r3, [r7, #30]
								break;
 8000b02:	e023      	b.n	8000b4c <processRecord+0x204>
							case 3:
								keyboardhid.KEYCODE4=keyMsgQueueObj.Buf[i];
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	f107 0220 	add.w	r2, r7, #32
 8000b0a:	4413      	add	r3, r2
 8000b0c:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <processRecord+0x2bc>)
 8000b12:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000b14:	7fbb      	ldrb	r3, [r7, #30]
 8000b16:	3301      	adds	r3, #1
 8000b18:	77bb      	strb	r3, [r7, #30]
								break;
 8000b1a:	e017      	b.n	8000b4c <processRecord+0x204>
							case 4:
								keyboardhid.KEYCODE5=keyMsgQueueObj.Buf[i];
 8000b1c:	7ffb      	ldrb	r3, [r7, #31]
 8000b1e:	f107 0220 	add.w	r2, r7, #32
 8000b22:	4413      	add	r3, r2
 8000b24:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <processRecord+0x2bc>)
 8000b2a:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000b2c:	7fbb      	ldrb	r3, [r7, #30]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	77bb      	strb	r3, [r7, #30]
								break;
 8000b32:	e00b      	b.n	8000b4c <processRecord+0x204>
							case 5:
								keyboardhid.KEYCODE6=keyMsgQueueObj.Buf[i];
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
 8000b36:	f107 0220 	add.w	r2, r7, #32
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000b40:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <processRecord+0x2bc>)
 8000b42:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000b44:	7fbb      	ldrb	r3, [r7, #30]
 8000b46:	3301      	adds	r3, #1
 8000b48:	77bb      	strb	r3, [r7, #30]
								break;
 8000b4a:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000b4c:	7ffb      	ldrb	r3, [r7, #31]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	77fb      	strb	r3, [r7, #31]
 8000b52:	7bbb      	ldrb	r3, [r7, #14]
 8000b54:	7ffa      	ldrb	r2, [r7, #31]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	f4ff af21 	bcc.w	800099e <processRecord+0x56>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	4929      	ldr	r1, [pc, #164]	; (8000c04 <processRecord+0x2bc>)
 8000b60:	482a      	ldr	r0, [pc, #168]	; (8000c0c <processRecord+0x2c4>)
 8000b62:	f004 fe7f 	bl	8005864 <USBD_HID_SendReport>
			}




		if(keyMsgQueueObj.Action==RELEASE){
 8000b66:	7c3b      	ldrb	r3, [r7, #16]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	f040 8114 	bne.w	8000d96 <processRecord+0x44e>
			firstIdx=keyMsgQueueObj.Buf[0]|0x80;
 8000b6e:	793b      	ldrb	r3, [r7, #4]
 8000b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b74:	74fb      	strb	r3, [r7, #19]
			keyNbr=keyMsgQueueObj.KeyNbr;
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	74bb      	strb	r3, [r7, #18]


			keycodeIdx=0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <processRecord+0x2bc>)
 8000b80:	461a      	mov	r2, r3
 8000b82:	2300      	movs	r3, #0
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <processRecord+0x2c0>)
 8000b8a:	785a      	ldrb	r2, [r3, #1]
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <processRecord+0x2bc>)
 8000b8e:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	77fb      	strb	r3, [r7, #31]
 8000b94:	e0f5      	b.n	8000d82 <processRecord+0x43a>
			{

				switch (keyMsgQueueObj.Buf[i])
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	f107 0220 	add.w	r2, r7, #32
 8000b9c:	4413      	add	r3, r2
 8000b9e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ba2:	3be0      	subs	r3, #224	; 0xe0
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d87c      	bhi.n	8000ca2 <processRecord+0x35a>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <processRecord+0x268>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bd1 	.word	0x08000bd1
 8000bb4:	08000be9 	.word	0x08000be9
 8000bb8:	08000c11 	.word	0x08000c11
 8000bbc:	08000c29 	.word	0x08000c29
 8000bc0:	08000c41 	.word	0x08000c41
 8000bc4:	08000c59 	.word	0x08000c59
 8000bc8:	08000c71 	.word	0x08000c71
 8000bcc:	08000c89 	.word	0x08000c89
					{
					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LCTRL);
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <processRecord+0x2c0>)
 8000bd2:	785b      	ldrb	r3, [r3, #1]
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <processRecord+0x2bc>)
 8000bdc:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <processRecord+0x2bc>)
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <processRecord+0x2c0>)
 8000be4:	705a      	strb	r2, [r3, #1]
						break;
 8000be6:	e0c9      	b.n	8000d7c <processRecord+0x434>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LSHIFT);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <processRecord+0x2c0>)
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	f083 0302 	eor.w	r3, r3, #2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <processRecord+0x2bc>)
 8000bf4:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000bf6:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <processRecord+0x2bc>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <processRecord+0x2c0>)
 8000bfc:	705a      	strb	r2, [r3, #1]
						break;
 8000bfe:	e0bd      	b.n	8000d7c <processRecord+0x434>
 8000c00:	20001bcc 	.word	0x20001bcc
 8000c04:	200002a0 	.word	0x200002a0
 8000c08:	20001bd8 	.word	0x20001bd8
 8000c0c:	20001c20 	.word	0x20001c20
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LALT);
 8000c10:	4b63      	ldr	r3, [pc, #396]	; (8000da0 <processRecord+0x458>)
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	f083 0304 	eor.w	r3, r3, #4
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b62      	ldr	r3, [pc, #392]	; (8000da4 <processRecord+0x45c>)
 8000c1c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <processRecord+0x45c>)
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	4b5f      	ldr	r3, [pc, #380]	; (8000da0 <processRecord+0x458>)
 8000c24:	705a      	strb	r2, [r3, #1]
						break;
 8000c26:	e0a9      	b.n	8000d7c <processRecord+0x434>
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LMETA);
 8000c28:	4b5d      	ldr	r3, [pc, #372]	; (8000da0 <processRecord+0x458>)
 8000c2a:	785b      	ldrb	r3, [r3, #1]
 8000c2c:	f083 0308 	eor.w	r3, r3, #8
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <processRecord+0x45c>)
 8000c34:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c36:	4b5b      	ldr	r3, [pc, #364]	; (8000da4 <processRecord+0x45c>)
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b59      	ldr	r3, [pc, #356]	; (8000da0 <processRecord+0x458>)
 8000c3c:	705a      	strb	r2, [r3, #1]
						break;
 8000c3e:	e09d      	b.n	8000d7c <processRecord+0x434>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RCTRL);
 8000c40:	4b57      	ldr	r3, [pc, #348]	; (8000da0 <processRecord+0x458>)
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	f083 0310 	eor.w	r3, r3, #16
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <processRecord+0x45c>)
 8000c4c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c4e:	4b55      	ldr	r3, [pc, #340]	; (8000da4 <processRecord+0x45c>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <processRecord+0x458>)
 8000c54:	705a      	strb	r2, [r3, #1]
						break;
 8000c56:	e091      	b.n	8000d7c <processRecord+0x434>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RSHIFT);
 8000c58:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <processRecord+0x458>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	f083 0320 	eor.w	r3, r3, #32
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <processRecord+0x45c>)
 8000c64:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <processRecord+0x45c>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <processRecord+0x458>)
 8000c6c:	705a      	strb	r2, [r3, #1]
						break;
 8000c6e:	e085      	b.n	8000d7c <processRecord+0x434>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RALT);
 8000c70:	4b4b      	ldr	r3, [pc, #300]	; (8000da0 <processRecord+0x458>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <processRecord+0x45c>)
 8000c7c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <processRecord+0x45c>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <processRecord+0x458>)
 8000c84:	705a      	strb	r2, [r3, #1]
						break;
 8000c86:	e079      	b.n	8000d7c <processRecord+0x434>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RMETA);
 8000c88:	4b45      	ldr	r3, [pc, #276]	; (8000da0 <processRecord+0x458>)
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000c90:	43db      	mvns	r3, r3
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b43      	ldr	r3, [pc, #268]	; (8000da4 <processRecord+0x45c>)
 8000c96:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c98:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <processRecord+0x45c>)
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <processRecord+0x458>)
 8000c9e:	705a      	strb	r2, [r3, #1]
						break;
 8000ca0:	e06c      	b.n	8000d7c <processRecord+0x434>

					default:
						switch (keycodeIdx)
 8000ca2:	7fbb      	ldrb	r3, [r7, #30]
 8000ca4:	2b05      	cmp	r3, #5
 8000ca6:	d869      	bhi.n	8000d7c <processRecord+0x434>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <processRecord+0x368>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cc9 	.word	0x08000cc9
 8000cb4:	08000ce7 	.word	0x08000ce7
 8000cb8:	08000d05 	.word	0x08000d05
 8000cbc:	08000d23 	.word	0x08000d23
 8000cc0:	08000d41 	.word	0x08000d41
 8000cc4:	08000d5f 	.word	0x08000d5f
						{
							case 0:
								keyboardhid.KEYCODE1=(keyMsgQueueObj.Buf[i] | 0x80);
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	f107 0220 	add.w	r2, r7, #32
 8000cce:	4413      	add	r3, r2
 8000cd0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <processRecord+0x45c>)
 8000cdc:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000cde:	7fbb      	ldrb	r3, [r7, #30]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	77bb      	strb	r3, [r7, #30]
								break;
 8000ce4:	e04a      	b.n	8000d7c <processRecord+0x434>
							case 1:
								keyboardhid.KEYCODE2=(keyMsgQueueObj.Buf[i] | 0x80);
 8000ce6:	7ffb      	ldrb	r3, [r7, #31]
 8000ce8:	f107 0220 	add.w	r2, r7, #32
 8000cec:	4413      	add	r3, r2
 8000cee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <processRecord+0x45c>)
 8000cfa:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000cfc:	7fbb      	ldrb	r3, [r7, #30]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	77bb      	strb	r3, [r7, #30]
								break;
 8000d02:	e03b      	b.n	8000d7c <processRecord+0x434>
							case 2:
								keyboardhid.KEYCODE3=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d04:	7ffb      	ldrb	r3, [r7, #31]
 8000d06:	f107 0220 	add.w	r2, r7, #32
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <processRecord+0x45c>)
 8000d18:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000d1a:	7fbb      	ldrb	r3, [r7, #30]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	77bb      	strb	r3, [r7, #30]
								break;
 8000d20:	e02c      	b.n	8000d7c <processRecord+0x434>
							case 3:
								keyboardhid.KEYCODE4=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d22:	7ffb      	ldrb	r3, [r7, #31]
 8000d24:	f107 0220 	add.w	r2, r7, #32
 8000d28:	4413      	add	r3, r2
 8000d2a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <processRecord+0x45c>)
 8000d36:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000d38:	7fbb      	ldrb	r3, [r7, #30]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	77bb      	strb	r3, [r7, #30]
								break;
 8000d3e:	e01d      	b.n	8000d7c <processRecord+0x434>
							case 4:
								keyboardhid.KEYCODE5=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d40:	7ffb      	ldrb	r3, [r7, #31]
 8000d42:	f107 0220 	add.w	r2, r7, #32
 8000d46:	4413      	add	r3, r2
 8000d48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <processRecord+0x45c>)
 8000d54:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000d56:	7fbb      	ldrb	r3, [r7, #30]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	77bb      	strb	r3, [r7, #30]
								break;
 8000d5c:	e00e      	b.n	8000d7c <processRecord+0x434>
							case 5:
								keyboardhid.KEYCODE6=(keyMsgQueueObj.Buf[i] | 0x80);
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	f107 0220 	add.w	r2, r7, #32
 8000d64:	4413      	add	r3, r2
 8000d66:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <processRecord+0x45c>)
 8000d72:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000d74:	7fbb      	ldrb	r3, [r7, #30]
 8000d76:	3301      	adds	r3, #1
 8000d78:	77bb      	strb	r3, [r7, #30]
								break;
 8000d7a:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	77fb      	strb	r3, [r7, #31]
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	7ffa      	ldrb	r2, [r7, #31]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	f4ff af05 	bcc.w	8000b96 <processRecord+0x24e>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	4905      	ldr	r1, [pc, #20]	; (8000da4 <processRecord+0x45c>)
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <processRecord+0x460>)
 8000d92:	f004 fd67 	bl	8005864 <USBD_HID_SendReport>

		}

	}

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20001bd8 	.word	0x20001bd8
 8000da4:	200002a0 	.word	0x200002a0
 8000da8:	20001c20 	.word	0x20001c20

08000dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dae:	e003      	b.n	8000db8 <LoopCopyDataInit>

08000db0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000db2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000db4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000db6:	3104      	adds	r1, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000dbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dc0:	d3f6      	bcc.n	8000db0 <CopyDataInit>
  ldr r2, =_sbss
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000dc4:	e002      	b.n	8000dcc <LoopFillZerobss>

08000dc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dc8:	f842 3b04 	str.w	r3, [r2], #4

08000dcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dd0:	d3f9      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd2:	f7ff fb5f 	bl	8000494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f009 f95b 	bl	800a090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff f9b9 	bl	8000150 <main>
  bx lr
 8000dde:	4770      	bx	lr
  ldr r3, =_sidata
 8000de0:	0800a2e8 	.word	0x0800a2e8
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000de8:	2000015c 	.word	0x2000015c
  ldr r2, =_sbss
 8000dec:	2000015c 	.word	0x2000015c
  ldr r3, = _ebss
 8000df0:	200023d0 	.word	0x200023d0

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f923 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fada 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f93b 	bl	80010be <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f903 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20001bdc 	.word	0x20001bdc

08000ea8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20001bdc 	.word	0x20001bdc

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4906      	ldr	r1, [pc, #24]	; (8000f54 <__NVIC_EnableIRQ+0x34>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff90 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff2d 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff42 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff90 	bl	8000fac <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5f 	bl	8000f58 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff35 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	; (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	; (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	492c      	ldr	r1, [pc, #176]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	4918      	ldr	r1, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	60cb      	str	r3, [r1, #12]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800142a:	e003      	b.n	8001434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800143e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001440:	b08b      	sub	sp, #44	; 0x2c
 8001442:	af06      	add	r7, sp, #24
 8001444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0fd      	b.n	800164c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f008 fb8d 	bl	8009b84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f820 	bl	80034bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	687e      	ldr	r6, [r7, #4]
 8001484:	466d      	mov	r5, sp
 8001486:	f106 0410 	add.w	r4, r6, #16
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	1d33      	adds	r3, r6, #4
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f001 ffea 	bl	8003470 <USB_CoreInit>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0ce      	b.n	800164c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f81b 	bl	80034f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e04c      	b.n	800155a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3301      	adds	r3, #1
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	b298      	uxth	r0, r3
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3336      	adds	r3, #54	; 0x36
 80014fe:	4602      	mov	r2, r0
 8001500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3303      	adds	r3, #3
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3338      	adds	r3, #56	; 0x38
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	333c      	adds	r3, #60	; 0x3c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3340      	adds	r3, #64	; 0x40
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3301      	adds	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3ad      	bcc.n	80014c0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e044      	b.n	80015f4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f203 1369 	addw	r3, r3, #361	; 0x169
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3b5      	bcc.n	800156a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	687e      	ldr	r6, [r7, #4]
 8001606:	466d      	mov	r5, sp
 8001608:	f106 0410 	add.w	r4, r6, #16
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	1d33      	adds	r3, r6, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f001 ff75 	bl	8003508 <USB_DevInit>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e00d      	b.n	800164c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 ff0f 	bl	8005468 <USB_DevDisconnect>

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001654 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_PCD_Start+0x16>
 8001666:	2302      	movs	r3, #2
 8001668:	e016      	b.n	8001698 <HAL_PCD_Start+0x44>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f001 ff0a 	bl	8003490 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800167c:	2101      	movs	r1, #1
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f008 fccf 	bl	800a022 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fee3 	bl	8005454 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fee5 	bl	800547c <USB_ReadInterrupts>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016bc:	d102      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fb4a 	bl	8001d58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fed7 	bl	800547c <USB_ReadInterrupts>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d8:	d112      	bne.n	8001700 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f008 fac1 	bl	8009c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f925 	bl	800194a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 feb9 	bl	800547c <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001714:	d10b      	bne.n	800172e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fea2 	bl	800547c <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001742:	d10b      	bne.n	800175c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fe8b 	bl	800547c <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	d126      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0204 	bic.w	r2, r2, #4
 8001784:	b292      	uxth	r2, r2
 8001786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	b292      	uxth	r2, r2
 800179e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f008 faa2 	bl	8009cec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ba:	b292      	uxth	r2, r2
 80017bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fe59 	bl	800547c <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d4:	f040 8084 	bne.w	80018e0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	77fb      	strb	r3, [r7, #31]
 80017dc:	e011      	b.n	8001802 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	441a      	add	r2, r3
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	b292      	uxth	r2, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	f107 0120 	add.w	r1, r7, #32
 80017f6:	440b      	add	r3, r1
 80017f8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
 80017fe:	3301      	adds	r3, #1
 8001800:	77fb      	strb	r3, [r7, #31]
 8001802:	7ffb      	ldrb	r3, [r7, #31]
 8001804:	2b07      	cmp	r3, #7
 8001806:	d9ea      	bls.n	80017de <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	b292      	uxth	r2, r2
 8001834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001838:	bf00      	nop
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001842:	b29b      	uxth	r3, r3
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f6      	beq.n	800183a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	b292      	uxth	r2, r2
 8001860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
 8001868:	e010      	b.n	800188c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	4611      	mov	r1, r2
 8001872:	7ffa      	ldrb	r2, [r7, #31]
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	440a      	add	r2, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	f107 0120 	add.w	r1, r7, #32
 800187e:	440b      	add	r3, r1
 8001880:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001884:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	3301      	adds	r3, #1
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d9eb      	bls.n	800186a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0208 	orr.w	r2, r2, #8
 80018a4:	b292      	uxth	r2, r2
 80018a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018bc:	b292      	uxth	r2, r2
 80018be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0204 	orr.w	r2, r2, #4
 80018d4:	b292      	uxth	r2, r2
 80018d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f008 f9ec 	bl	8009cb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fdc9 	bl	800547c <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f4:	d10e      	bne.n	8001914 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001908:	b292      	uxth	r2, r2
 800190a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f008 f9a5 	bl	8009c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fdaf 	bl	800547c <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001928:	d10b      	bne.n	8001942 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	b292      	uxth	r2, r2
 800193e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_PCD_SetAddress+0x1a>
 8001960:	2302      	movs	r3, #2
 8001962:	e013      	b.n	800198c <HAL_PCD_SetAddress+0x42>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fd56 	bl	800542e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	70fb      	strb	r3, [r7, #3]
 80019a6:	460b      	mov	r3, r1
 80019a8:	803b      	strh	r3, [r7, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0e      	bge.n	80019d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	705a      	strb	r2, [r3, #1]
 80019d6:	e00e      	b.n	80019f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a02:	883a      	ldrh	r2, [r7, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	78ba      	ldrb	r2, [r7, #2]
 8001a0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d102      	bne.n	8001a2c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_EP_Open+0xa6>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_Open+0xc4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fd7d 	bl	8003548 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da0e      	bge.n	8001a92 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00e      	b.n	8001ab0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 0207 	and.w	r2, r3, #7
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_PCD_EP_Close+0x6a>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00e      	b.n	8001ae8 <HAL_PCD_EP_Close+0x88>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68f9      	ldr	r1, [r7, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f89f 	bl	8003c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fa51 	bl	8003ff4 <USB_EPStartXfer>
 8001b52:	e005      	b.n	8001b60 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fa4a 	bl	8003ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	460b      	mov	r3, r1
 8001b78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fa0e 	bl	8003ff4 <USB_EPStartXfer>
 8001bd8:	e005      	b.n	8001be6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fa07 	bl	8003ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0207 	and.w	r2, r3, #7
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d901      	bls.n	8001c0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e04c      	b.n	8001ca8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da0e      	bge.n	8001c34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
 8001c32:	e00c      	b.n	8001c4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_PCD_EP_SetStall+0x7e>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e01c      	b.n	8001ca8 <HAL_PCD_EP_SetStall+0xb8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fad9 	bl	8005234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d108      	bne.n	8001c9e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f003 fbfe 	bl	800549a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d901      	bls.n	8001cce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e040      	b.n	8001d50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da0e      	bge.n	8001cf4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	705a      	strb	r2, [r3, #1]
 8001cf2:	e00e      	b.n	8001d12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_PCD_EP_ClrStall+0x82>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e00e      	b.n	8001d50 <HAL_PCD_EP_ClrStall+0xa0>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fac7 	bl	80052d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	; 0x38
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d60:	e2df      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 8158 	bne.w	8002032 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d152      	bne.n	8001e32 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	81fb      	strh	r3, [r7, #14]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3328      	adds	r3, #40	; 0x28
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	441a      	add	r2, r3
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001df0:	2100      	movs	r1, #0
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f007 ff19 	bl	8009c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 828e 	beq.w	8002322 <PCD_EP_ISR_Handler+0x5ca>
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8289 	bne.w	8002322 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e30:	e277      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d034      	beq.n	8001eb6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3306      	adds	r3, #6
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	f003 fb55 	bl	800553a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	823b      	strh	r3, [r7, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	8a3a      	ldrh	r2, [r7, #16]
 8001ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f007 fe8e 	bl	8009bd0 <HAL_PCD_SetupStageCallback>
 8001eb4:	e235      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eb6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f280 8231 	bge.w	8002322 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ecc:	4013      	ands	r3, r2
 8001ece:	83bb      	strh	r3, [r7, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	8bba      	ldrh	r2, [r7, #28]
 8001ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eda:	b292      	uxth	r2, r2
 8001edc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <PCD_EP_ISR_Handler+0x1ee>
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f003 fb05 	bl	800553a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	441a      	add	r2, r3
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f007 fe57 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d112      	bne.n	8001f94 <PCD_EP_ISR_Handler+0x23c>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e02f      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x29c>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b3e      	cmp	r3, #62	; 0x3e
 8001f9a:	d813      	bhi.n	8001fc4 <PCD_EP_ISR_Handler+0x26c>
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <PCD_EP_ISR_Handler+0x25e>
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e017      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x29c>
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <PCD_EP_ISR_Handler+0x286>
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	827b      	strh	r3, [r7, #18]
 8002006:	8a7b      	ldrh	r3, [r7, #18]
 8002008:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800200c:	827b      	strh	r3, [r7, #18]
 800200e:	8a7b      	ldrh	r3, [r7, #18]
 8002010:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002014:	827b      	strh	r3, [r7, #18]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	8a7b      	ldrh	r3, [r7, #18]
 800201c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202c:	b29b      	uxth	r3, r3
 800202e:	8013      	strh	r3, [r2, #0]
 8002030:	e177      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002044:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002048:	2b00      	cmp	r3, #0
 800204a:	f280 80ea 	bge.w	8002222 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29a      	uxth	r2, r3
 8002060:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002064:	4013      	ands	r3, r2
 8002066:	853b      	strh	r3, [r7, #40]	; 0x28
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002080:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d122      	bne.n	80020e4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	3306      	adds	r3, #6
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80020c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	6959      	ldr	r1, [r3, #20]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	88da      	ldrh	r2, [r3, #6]
 80020dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020de:	f003 fa2c 	bl	800553a <USB_ReadPMA>
 80020e2:	e07c      	b.n	80021de <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	78db      	ldrb	r3, [r3, #3]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d108      	bne.n	80020fe <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ee:	461a      	mov	r2, r3
 80020f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f923 	bl	800233e <HAL_PCD_EP_DB_Receive>
 80020f8:	4603      	mov	r3, r0
 80020fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020fc:	e06f      	b.n	80021de <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002118:	847b      	strh	r3, [r7, #34]	; 0x22
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	441a      	add	r2, r3
 8002128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800212a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800212e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800213a:	b29b      	uxth	r3, r3
 800213c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d021      	beq.n	800219c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002160:	b29b      	uxth	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	3302      	adds	r3, #2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02a      	beq.n	80021de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	6959      	ldr	r1, [r3, #20]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	891a      	ldrh	r2, [r3, #8]
 8002194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002196:	f003 f9d0 	bl	800553a <USB_ReadPMA>
 800219a:	e020      	b.n	80021de <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	3306      	adds	r3, #6
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	6959      	ldr	r1, [r3, #20]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	895a      	ldrh	r2, [r3, #10]
 80021d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021da:	f003 f9ae 	bl	800553a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021e4:	441a      	add	r2, r3
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f0:	441a      	add	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <PCD_EP_ISR_Handler+0x4b0>
 80021fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d206      	bcs.n	8002216 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f007 fcf0 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
 8002214:	e005      	b.n	8002222 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fee9 	bl	8003ff4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d07a      	beq.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800222c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	843b      	strh	r3, [r7, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	8c3b      	ldrh	r3, [r7, #32]
 800226c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	78db      	ldrb	r3, [r3, #3]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d108      	bne.n	8002292 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002284:	2b02      	cmp	r3, #2
 8002286:	d146      	bne.n	8002316 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002288:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d141      	bne.n	8002316 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	3302      	adds	r3, #2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	8bfb      	ldrh	r3, [r7, #30]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d906      	bls.n	80022d4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	8bfb      	ldrh	r3, [r7, #30]
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	e002      	b.n	80022da <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f007 fc9e 	bl	8009c2a <HAL_PCD_DataInStageCallback>
 80022ee:	e018      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	441a      	add	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	8bfb      	ldrh	r3, [r7, #30]
 8002302:	441a      	add	r2, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fe70 	bl	8003ff4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002314:	e005      	b.n	8002322 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002316:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002318:	461a      	mov	r2, r3
 800231a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f91b 	bl	8002558 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21b      	sxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f6ff ad17 	blt.w	8001d62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3738      	adds	r7, #56	; 0x38
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07e      	beq.n	8002454 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	3302      	adds	r3, #2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	8b7b      	ldrh	r3, [r7, #26]
 8002386:	429a      	cmp	r2, r3
 8002388:	d306      	bcc.n	8002398 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	1ad2      	subs	r2, r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	e002      	b.n	800239e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d123      	bne.n	80023ee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c0:	833b      	strh	r3, [r7, #24]
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c8:	833b      	strh	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	441a      	add	r2, r3
 80023d8:	8b3b      	ldrh	r3, [r7, #24]
 80023da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01f      	beq.n	8002438 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	82fb      	strh	r3, [r7, #22]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	8afb      	ldrh	r3, [r7, #22]
 8002424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	6959      	ldr	r1, [r3, #20]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	891a      	ldrh	r2, [r3, #8]
 800244c:	8b7b      	ldrh	r3, [r7, #26]
 800244e:	f003 f874 	bl	800553a <USB_ReadPMA>
 8002452:	e07c      	b.n	800254e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	3306      	adds	r3, #6
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	8b7b      	ldrh	r3, [r7, #26]
 8002484:	429a      	cmp	r2, r3
 8002486:	d306      	bcc.n	8002496 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	8b7b      	ldrh	r3, [r7, #26]
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	619a      	str	r2, [r3, #24]
 8002494:	e002      	b.n	800249c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d123      	bne.n	80024ec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	83fb      	strh	r3, [r7, #30]
 80024c0:	8bfb      	ldrh	r3, [r7, #30]
 80024c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024c6:	83fb      	strh	r3, [r7, #30]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8bfb      	ldrh	r3, [r7, #30]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11f      	bne.n	8002536 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	83bb      	strh	r3, [r7, #28]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	8bbb      	ldrh	r3, [r7, #28]
 8002522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	895a      	ldrh	r2, [r3, #10]
 8002548:	8b7b      	ldrh	r3, [r7, #26]
 800254a:	f002 fff6 	bl	800553a <USB_ReadPMA>
    }
  }

  return count;
 800254e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b094      	sub	sp, #80	; 0x50
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8138 	beq.w	80027e2 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	3302      	adds	r3, #2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d907      	bls.n	80025ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	619a      	str	r2, [r3, #24]
 80025b8:	e002      	b.n	80025c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d12c      	bne.n	8002622 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f007 fb2b 	bl	8009c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 823a 	beq.w	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	82fb      	strh	r3, [r7, #22]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	b29b      	uxth	r3, r3
 800261e:	8013      	strh	r3, [r2, #0]
 8002620:	e218      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01f      	beq.n	800266c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002668:	b29b      	uxth	r3, r3
 800266a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 81ee 	bne.w	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002680:	441a      	add	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800268e:	441a      	add	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d309      	bcc.n	80026b4 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6a1a      	ldr	r2, [r3, #32]
 80026aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ac:	1ad2      	subs	r2, r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	621a      	str	r2, [r3, #32]
 80026b2:	e015      	b.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80026bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026ca:	e009      	b.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d155      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x23c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	011a      	lsls	r2, r3, #4
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002720:	b29a      	uxth	r2, r3
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e047      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x274>
 800273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273e:	2b3e      	cmp	r3, #62	; 0x3e
 8002740:	d811      	bhi.n	8002766 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_PCD_EP_DB_Transmit+0x200>
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	3301      	adds	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	b29b      	uxth	r3, r3
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	b29a      	uxth	r2, r3
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	e032      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x274>
 8002766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x224>
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	3b01      	subs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	b29b      	uxth	r3, r3
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278c:	b29a      	uxth	r2, r3
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e01b      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x274>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d117      	bne.n	80027cc <HAL_PCD_EP_DB_Transmit+0x274>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	4413      	add	r3, r2
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	011a      	lsls	r2, r3, #4
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	4413      	add	r3, r2
 80027be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	891a      	ldrh	r2, [r3, #8]
 80027d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f002 fe68 	bl	80054b0 <USB_WritePMA>
 80027e0:	e138      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	3306      	adds	r3, #6
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002816:	429a      	cmp	r2, r3
 8002818:	d307      	bcc.n	800282a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	619a      	str	r2, [r3, #24]
 8002828:	e002      	b.n	8002830 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d12e      	bne.n	8002896 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f007 f9f3 	bl	8009c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 8102 	bne.w	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]
 8002894:	e0de      	b.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11f      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	867b      	strh	r3, [r7, #50]	; 0x32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80028cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028dc:	b29b      	uxth	r3, r3
 80028de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 80b4 	bne.w	8002a54 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f4:	441a      	add	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002902:	441a      	add	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d309      	bcc.n	8002928 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	621a      	str	r2, [r3, #32]
 8002926:	e015      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002930:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800293e:	e009      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d155      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	4413      	add	r3, r2
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	4413      	add	r3, r2
 8002984:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
 800298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298c:	2b00      	cmp	r3, #0
 800298e:	d112      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299a:	b29a      	uxth	r2, r3
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	e044      	b.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80029b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b8:	2b3e      	cmp	r3, #62	; 0x3e
 80029ba:	d811      	bhi.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x488>
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80029cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ce:	3301      	adds	r3, #1
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e02f      	b.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80029e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x49e>
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	3b01      	subs	r3, #1
 80029f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	e018      	b.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d114      	bne.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	4413      	add	r3, r2
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	011a      	lsls	r2, r3, #4
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	4413      	add	r3, r2
 8002a32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	895a      	ldrh	r2, [r3, #10]
 8002a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f002 fd2e 	bl	80054b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a6e:	82bb      	strh	r3, [r7, #20]
 8002a70:	8abb      	ldrh	r3, [r7, #20]
 8002a72:	f083 0310 	eor.w	r3, r3, #16
 8002a76:	82bb      	strh	r3, [r7, #20]
 8002a78:	8abb      	ldrh	r3, [r7, #20]
 8002a7a:	f083 0320 	eor.w	r3, r3, #32
 8002a7e:	82bb      	strh	r3, [r7, #20]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	8abb      	ldrh	r3, [r7, #20]
 8002a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3750      	adds	r7, #80	; 0x50
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	817b      	strh	r3, [r7, #10]
 8002abc:	4613      	mov	r3, r2
 8002abe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e009      	b.n	8002af8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae4:	897a      	ldrh	r2, [r7, #10]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	80da      	strh	r2, [r3, #6]
 8002b0c:	e00b      	b.n	8002b26 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2201      	movs	r2, #1
 8002b12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e26c      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8087 	beq.w	8002c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b54:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d00c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b60:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d112      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
 8002b6c:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d10b      	bne.n	8002b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7a:	4b89      	ldr	r3, [pc, #548]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x12c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d168      	bne.n	8002c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e246      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x76>
 8002b9c:	4b80      	ldr	r3, [pc, #512]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7f      	ldr	r2, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7a      	ldr	r2, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b78      	ldr	r3, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xbc>
 8002bd6:	4b72      	ldr	r3, [pc, #456]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a71      	ldr	r2, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xd4>
 8002bf0:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe f94a 	bl	8000ea8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe f946 	bl	8000ea8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1fa      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe4>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe f936 	bl	8000ea8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe f932 	bl	8000ea8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1e6      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x10c>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7a:	4b49      	ldr	r3, [pc, #292]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x18c>
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x176>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1ba      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4939      	ldr	r1, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x270>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe f8eb 	bl	8000ea8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe f8e7 	bl	8000ea8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e19b      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4927      	ldr	r1, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f8ca 	bl	8000ea8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe f8c6 	bl	8000ea8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e17a      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d03a      	beq.n	8002db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe f8aa 	bl	8000ea8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe f8a6 	bl	8000ea8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e15a      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f000 faa6 	bl	80032c8 <RCC_Delay>
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7fe f890 	bl	8000ea8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8a:	e00f      	b.n	8002dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f88c 	bl	8000ea8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d908      	bls.n	8002dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e140      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	42420000 	.word	0x42420000
 8002da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b9e      	ldr	r3, [pc, #632]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e9      	bne.n	8002d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a6 	beq.w	8002f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b97      	ldr	r3, [pc, #604]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b94      	ldr	r3, [pc, #592]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a93      	ldr	r2, [pc, #588]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]
 8002de2:	4b91      	ldr	r3, [pc, #580]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b8e      	ldr	r3, [pc, #568]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a8a      	ldr	r2, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f84d 	bl	8000ea8 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f849 	bl	8000ea8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0fd      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x312>
 8002e38:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6213      	str	r3, [r2, #32]
 8002e44:	e02d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x334>
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6213      	str	r3, [r2, #32]
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a72      	ldr	r2, [pc, #456]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	e01c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x356>
 8002e70:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a6c      	ldr	r2, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x36e>
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4a66      	ldr	r2, [pc, #408]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6213      	str	r3, [r2, #32]
 8002e96:	4b64      	ldr	r3, [pc, #400]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a63      	ldr	r2, [pc, #396]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d015      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fd fffd 	bl	8000ea8 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fd fff9 	bl	8000ea8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0ab      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	4b57      	ldr	r3, [pc, #348]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ee      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x37e>
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd ffe7 	bl	8000ea8 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fd ffe3 	bl	8000ea8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e095      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ee      	bne.n	8002ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8081 	beq.w	800301e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d061      	beq.n	8002fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d146      	bne.n	8002fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7fd ffb7 	bl	8000ea8 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fd ffb3 	bl	8000ea8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e067      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	4b35      	ldr	r3, [pc, #212]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d108      	bne.n	8002f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	492d      	ldr	r1, [pc, #180]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a19      	ldr	r1, [r3, #32]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	4927      	ldr	r1, [pc, #156]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fd ff87 	bl	8000ea8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fd ff83 	bl	8000ea8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e037      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46a>
 8002fbc:	e02f      	b.n	800301e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_RCC_OscConfig+0x4fc>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ff70 	bl	8000ea8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd ff6c 	bl	8000ea8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e020      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x498>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e013      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
 8003030:	42420060 	.word	0x42420060

08003034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4965      	ldr	r1, [pc, #404]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fd fec0 	bl	8000ea8 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fd febc 	bl	8000ea8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1cc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fe1e 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	0800a240 	.word	0x0800a240
 8003200:	20000000 	.word	0x20000000
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b490      	push	{r4, r7}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003210:	1d3c      	adds	r4, r7, #4
 8003212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003218:	f240 2301 	movw	r3, #513	; 0x201
 800321c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x40>
 8003242:	2b08      	cmp	r3, #8
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x46>
 8003246:	e02d      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324a:	623b      	str	r3, [r7, #32]
      break;
 800324c:	e02d      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325a:	4413      	add	r3, r2
 800325c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0c5b      	lsrs	r3, r3, #17
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327a:	4413      	add	r3, r2
 800327c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003286:	fb02 f203 	mul.w	r2, r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	e004      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	623b      	str	r3, [r7, #32]
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a6:	623b      	str	r3, [r7, #32]
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc90      	pop	{r4, r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0800a15c 	.word	0x0800a15c
 80032bc:	40021000 	.word	0x40021000
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <RCC_Delay+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <RCC_Delay+0x38>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e4:	bf00      	nop
  }
  while (Delay --);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	60fa      	str	r2, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <RCC_Delay+0x1c>
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000000 	.word	0x20000000
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a42      	ldr	r2, [pc, #264]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fd fda0 	bl	8000ea8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fd fd9c 	bl	8000ea8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06d      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02e      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d027      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033be:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fd6b 	bl	8000ea8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fd67 	bl	8000ea8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e036      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	4313      	orrs	r3, r2
 8003408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	490b      	ldr	r1, [pc, #44]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420440 	.word	0x42420440

08003470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003470:	b084      	sub	sp, #16
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	f107 0014 	add.w	r0, r7, #20
 800347e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	b004      	add	sp, #16
 800348e:	4770      	bx	lr

08003490 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80034a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80034c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4013      	ands	r3, r2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003508:	b084      	sub	sp, #16
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	f107 0014 	add.w	r0, r7, #20
 8003516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	b004      	add	sp, #16
 8003546:	4770      	bx	lr

08003548 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003548:	b480      	push	{r7}
 800354a:	b09b      	sub	sp, #108	; 0x6c
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	78db      	ldrb	r3, [r3, #3]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d81f      	bhi.n	80035ba <USB_ActivateEndpoint+0x72>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <USB_ActivateEndpoint+0x38>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	08003591 	.word	0x08003591
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035c3 	.word	0x080035c3
 800358c:	0800359f 	.word	0x0800359f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003590:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003598:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800359c:	e012      	b.n	80035c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800359e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80035a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80035aa:	e00b      	b.n	80035c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80035b8:	e004      	b.n	80035c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80035c0:	e000      	b.n	80035c4 <USB_ActivateEndpoint+0x7c>
      break;
 80035c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	441a      	add	r2, r3
 80035ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80035d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	441a      	add	r2, r3
 8003614:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	7b1b      	ldrb	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 8149 	bne.w	80038c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8084 	beq.w	8003748 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800364a:	b29b      	uxth	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4413      	add	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	011a      	lsls	r2, r3, #4
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	88db      	ldrh	r3, [r3, #6]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	81fb      	strh	r3, [r7, #14]
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <USB_ActivateEndpoint+0x17c>
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	81bb      	strh	r3, [r7, #12]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	89bb      	ldrh	r3, [r7, #12]
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	78db      	ldrb	r3, [r3, #3]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d020      	beq.n	800370e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e2:	813b      	strh	r3, [r7, #8]
 80036e4:	893b      	ldrh	r3, [r7, #8]
 80036e6:	f083 0320 	eor.w	r3, r3, #32
 80036ea:	813b      	strh	r3, [r7, #8]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	893b      	ldrh	r3, [r7, #8]
 80036f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003708:	b29b      	uxth	r3, r3
 800370a:	8013      	strh	r3, [r2, #0]
 800370c:	e27f      	b.n	8003c0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	441a      	add	r2, r3
 8003730:	897b      	ldrh	r3, [r7, #10]
 8003732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]
 8003746:	e262      	b.n	8003c0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	4413      	add	r3, r2
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	011a      	lsls	r2, r3, #4
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	4413      	add	r3, r2
 8003766:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	88db      	ldrh	r3, [r3, #6]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003786:	b29b      	uxth	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	4413      	add	r3, r2
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	011a      	lsls	r2, r3, #4
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	4413      	add	r3, r2
 800379a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d112      	bne.n	80037ce <USB_ActivateEndpoint+0x286>
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	e02f      	b.n	800382e <USB_ActivateEndpoint+0x2e6>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b3e      	cmp	r3, #62	; 0x3e
 80037d4:	d813      	bhi.n	80037fe <USB_ActivateEndpoint+0x2b6>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <USB_ActivateEndpoint+0x2a8>
 80037ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ec:	3301      	adds	r3, #1
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
 80037f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	e017      	b.n	800382e <USB_ActivateEndpoint+0x2e6>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	663b      	str	r3, [r7, #96]	; 0x60
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <USB_ActivateEndpoint+0x2d0>
 8003812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003814:	3b01      	subs	r3, #1
 8003816:	663b      	str	r3, [r7, #96]	; 0x60
 8003818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381a:	b29b      	uxth	r3, r3
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	b29b      	uxth	r3, r3
 8003820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003828:	b29a      	uxth	r2, r3
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	83fb      	strh	r3, [r7, #30]
 800383c:	8bfb      	ldrh	r3, [r7, #30]
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01b      	beq.n	800387e <USB_ActivateEndpoint+0x336>
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385c:	83bb      	strh	r3, [r7, #28]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	8bbb      	ldrh	r3, [r7, #28]
 800386a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387a:	b29b      	uxth	r3, r3
 800387c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003894:	837b      	strh	r3, [r7, #26]
 8003896:	8b7b      	ldrh	r3, [r7, #26]
 8003898:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800389c:	837b      	strh	r3, [r7, #26]
 800389e:	8b7b      	ldrh	r3, [r7, #26]
 80038a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038a4:	837b      	strh	r3, [r7, #26]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8b7b      	ldrh	r3, [r7, #26]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
 80038c6:	e1a2      	b.n	8003c0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	441a      	add	r2, r3
 80038ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80038f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003900:	b29b      	uxth	r3, r3
 8003902:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65bb      	str	r3, [r7, #88]	; 0x58
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003914:	4413      	add	r3, r2
 8003916:	65bb      	str	r3, [r7, #88]	; 0x58
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003920:	4413      	add	r3, r2
 8003922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003926:	657b      	str	r3, [r7, #84]	; 0x54
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	891b      	ldrh	r3, [r3, #8]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	b29b      	uxth	r3, r3
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	653b      	str	r3, [r7, #80]	; 0x50
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003948:	4413      	add	r3, r2
 800394a:	653b      	str	r3, [r7, #80]	; 0x50
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	4413      	add	r3, r2
 8003956:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	895b      	ldrh	r3, [r3, #10]
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 8091 	bne.w	8003a98 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003984:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01b      	beq.n	80039c6 <USB_ActivateEndpoint+0x47e>
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80039d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01b      	beq.n	8003a16 <USB_ActivateEndpoint+0x4ce>
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a74:	867b      	strh	r3, [r7, #50]	; 0x32
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	441a      	add	r2, r3
 8003a80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]
 8003a96:	e0ba      	b.n	8003c0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003aa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01d      	beq.n	8003af0 <USB_ActivateEndpoint+0x5a8>
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01d      	beq.n	8003b48 <USB_ActivateEndpoint+0x600>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	78db      	ldrb	r3, [r3, #3]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d024      	beq.n	8003b9a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b6e:	f083 0320 	eor.w	r3, r3, #32
 8003b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
 8003b98:	e01d      	b.n	8003bd6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	441a      	add	r2, r3
 8003bf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003c0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	376c      	adds	r7, #108	; 0x6c
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b08d      	sub	sp, #52	; 0x34
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	7b1b      	ldrb	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 808e 	bne.w	8003d4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d044      	beq.n	8003cc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	81bb      	strh	r3, [r7, #12]
 8003c46:	89bb      	ldrh	r3, [r7, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01b      	beq.n	8003c88 <USB_DeactivateEndpoint+0x6c>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	817b      	strh	r3, [r7, #10]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9e:	813b      	strh	r3, [r7, #8]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	893b      	ldrh	r3, [r7, #8]
 8003cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]
 8003cc0:	e192      	b.n	8003fe8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	827b      	strh	r3, [r7, #18]
 8003cd0:	8a7b      	ldrh	r3, [r7, #18]
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01b      	beq.n	8003d12 <USB_DeactivateEndpoint+0xf6>
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	823b      	strh	r3, [r7, #16]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	8a3b      	ldrh	r3, [r7, #16]
 8003cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d28:	81fb      	strh	r3, [r7, #14]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	441a      	add	r2, r3
 8003d34:	89fb      	ldrh	r3, [r7, #14]
 8003d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8013      	strh	r3, [r2, #0]
 8003d4a:	e14d      	b.n	8003fe8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 80a5 	bne.w	8003ea0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	843b      	strh	r3, [r7, #32]
 8003d64:	8c3b      	ldrh	r3, [r7, #32]
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01b      	beq.n	8003da6 <USB_DeactivateEndpoint+0x18a>
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	83fb      	strh	r3, [r7, #30]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	8bfb      	ldrh	r3, [r7, #30]
 8003d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	83bb      	strh	r3, [r7, #28]
 8003db4:	8bbb      	ldrh	r3, [r7, #28]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01b      	beq.n	8003df6 <USB_DeactivateEndpoint+0x1da>
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	837b      	strh	r3, [r7, #26]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	8b7b      	ldrh	r3, [r7, #26]
 8003de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	833b      	strh	r3, [r7, #24]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	441a      	add	r2, r3
 8003e18:	8b3b      	ldrh	r3, [r7, #24]
 8003e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	82fb      	strh	r3, [r7, #22]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	8afb      	ldrh	r3, [r7, #22]
 8003e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7c:	82bb      	strh	r3, [r7, #20]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	8abb      	ldrh	r3, [r7, #20]
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e0a3      	b.n	8003fe8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01b      	beq.n	8003ef0 <USB_DeactivateEndpoint+0x2d4>
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003efe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <USB_DeactivateEndpoint+0x324>
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3734      	adds	r7, #52	; 0x34
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b0c4      	sub	sp, #272	; 0x110
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	6018      	str	r0, [r3, #0]
 8003ffe:	463b      	mov	r3, r7
 8004000:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b01      	cmp	r3, #1
 800400a:	f040 8557 	bne.w	8004abc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800400e:	463b      	mov	r3, r7
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	463b      	mov	r3, r7
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d905      	bls.n	800402a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004028:	e004      	b.n	8004034 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800402a:	463b      	mov	r3, r7
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004034:	463b      	mov	r3, r7
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	7b1b      	ldrb	r3, [r3, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12c      	bne.n	8004098 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800403e:	463b      	mov	r3, r7
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6959      	ldr	r1, [r3, #20]
 8004044:	463b      	mov	r3, r7
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	88da      	ldrh	r2, [r3, #6]
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404e:	b29b      	uxth	r3, r3
 8004050:	1d38      	adds	r0, r7, #4
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	f001 fa2c 	bl	80054b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	463b      	mov	r3, r7
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011a      	lsls	r2, r3, #4
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4413      	add	r3, r2
 800407c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004080:	f107 0310 	add.w	r3, r7, #16
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408a:	b29a      	uxth	r2, r3
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	f000 bcdd 	b.w	8004a52 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004098:	463b      	mov	r3, r7
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	78db      	ldrb	r3, [r3, #3]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	f040 8347 	bne.w	8004732 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040a4:	463b      	mov	r3, r7
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	463b      	mov	r3, r7
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f240 82eb 	bls.w	800468c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	463b      	mov	r3, r7
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	463b      	mov	r3, r7
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80040e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80040fa:	463b      	mov	r3, r7
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	1ad2      	subs	r2, r2, r3
 8004106:	463b      	mov	r3, r7
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	463b      	mov	r3, r7
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8159 	beq.w	80043da <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
 800412e:	463b      	mov	r3, r7
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d164      	bne.n	8004202 <USB_EPStartXfer+0x20e>
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004146:	b29b      	uxth	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	4413      	add	r3, r2
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	011a      	lsls	r2, r3, #4
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	4413      	add	r3, r2
 800415c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d112      	bne.n	8004190 <USB_EPStartXfer+0x19c>
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004174:	b29a      	uxth	r2, r3
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004188:	b29a      	uxth	r2, r3
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	e054      	b.n	800423a <USB_EPStartXfer+0x246>
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	2b3e      	cmp	r3, #62	; 0x3e
 8004196:	d817      	bhi.n	80041c8 <USB_EPStartXfer+0x1d4>
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <USB_EPStartXfer+0x1c4>
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b2:	3301      	adds	r3, #1
 80041b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041bc:	b29b      	uxth	r3, r3
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e038      	b.n	800423a <USB_EPStartXfer+0x246>
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <USB_EPStartXfer+0x1f4>
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e2:	3b01      	subs	r3, #1
 80041e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	801a      	strh	r2, [r3, #0]
 8004200:	e01b      	b.n	800423a <USB_EPStartXfer+0x246>
 8004202:	463b      	mov	r3, r7
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d116      	bne.n	800423a <USB_EPStartXfer+0x246>
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004214:	b29b      	uxth	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	4413      	add	r3, r2
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
 800421e:	463b      	mov	r3, r7
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	011a      	lsls	r2, r3, #4
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	4413      	add	r3, r2
 800422a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	b29a      	uxth	r2, r3
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800423a:	463b      	mov	r3, r7
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	895b      	ldrh	r3, [r3, #10]
 8004240:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004244:	463b      	mov	r3, r7
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6959      	ldr	r1, [r3, #20]
 800424a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424e:	b29b      	uxth	r3, r3
 8004250:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004254:	1d38      	adds	r0, r7, #4
 8004256:	6800      	ldr	r0, [r0, #0]
 8004258:	f001 f92a 	bl	80054b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800425c:	463b      	mov	r3, r7
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	441a      	add	r2, r3
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800426e:	463b      	mov	r3, r7
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	463b      	mov	r3, r7
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d909      	bls.n	8004292 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800427e:	463b      	mov	r3, r7
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004288:	1ad2      	subs	r2, r2, r3
 800428a:	463b      	mov	r3, r7
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	e008      	b.n	80042a4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004292:	463b      	mov	r3, r7
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800429c:	463b      	mov	r3, r7
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042a4:	463b      	mov	r3, r7
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d164      	bne.n	8004378 <USB_EPStartXfer+0x384>
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042bc:	b29b      	uxth	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	011a      	lsls	r2, r3, #4
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d112      	bne.n	8004306 <USB_EPStartXfer+0x312>
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fe:	b29a      	uxth	r2, r3
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e057      	b.n	80043b6 <USB_EPStartXfer+0x3c2>
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430a:	2b3e      	cmp	r3, #62	; 0x3e
 800430c:	d817      	bhi.n	800433e <USB_EPStartXfer+0x34a>
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <USB_EPStartXfer+0x33a>
 8004324:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800432e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004332:	b29b      	uxth	r3, r3
 8004334:	029b      	lsls	r3, r3, #10
 8004336:	b29a      	uxth	r2, r3
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e03b      	b.n	80043b6 <USB_EPStartXfer+0x3c2>
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <USB_EPStartXfer+0x36a>
 8004354:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004358:	3b01      	subs	r3, #1
 800435a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800435e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004362:	b29b      	uxth	r3, r3
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	b29b      	uxth	r3, r3
 8004368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004370:	b29a      	uxth	r2, r3
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e01e      	b.n	80043b6 <USB_EPStartXfer+0x3c2>
 8004378:	463b      	mov	r3, r7
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d119      	bne.n	80043b6 <USB_EPStartXfer+0x3c2>
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004390:	b29b      	uxth	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	4413      	add	r3, r2
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	463b      	mov	r3, r7
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	011a      	lsls	r2, r3, #4
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	4413      	add	r3, r2
 80043a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043b6:	463b      	mov	r3, r7
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	891b      	ldrh	r3, [r3, #8]
 80043bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80043d0:	1d38      	adds	r0, r7, #4
 80043d2:	6800      	ldr	r0, [r0, #0]
 80043d4:	f001 f86c 	bl	80054b0 <USB_WritePMA>
 80043d8:	e33b      	b.n	8004a52 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d164      	bne.n	80044ae <USB_EPStartXfer+0x4ba>
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	4413      	add	r3, r2
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	011a      	lsls	r2, r3, #4
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004406:	4413      	add	r3, r2
 8004408:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800440c:	64bb      	str	r3, [r7, #72]	; 0x48
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d112      	bne.n	800443c <USB_EPStartXfer+0x448>
 8004416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004420:	b29a      	uxth	r2, r3
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	e057      	b.n	80044ec <USB_EPStartXfer+0x4f8>
 800443c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004440:	2b3e      	cmp	r3, #62	; 0x3e
 8004442:	d817      	bhi.n	8004474 <USB_EPStartXfer+0x480>
 8004444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <USB_EPStartXfer+0x470>
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445e:	3301      	adds	r3, #1
 8004460:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004468:	b29b      	uxth	r3, r3
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	b29a      	uxth	r2, r3
 800446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	e03b      	b.n	80044ec <USB_EPStartXfer+0x4f8>
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <USB_EPStartXfer+0x4a0>
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448e:	3b01      	subs	r3, #1
 8004490:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004498:	b29b      	uxth	r3, r3
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	b29b      	uxth	r3, r3
 800449e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e01e      	b.n	80044ec <USB_EPStartXfer+0x4f8>
 80044ae:	463b      	mov	r3, r7
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d119      	bne.n	80044ec <USB_EPStartXfer+0x4f8>
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	657b      	str	r3, [r7, #84]	; 0x54
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044cc:	4413      	add	r3, r2
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
 80044d0:	463b      	mov	r3, r7
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	011a      	lsls	r2, r3, #4
 80044d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044da:	4413      	add	r3, r2
 80044dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044e0:	653b      	str	r3, [r7, #80]	; 0x50
 80044e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80044ec:	463b      	mov	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	891b      	ldrh	r3, [r3, #8]
 80044f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044f6:	463b      	mov	r3, r7
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6959      	ldr	r1, [r3, #20]
 80044fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004500:	b29b      	uxth	r3, r3
 8004502:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004506:	1d38      	adds	r0, r7, #4
 8004508:	6800      	ldr	r0, [r0, #0]
 800450a:	f000 ffd1 	bl	80054b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004518:	441a      	add	r2, r3
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004520:	463b      	mov	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d909      	bls.n	8004544 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004530:	463b      	mov	r3, r7
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	621a      	str	r2, [r3, #32]
 8004542:	e008      	b.n	8004556 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004544:	463b      	mov	r3, r7
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d164      	bne.n	8004630 <USB_EPStartXfer+0x63c>
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	4413      	add	r3, r2
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	011a      	lsls	r2, r3, #4
 8004586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004588:	4413      	add	r3, r2
 800458a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d112      	bne.n	80045be <USB_EPStartXfer+0x5ca>
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	e054      	b.n	8004668 <USB_EPStartXfer+0x674>
 80045be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c2:	2b3e      	cmp	r3, #62	; 0x3e
 80045c4:	d817      	bhi.n	80045f6 <USB_EPStartXfer+0x602>
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <USB_EPStartXfer+0x5f2>
 80045dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	e038      	b.n	8004668 <USB_EPStartXfer+0x674>
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <USB_EPStartXfer+0x622>
 800460c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004610:	3b01      	subs	r3, #1
 8004612:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29b      	uxth	r3, r3
 8004620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004628:	b29a      	uxth	r2, r3
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e01b      	b.n	8004668 <USB_EPStartXfer+0x674>
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d116      	bne.n	8004668 <USB_EPStartXfer+0x674>
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004648:	4413      	add	r3, r2
 800464a:	647b      	str	r3, [r7, #68]	; 0x44
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004656:	4413      	add	r3, r2
 8004658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
 800465e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004662:	b29a      	uxth	r2, r3
 8004664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004666:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004668:	463b      	mov	r3, r7
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	895b      	ldrh	r3, [r3, #10]
 800466e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004672:	463b      	mov	r3, r7
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6959      	ldr	r1, [r3, #20]
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467c:	b29b      	uxth	r3, r3
 800467e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004682:	1d38      	adds	r0, r7, #4
 8004684:	6800      	ldr	r0, [r0, #0]
 8004686:	f000 ff13 	bl	80054b0 <USB_WritePMA>
 800468a:	e1e2      	b.n	8004a52 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046da:	1d3b      	adds	r3, r7, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	663b      	str	r3, [r7, #96]	; 0x60
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ee:	4413      	add	r3, r2
 80046f0:	663b      	str	r3, [r7, #96]	; 0x60
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	011a      	lsls	r2, r3, #4
 80046fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004708:	b29a      	uxth	r2, r3
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800470e:	463b      	mov	r3, r7
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	891b      	ldrh	r3, [r3, #8]
 8004714:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004718:	463b      	mov	r3, r7
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6959      	ldr	r1, [r3, #20]
 800471e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004722:	b29b      	uxth	r3, r3
 8004724:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004728:	1d38      	adds	r0, r7, #4
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	f000 fec0 	bl	80054b0 <USB_WritePMA>
 8004730:	e18f      	b.n	8004a52 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 808f 	beq.w	800486c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	67bb      	str	r3, [r7, #120]	; 0x78
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d164      	bne.n	8004828 <USB_EPStartXfer+0x834>
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	673b      	str	r3, [r7, #112]	; 0x70
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476c:	b29b      	uxth	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004772:	4413      	add	r3, r2
 8004774:	673b      	str	r3, [r7, #112]	; 0x70
 8004776:	463b      	mov	r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	011a      	lsls	r2, r3, #4
 800477e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004780:	4413      	add	r3, r2
 8004782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d112      	bne.n	80047b6 <USB_EPStartXfer+0x7c2>
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800479a:	b29a      	uxth	r2, r3
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	e054      	b.n	8004860 <USB_EPStartXfer+0x86c>
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ba:	2b3e      	cmp	r3, #62	; 0x3e
 80047bc:	d817      	bhi.n	80047ee <USB_EPStartXfer+0x7fa>
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <USB_EPStartXfer+0x7ea>
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	3301      	adds	r3, #1
 80047da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	029b      	lsls	r3, r3, #10
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e038      	b.n	8004860 <USB_EPStartXfer+0x86c>
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <USB_EPStartXfer+0x81a>
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	3b01      	subs	r3, #1
 800480a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	b29b      	uxth	r3, r3
 8004814:	029b      	lsls	r3, r3, #10
 8004816:	b29b      	uxth	r3, r3
 8004818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004820:	b29a      	uxth	r2, r3
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e01b      	b.n	8004860 <USB_EPStartXfer+0x86c>
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d116      	bne.n	8004860 <USB_EPStartXfer+0x86c>
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004840:	4413      	add	r3, r2
 8004842:	67bb      	str	r3, [r7, #120]	; 0x78
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	011a      	lsls	r2, r3, #4
 800484c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484e:	4413      	add	r3, r2
 8004850:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004854:	677b      	str	r3, [r7, #116]	; 0x74
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485a:	b29a      	uxth	r2, r3
 800485c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	895b      	ldrh	r3, [r3, #10]
 8004866:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800486a:	e097      	b.n	800499c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d168      	bne.n	8004948 <USB_EPStartXfer+0x954>
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800488e:	4413      	add	r3, r2
 8004890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004894:	463b      	mov	r3, r7
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a0:	4413      	add	r3, r2
 80048a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d112      	bne.n	80048d6 <USB_EPStartXfer+0x8e2>
 80048b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	e05d      	b.n	8004992 <USB_EPStartXfer+0x99e>
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	2b3e      	cmp	r3, #62	; 0x3e
 80048dc:	d817      	bhi.n	800490e <USB_EPStartXfer+0x91a>
 80048de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <USB_EPStartXfer+0x90a>
 80048f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80048f8:	3301      	adds	r3, #1
 80048fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80048fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004902:	b29b      	uxth	r3, r3
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	b29a      	uxth	r2, r3
 8004908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	e041      	b.n	8004992 <USB_EPStartXfer+0x99e>
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <USB_EPStartXfer+0x93a>
 8004924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004928:	3b01      	subs	r3, #1
 800492a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800492e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004932:	b29b      	uxth	r3, r3
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	b29b      	uxth	r3, r3
 8004938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004940:	b29a      	uxth	r2, r3
 8004942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	e024      	b.n	8004992 <USB_EPStartXfer+0x99e>
 8004948:	463b      	mov	r3, r7
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11f      	bne.n	8004992 <USB_EPStartXfer+0x99e>
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800496a:	4413      	add	r3, r2
 800496c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004970:	463b      	mov	r3, r7
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	011a      	lsls	r2, r3, #4
 8004978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497c:	4413      	add	r3, r2
 800497e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	b29a      	uxth	r2, r3
 800498c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004992:	463b      	mov	r3, r7
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	891b      	ldrh	r3, [r3, #8]
 8004998:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800499c:	463b      	mov	r3, r7
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6959      	ldr	r1, [r3, #20]
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80049ac:	1d38      	adds	r0, r7, #4
 80049ae:	6800      	ldr	r0, [r0, #0]
 80049b0:	f000 fd7e 	bl	80054b0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d122      	bne.n	8004a04 <USB_EPStartXfer+0xa10>
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	463b      	mov	r3, r7
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	463b      	mov	r3, r7
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
 8004a02:	e026      	b.n	8004a52 <USB_EPStartXfer+0xa5e>
 8004a04:	463b      	mov	r3, r7
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d121      	bne.n	8004a52 <USB_EPStartXfer+0xa5e>
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	463b      	mov	r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004a2c:	1d3b      	adds	r3, r7, #4
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	463b      	mov	r3, r7
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	463b      	mov	r3, r7
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f107 020e 	add.w	r2, r7, #14
 8004a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	f107 030e 	add.w	r3, r7, #14
 8004a76:	f107 020e 	add.w	r2, r7, #14
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	f082 0210 	eor.w	r2, r2, #16
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	f107 030e 	add.w	r3, r7, #14
 8004a86:	f107 020e 	add.w	r2, r7, #14
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	f082 0220 	eor.w	r2, r2, #32
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	1d3b      	adds	r3, r7, #4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	f107 030e 	add.w	r3, r7, #14
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]
 8004aba:	e3b5      	b.n	8005228 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004abc:	463b      	mov	r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	7b1b      	ldrb	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 8090 	bne.w	8004be8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ac8:	463b      	mov	r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d90e      	bls.n	8004af6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004ad8:	463b      	mov	r3, r7
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aec:	1ad2      	subs	r2, r2, r3
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	619a      	str	r2, [r3, #24]
 8004af4:	e008      	b.n	8004b08 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004af6:	463b      	mov	r3, r7
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004b00:	463b      	mov	r3, r7
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b20:	4413      	add	r3, r2
 8004b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b26:	463b      	mov	r3, r7
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b32:	4413      	add	r3, r2
 8004b34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <USB_EPStartXfer+0xb7e>
 8004b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e32c      	b.n	80051cc <USB_EPStartXfer+0x11d8>
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d818      	bhi.n	8004bac <USB_EPStartXfer+0xbb8>
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <USB_EPStartXfer+0xba6>
 8004b90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b94:	3301      	adds	r3, #1
 8004b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	e30f      	b.n	80051cc <USB_EPStartXfer+0x11d8>
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <USB_EPStartXfer+0xbd8>
 8004bc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004bcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	e2f1      	b.n	80051cc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004be8:	463b      	mov	r3, r7
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	78db      	ldrb	r3, [r3, #3]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	f040 818f 	bne.w	8004f12 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d175      	bne.n	8004cea <USB_EPStartXfer+0xcf6>
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c16:	4413      	add	r3, r2
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	011a      	lsls	r2, r3, #4
 8004c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c28:	4413      	add	r3, r2
 8004c2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c32:	463b      	mov	r3, r7
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <USB_EPStartXfer+0xc76>
 8004c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e065      	b.n	8004d36 <USB_EPStartXfer+0xd42>
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b3e      	cmp	r3, #62	; 0x3e
 8004c72:	d81a      	bhi.n	8004caa <USB_EPStartXfer+0xcb6>
 8004c74:	463b      	mov	r3, r7
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c80:	463b      	mov	r3, r7
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <USB_EPStartXfer+0xca4>
 8004c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e045      	b.n	8004d36 <USB_EPStartXfer+0xd42>
 8004caa:	463b      	mov	r3, r7
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USB_EPStartXfer+0xcda>
 8004cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	e025      	b.n	8004d36 <USB_EPStartXfer+0xd42>
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d120      	bne.n	8004d36 <USB_EPStartXfer+0xd42>
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	011a      	lsls	r2, r3, #4
 8004d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d1e:	4413      	add	r3, r2
 8004d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d28:	463b      	mov	r3, r7
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d3e:	463b      	mov	r3, r7
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d175      	bne.n	8004e34 <USB_EPStartXfer+0xe40>
 8004d48:	1d3b      	adds	r3, r7, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d60:	4413      	add	r3, r2
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d66:	463b      	mov	r3, r7
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	011a      	lsls	r2, r3, #4
 8004d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d72:	4413      	add	r3, r2
 8004d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d116      	bne.n	8004db4 <USB_EPStartXfer+0xdc0>
 8004d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e061      	b.n	8004e78 <USB_EPStartXfer+0xe84>
 8004db4:	463b      	mov	r3, r7
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b3e      	cmp	r3, #62	; 0x3e
 8004dbc:	d81a      	bhi.n	8004df4 <USB_EPStartXfer+0xe00>
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <USB_EPStartXfer+0xdee>
 8004dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	029b      	lsls	r3, r3, #10
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e041      	b.n	8004e78 <USB_EPStartXfer+0xe84>
 8004df4:	463b      	mov	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e00:	463b      	mov	r3, r7
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <USB_EPStartXfer+0xe24>
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e12:	3b01      	subs	r3, #1
 8004e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e021      	b.n	8004e78 <USB_EPStartXfer+0xe84>
 8004e34:	463b      	mov	r3, r7
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d11c      	bne.n	8004e78 <USB_EPStartXfer+0xe84>
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e4e:	4413      	add	r3, r2
 8004e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	011a      	lsls	r2, r3, #4
 8004e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e60:	4413      	add	r3, r2
 8004e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 81a4 	beq.w	80051cc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <USB_EPStartXfer+0xebc>
 8004ea4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10d      	bne.n	8004ecc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004eb0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8187 	bne.w	80051cc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ebe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 8180 	bne.w	80051cc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004ecc:	1d3b      	adds	r3, r7, #4
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	463b      	mov	r3, r7
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]
 8004f10:	e15c      	b.n	80051cc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 8155 	bne.w	80051c8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	463b      	mov	r3, r7
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d90e      	bls.n	8004f4c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	e008      	b.n	8004f5e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d16f      	bne.n	8005048 <USB_EPStartXfer+0x1054>
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f80:	4413      	add	r3, r2
 8004f82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f92:	4413      	add	r3, r2
 8004f94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <USB_EPStartXfer+0xfde>
 8004fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	e05f      	b.n	8005092 <USB_EPStartXfer+0x109e>
 8004fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd8:	d818      	bhi.n	800500c <USB_EPStartXfer+0x1018>
 8004fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <USB_EPStartXfer+0x1006>
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	b29a      	uxth	r2, r3
 8005004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e042      	b.n	8005092 <USB_EPStartXfer+0x109e>
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <USB_EPStartXfer+0x1038>
 8005022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005026:	3b01      	subs	r3, #1
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	b29b      	uxth	r3, r3
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e024      	b.n	8005092 <USB_EPStartXfer+0x109e>
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d11f      	bne.n	8005092 <USB_EPStartXfer+0x109e>
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005062:	b29b      	uxth	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800506a:	4413      	add	r3, r2
 800506c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	011a      	lsls	r2, r3, #4
 8005078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800507c:	4413      	add	r3, r2
 800507e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	b29a      	uxth	r2, r3
 800508c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d16f      	bne.n	8005184 <USB_EPStartXfer+0x1190>
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050bc:	4413      	add	r3, r2
 80050be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050ce:	4413      	add	r3, r2
 80050d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <USB_EPStartXfer+0x111a>
 80050e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e05e      	b.n	80051cc <USB_EPStartXfer+0x11d8>
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d818      	bhi.n	8005148 <USB_EPStartXfer+0x1154>
 8005116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <USB_EPStartXfer+0x1142>
 800512c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005130:	3301      	adds	r3, #1
 8005132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29a      	uxth	r2, r3
 8005140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e041      	b.n	80051cc <USB_EPStartXfer+0x11d8>
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <USB_EPStartXfer+0x1174>
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	3b01      	subs	r3, #1
 8005164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516c:	b29b      	uxth	r3, r3
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	b29b      	uxth	r3, r3
 8005172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517a:	b29a      	uxth	r2, r3
 800517c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e023      	b.n	80051cc <USB_EPStartXfer+0x11d8>
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11e      	bne.n	80051cc <USB_EPStartXfer+0x11d8>
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800519e:	4413      	add	r3, r2
 80051a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	011a      	lsls	r2, r3, #4
 80051ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051be:	b29a      	uxth	r2, r3
 80051c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e001      	b.n	80051cc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e02e      	b.n	800522a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80051ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80051ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80051f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80051fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	441a      	add	r2, r3
 8005210:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525c:	81bb      	strh	r3, [r7, #12]
 800525e:	89bb      	ldrh	r3, [r7, #12]
 8005260:	f083 0310 	eor.w	r3, r3, #16
 8005264:	81bb      	strh	r3, [r7, #12]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	89bb      	ldrh	r3, [r7, #12]
 8005272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
 8005286:	e01f      	b.n	80052c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	81fb      	strh	r3, [r7, #14]
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052a6:	81fb      	strh	r3, [r7, #14]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr

080052d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	7b1b      	ldrb	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 809d 	bne.w	8005422 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d04c      	beq.n	800538a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	823b      	strh	r3, [r7, #16]
 80052fe:	8a3b      	ldrh	r3, [r7, #16]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <USB_EPClearStall+0x6c>
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	81fb      	strh	r3, [r7, #14]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	89fb      	ldrh	r3, [r7, #14]
 800532c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800533c:	b29b      	uxth	r3, r3
 800533e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d06c      	beq.n	8005422 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535e:	81bb      	strh	r3, [r7, #12]
 8005360:	89bb      	ldrh	r3, [r7, #12]
 8005362:	f083 0320 	eor.w	r3, r3, #32
 8005366:	81bb      	strh	r3, [r7, #12]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	89bb      	ldrh	r3, [r7, #12]
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
 8005388:	e04b      	b.n	8005422 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	82fb      	strh	r3, [r7, #22]
 8005398:	8afb      	ldrh	r3, [r7, #22]
 800539a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01b      	beq.n	80053da <USB_EPClearStall+0x106>
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	82bb      	strh	r3, [r7, #20]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8abb      	ldrh	r3, [r7, #20]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	827b      	strh	r3, [r7, #18]
 80053f2:	8a7b      	ldrh	r3, [r7, #18]
 80053f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053f8:	827b      	strh	r3, [r7, #18]
 80053fa:	8a7b      	ldrh	r3, [r7, #18]
 80053fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005400:	827b      	strh	r3, [r7, #18]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	441a      	add	r2, r3
 800540c:	8a7b      	ldrh	r3, [r7, #18]
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d103      	bne.n	8005448 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800548a:	b29b      	uxth	r3, r3
 800548c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b08d      	sub	sp, #52	; 0x34
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	460b      	mov	r3, r1
 80054c0:	80fb      	strh	r3, [r7, #6]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054c6:	88bb      	ldrh	r3, [r7, #4]
 80054c8:	3301      	adds	r3, #1
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	005a      	lsls	r2, r3, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e8:	e01e      	b.n	8005528 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	3301      	adds	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	b29a      	uxth	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	3302      	adds	r3, #2
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	3302      	adds	r3, #2
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	3301      	adds	r3, #1
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	3b01      	subs	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1dd      	bne.n	80054ea <USB_WritePMA+0x3a>
  }
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	3734      	adds	r7, #52	; 0x34
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800553a:	b480      	push	{r7}
 800553c:	b08b      	sub	sp, #44	; 0x2c
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	4611      	mov	r1, r2
 8005546:	461a      	mov	r2, r3
 8005548:	460b      	mov	r3, r1
 800554a:	80fb      	strh	r3, [r7, #6]
 800554c:	4613      	mov	r3, r2
 800554e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005550:	88bb      	ldrh	r3, [r7, #4]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	b29b      	uxth	r3, r3
 8005556:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	005a      	lsls	r2, r3, #1
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	e01b      	b.n	80055ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	3302      	adds	r3, #2
 8005580:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b2da      	uxtb	r2, r3
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	3302      	adds	r3, #2
 80055a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	3b01      	subs	r3, #1
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e0      	bne.n	8005574 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80055b2:	88bb      	ldrh	r3, [r7, #4]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	701a      	strb	r2, [r3, #0]
  }
}
 80055ce:	bf00      	nop
 80055d0:	372c      	adds	r7, #44	; 0x2c
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80055e4:	2304      	movs	r3, #4
 80055e6:	2203      	movs	r2, #3
 80055e8:	2181      	movs	r1, #129	; 0x81
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f004 fbef 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80055f6:	2010      	movs	r0, #16
 80055f8:	f004 fcfe 	bl	8009ff8 <USBD_static_malloc>
 80055fc:	4602      	mov	r2, r0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800560e:	2302      	movs	r3, #2
 8005610:	e005      	b.n	800561e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	2200      	movs	r2, #0
 800561a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005632:	2181      	movs	r1, #129	; 0x81
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f004 fbf0 	bl	8009e1a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005650:	4618      	mov	r0, r3
 8005652:	f004 fcdd 	bl	800a010 <USBD_static_free>
    pdev->pClassData = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005678:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005692:	2b00      	cmp	r3, #0
 8005694:	d045      	beq.n	8005722 <USBD_HID_Setup+0xba>
 8005696:	2b20      	cmp	r3, #32
 8005698:	f040 80d3 	bne.w	8005842 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	3b02      	subs	r3, #2
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	d835      	bhi.n	8005712 <USBD_HID_Setup+0xaa>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <USBD_HID_Setup+0x44>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	08005703 	.word	0x08005703
 80056b0:	080056e3 	.word	0x080056e3
 80056b4:	08005713 	.word	0x08005713
 80056b8:	08005713 	.word	0x08005713
 80056bc:	08005713 	.word	0x08005713
 80056c0:	08005713 	.word	0x08005713
 80056c4:	08005713 	.word	0x08005713
 80056c8:	08005713 	.word	0x08005713
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056d5 	.word	0x080056d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	885b      	ldrh	r3, [r3, #2]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	601a      	str	r2, [r3, #0]
          break;
 80056e0:	e01e      	b.n	8005720 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2201      	movs	r2, #1
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 f944 	bl	8006976 <USBD_CtlSendData>
          break;
 80056ee:	e017      	b.n	8005720 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	885b      	ldrh	r3, [r3, #2]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]
          break;
 8005700:	e00e      	b.n	8005720 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3304      	adds	r3, #4
 8005706:	2201      	movs	r2, #1
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 f933 	bl	8006976 <USBD_CtlSendData>
          break;
 8005710:	e006      	b.n	8005720 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 f8c4 	bl	80068a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800571a:	2302      	movs	r3, #2
 800571c:	75fb      	strb	r3, [r7, #23]
          break;
 800571e:	bf00      	nop
      }
      break;
 8005720:	e096      	b.n	8005850 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b0b      	cmp	r3, #11
 8005728:	f200 8083 	bhi.w	8005832 <USBD_HID_Setup+0x1ca>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <USBD_HID_Setup+0xcc>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005765 	.word	0x08005765
 8005738:	08005833 	.word	0x08005833
 800573c:	08005833 	.word	0x08005833
 8005740:	08005833 	.word	0x08005833
 8005744:	08005833 	.word	0x08005833
 8005748:	08005833 	.word	0x08005833
 800574c:	0800578d 	.word	0x0800578d
 8005750:	08005833 	.word	0x08005833
 8005754:	08005833 	.word	0x08005833
 8005758:	08005833 	.word	0x08005833
 800575c:	080057e5 	.word	0x080057e5
 8005760:	0800580d 	.word	0x0800580d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800576a:	2b03      	cmp	r3, #3
 800576c:	d107      	bne.n	800577e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800576e:	f107 030e 	add.w	r3, r7, #14
 8005772:	2202      	movs	r2, #2
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 f8fd 	bl	8006976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800577c:	e060      	b.n	8005840 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 f88e 	bl	80068a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005786:	2302      	movs	r3, #2
 8005788:	75fb      	strb	r3, [r7, #23]
          break;
 800578a:	e059      	b.n	8005840 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	885b      	ldrh	r3, [r3, #2]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b22      	cmp	r3, #34	; 0x22
 8005796:	d108      	bne.n	80057aa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	88db      	ldrh	r3, [r3, #6]
 800579c:	2b3f      	cmp	r3, #63	; 0x3f
 800579e:	bf28      	it	cs
 80057a0:	233f      	movcs	r3, #63	; 0x3f
 80057a2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 80057a4:	4b2d      	ldr	r3, [pc, #180]	; (800585c <USBD_HID_Setup+0x1f4>)
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e015      	b.n	80057d6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	885b      	ldrh	r3, [r3, #2]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b21      	cmp	r3, #33	; 0x21
 80057b4:	d108      	bne.n	80057c8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <USBD_HID_Setup+0x1f8>)
 80057b8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	88db      	ldrh	r3, [r3, #6]
 80057be:	2b09      	cmp	r3, #9
 80057c0:	bf28      	it	cs
 80057c2:	2309      	movcs	r3, #9
 80057c4:	83fb      	strh	r3, [r7, #30]
 80057c6:	e006      	b.n	80057d6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 f869 	bl	80068a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80057d0:	2302      	movs	r3, #2
 80057d2:	75fb      	strb	r3, [r7, #23]
            break;
 80057d4:	e034      	b.n	8005840 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80057d6:	8bfb      	ldrh	r3, [r7, #30]
 80057d8:	461a      	mov	r2, r3
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 f8ca 	bl	8006976 <USBD_CtlSendData>
          break;
 80057e2:	e02d      	b.n	8005840 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d107      	bne.n	80057fe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3308      	adds	r3, #8
 80057f2:	2201      	movs	r2, #1
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 f8bd 	bl	8006976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057fc:	e020      	b.n	8005840 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 f84e 	bl	80068a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005806:	2302      	movs	r3, #2
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	e019      	b.n	8005840 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005812:	2b03      	cmp	r3, #3
 8005814:	d106      	bne.n	8005824 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	885b      	ldrh	r3, [r3, #2]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005822:	e00d      	b.n	8005840 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f83b 	bl	80068a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800582c:	2302      	movs	r3, #2
 800582e:	75fb      	strb	r3, [r7, #23]
          break;
 8005830:	e006      	b.n	8005840 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f834 	bl	80068a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800583a:	2302      	movs	r3, #2
 800583c:	75fb      	strb	r3, [r7, #23]
          break;
 800583e:	bf00      	nop
      }
      break;
 8005840:	e006      	b.n	8005850 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 f82c 	bl	80068a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800584a:	2302      	movs	r3, #2
 800584c:	75fb      	strb	r3, [r7, #23]
      break;
 800584e:	bf00      	nop
  }

  return ret;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200000c8 	.word	0x200000c8
 8005860:	200000b0 	.word	0x200000b0

08005864 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	2b03      	cmp	r3, #3
 8005882:	d10c      	bne.n	800589e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2201      	movs	r2, #1
 8005890:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	2181      	movs	r1, #129	; 0x81
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f004 fb66 	bl	8009f6a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2222      	movs	r2, #34	; 0x22
 80058b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000044 	.word	0x20000044

080058c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2222      	movs	r2, #34	; 0x22
 80058d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80058d6:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000068 	.word	0x20000068

080058e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2222      	movs	r2, #34	; 0x22
 80058f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80058f6:	4b03      	ldr	r3, [pc, #12]	; (8005904 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	2000008c 	.word	0x2000008c

08005908 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591a:	2200      	movs	r2, #0
 800591c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
	...

0800592c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	220a      	movs	r2, #10
 8005938:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800593a:	4b03      	ldr	r3, [pc, #12]	; (8005948 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	200000bc 	.word	0x200000bc

0800594c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005960:	2302      	movs	r3, #2
 8005962:	e01a      	b.n	800599a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	79fa      	ldrb	r2, [r7, #7]
 8005990:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f004 f9b8 	bl	8009d08 <USBD_LL_Init>

  return USBD_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d006      	beq.n	80059c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	e001      	b.n	80059c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80059c4:	2302      	movs	r3, #2
 80059c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f004 f9db 	bl	8009d98 <USBD_LL_Start>

  return USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	4611      	mov	r1, r2
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	4611      	mov	r1, r2
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3

  return USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fed7 	bl	800682a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d016      	beq.n	8005ace <USBD_LL_SetupStage+0x6a>
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d81c      	bhi.n	8005ade <USBD_LL_SetupStage+0x7a>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <USBD_LL_SetupStage+0x4a>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d008      	beq.n	8005abe <USBD_LL_SetupStage+0x5a>
 8005aac:	e017      	b.n	8005ade <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9ca 	bl	8005e50 <USBD_StdDevReq>
      break;
 8005abc:	e01a      	b.n	8005af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa2c 	bl	8005f24 <USBD_StdItfReq>
      break;
 8005acc:	e012      	b.n	8005af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa6c 	bl	8005fb4 <USBD_StdEPReq>
      break;
 8005adc:	e00a      	b.n	8005af4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f004 f9b3 	bl	8009e58 <USBD_LL_StallEP>
      break;
 8005af2:	bf00      	nop
  }

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	460b      	mov	r3, r1
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b0c:	7afb      	ldrb	r3, [r7, #11]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d14b      	bne.n	8005baa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d134      	bne.n	8005b8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d919      	bls.n	8005b64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	1ad2      	subs	r2, r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d203      	bcs.n	8005b52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	e002      	b.n	8005b58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 ff38 	bl	80069d2 <USBD_CtlContinueRx>
 8005b62:	e038      	b.n	8005bd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d105      	bne.n	8005b86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 ff35 	bl	80069f6 <USBD_CtlSendStatus>
 8005b8c:	e023      	b.n	8005bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b94:	2b05      	cmp	r3, #5
 8005b96:	d11e      	bne.n	8005bd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f004 f958 	bl	8009e58 <USBD_LL_StallEP>
 8005ba8:	e015      	b.n	8005bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00d      	beq.n	8005bd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d108      	bne.n	8005bd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	7afa      	ldrb	r2, [r7, #11]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	4798      	blx	r3
 8005bd0:	e001      	b.n	8005bd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e000      	b.n	8005bd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	460b      	mov	r3, r1
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d17f      	bne.n	8005cf4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d15c      	bne.n	8005cbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d915      	bls.n	8005c3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fec0 	bl	80069ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2200      	movs	r2, #0
 8005c32:	2100      	movs	r1, #0
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f004 f9bb 	bl	8009fb0 <USBD_LL_PrepareReceive>
 8005c3a:	e04e      	b.n	8005cda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	6912      	ldr	r2, [r2, #16]
 8005c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c48:	fb02 f201 	mul.w	r2, r2, r1
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11c      	bne.n	8005c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d316      	bcc.n	8005c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d20f      	bcs.n	8005c8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fe9c 	bl	80069ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f004 f993 	bl	8009fb0 <USBD_LL_PrepareReceive>
 8005c8a:	e026      	b.n	8005cda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d105      	bne.n	8005cae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005cae:	2180      	movs	r1, #128	; 0x80
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f004 f8d1 	bl	8009e58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 feb0 	bl	8006a1c <USBD_CtlReceiveStatus>
 8005cbc:	e00d      	b.n	8005cda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d004      	beq.n	8005cd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f004 f8bf 	bl	8009e58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11d      	bne.n	8005d20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fe81 	bl	80059ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005cf2:	e015      	b.n	8005d20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d108      	bne.n	8005d1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	7afa      	ldrb	r2, [r7, #11]
 8005d14:	4611      	mov	r1, r2
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	4798      	blx	r3
 8005d1a:	e001      	b.n	8005d20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e000      	b.n	8005d22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	2200      	movs	r2, #0
 8005d36:	2100      	movs	r1, #0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f004 f848 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2240      	movs	r2, #64	; 0x40
 8005d4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	2200      	movs	r2, #0
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f004 f83a 	bl	8009dce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6852      	ldr	r2, [r2, #4]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
  }

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2204      	movs	r2, #4
 8005de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d105      	bne.n	8005e10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d10b      	bne.n	8005e46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d005      	beq.n	8005e76 <USBD_StdDevReq+0x26>
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d84f      	bhi.n	8005f0e <USBD_StdDevReq+0xbe>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <USBD_StdDevReq+0x36>
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d14b      	bne.n	8005f0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
      break;
 8005e84:	e048      	b.n	8005f18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b09      	cmp	r3, #9
 8005e8c:	d839      	bhi.n	8005f02 <USBD_StdDevReq+0xb2>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <USBD_StdDevReq+0x44>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ee5 	.word	0x08005ee5
 8005e98:	08005ef9 	.word	0x08005ef9
 8005e9c:	08005f03 	.word	0x08005f03
 8005ea0:	08005eef 	.word	0x08005eef
 8005ea4:	08005f03 	.word	0x08005f03
 8005ea8:	08005ec7 	.word	0x08005ec7
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005f03 	.word	0x08005f03
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ed1 	.word	0x08005ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9dc 	bl	800627c <USBD_GetDescriptor>
          break;
 8005ec4:	e022      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb3f 	bl	800654c <USBD_SetAddress>
          break;
 8005ece:	e01d      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fb7e 	bl	80065d4 <USBD_SetConfig>
          break;
 8005ed8:	e018      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fc07 	bl	80066f0 <USBD_GetConfig>
          break;
 8005ee2:	e013      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fc37 	bl	800675a <USBD_GetStatus>
          break;
 8005eec:	e00e      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fc65 	bl	80067c0 <USBD_SetFeature>
          break;
 8005ef6:	e009      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc74 	bl	80067e8 <USBD_ClrFeature>
          break;
 8005f00:	e004      	b.n	8005f0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fccc 	bl	80068a2 <USBD_CtlError>
          break;
 8005f0a:	bf00      	nop
      }
      break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fcc6 	bl	80068a2 <USBD_CtlError>
      break;
 8005f16:	bf00      	nop
  }

  return ret;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d005      	beq.n	8005f4a <USBD_StdItfReq+0x26>
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d82e      	bhi.n	8005fa0 <USBD_StdItfReq+0x7c>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <USBD_StdItfReq+0x26>
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d12a      	bne.n	8005fa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	3b01      	subs	r3, #1
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d81d      	bhi.n	8005f92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	889b      	ldrh	r3, [r3, #4]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d813      	bhi.n	8005f88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	88db      	ldrh	r3, [r3, #6]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d110      	bne.n	8005f9c <USBD_StdItfReq+0x78>
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fd38 	bl	80069f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f86:	e009      	b.n	8005f9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fc89 	bl	80068a2 <USBD_CtlError>
          break;
 8005f90:	e004      	b.n	8005f9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fc84 	bl	80068a2 <USBD_CtlError>
          break;
 8005f9a:	e000      	b.n	8005f9e <USBD_StdItfReq+0x7a>
          break;
 8005f9c:	bf00      	nop
      }
      break;
 8005f9e:	e004      	b.n	8005faa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fc7d 	bl	80068a2 <USBD_CtlError>
      break;
 8005fa8:	bf00      	nop
  }

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	889b      	ldrh	r3, [r3, #4]
 8005fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d007      	beq.n	8005fe4 <USBD_StdEPReq+0x30>
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	f200 8146 	bhi.w	8006266 <USBD_StdEPReq+0x2b2>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <USBD_StdEPReq+0x40>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	f040 8141 	bne.w	8006266 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
      break;
 8005ff2:	e13d      	b.n	8006270 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d10a      	bne.n	8006016 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
 800600e:	4603      	mov	r3, r0
 8006010:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	e12d      	b.n	8006272 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d007      	beq.n	800602e <USBD_StdEPReq+0x7a>
 800601e:	2b03      	cmp	r3, #3
 8006020:	f300 811b 	bgt.w	800625a <USBD_StdEPReq+0x2a6>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d072      	beq.n	800610e <USBD_StdEPReq+0x15a>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d03a      	beq.n	80060a2 <USBD_StdEPReq+0xee>
 800602c:	e115      	b.n	800625a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	2b02      	cmp	r3, #2
 8006036:	d002      	beq.n	800603e <USBD_StdEPReq+0x8a>
 8006038:	2b03      	cmp	r3, #3
 800603a:	d015      	beq.n	8006068 <USBD_StdEPReq+0xb4>
 800603c:	e02b      	b.n	8006096 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00c      	beq.n	800605e <USBD_StdEPReq+0xaa>
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b80      	cmp	r3, #128	; 0x80
 8006048:	d009      	beq.n	800605e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f003 ff02 	bl	8009e58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f003 fefe 	bl	8009e58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800605c:	e020      	b.n	80060a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fc1e 	bl	80068a2 <USBD_CtlError>
              break;
 8006066:	e01b      	b.n	80060a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	885b      	ldrh	r3, [r3, #2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10e      	bne.n	800608e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <USBD_StdEPReq+0xda>
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d008      	beq.n	800608e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	88db      	ldrh	r3, [r3, #6]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f003 fee5 	bl	8009e58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fcb1 	bl	80069f6 <USBD_CtlSendStatus>

              break;
 8006094:	e004      	b.n	80060a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc02 	bl	80068a2 <USBD_CtlError>
              break;
 800609e:	bf00      	nop
          }
          break;
 80060a0:	e0e0      	b.n	8006264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d002      	beq.n	80060b2 <USBD_StdEPReq+0xfe>
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d015      	beq.n	80060dc <USBD_StdEPReq+0x128>
 80060b0:	e026      	b.n	8006100 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00c      	beq.n	80060d2 <USBD_StdEPReq+0x11e>
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d009      	beq.n	80060d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f003 fec8 	bl	8009e58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f003 fec4 	bl	8009e58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d0:	e01c      	b.n	800610c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fbe4 	bl	80068a2 <USBD_CtlError>
              break;
 80060da:	e017      	b.n	800610c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d112      	bne.n	800610a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f003 fecf 	bl	8009e96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fc7c 	bl	80069f6 <USBD_CtlSendStatus>
              }
              break;
 80060fe:	e004      	b.n	800610a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fbcd 	bl	80068a2 <USBD_CtlError>
              break;
 8006108:	e000      	b.n	800610c <USBD_StdEPReq+0x158>
              break;
 800610a:	bf00      	nop
          }
          break;
 800610c:	e0aa      	b.n	8006264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006114:	2b02      	cmp	r3, #2
 8006116:	d002      	beq.n	800611e <USBD_StdEPReq+0x16a>
 8006118:	2b03      	cmp	r3, #3
 800611a:	d032      	beq.n	8006182 <USBD_StdEPReq+0x1ce>
 800611c:	e097      	b.n	800624e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <USBD_StdEPReq+0x180>
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d004      	beq.n	8006134 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fbb8 	bl	80068a2 <USBD_CtlError>
                break;
 8006132:	e091      	b.n	8006258 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006138:	2b00      	cmp	r3, #0
 800613a:	da0b      	bge.n	8006154 <USBD_StdEPReq+0x1a0>
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	3310      	adds	r3, #16
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	e00b      	b.n	800616c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2202      	movs	r2, #2
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fbfb 	bl	8006976 <USBD_CtlSendData>
              break;
 8006180:	e06a      	b.n	8006258 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da11      	bge.n	80061ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	f003 020f 	and.w	r2, r3, #15
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	3318      	adds	r3, #24
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d117      	bne.n	80061d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb7b 	bl	80068a2 <USBD_CtlError>
                  break;
 80061ac:	e054      	b.n	8006258 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061ae:	7bbb      	ldrb	r3, [r7, #14]
 80061b0:	f003 020f 	and.w	r2, r3, #15
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb68 	bl	80068a2 <USBD_CtlError>
                  break;
 80061d2:	e041      	b.n	8006258 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da0b      	bge.n	80061f4 <USBD_StdEPReq+0x240>
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	3310      	adds	r3, #16
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	3304      	adds	r3, #4
 80061f2:	e00b      	b.n	800620c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	3304      	adds	r3, #4
 800620c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <USBD_StdEPReq+0x266>
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d103      	bne.n	8006222 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e00e      	b.n	8006240 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f003 fe54 	bl	8009ed4 <USBD_LL_IsStallEP>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e002      	b.n	8006240 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2202      	movs	r2, #2
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb95 	bl	8006976 <USBD_CtlSendData>
              break;
 800624c:	e004      	b.n	8006258 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb26 	bl	80068a2 <USBD_CtlError>
              break;
 8006256:	bf00      	nop
          }
          break;
 8006258:	e004      	b.n	8006264 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb20 	bl	80068a2 <USBD_CtlError>
          break;
 8006262:	bf00      	nop
      }
      break;
 8006264:	e004      	b.n	8006270 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb1a 	bl	80068a2 <USBD_CtlError>
      break;
 800626e:	bf00      	nop
  }

  return ret;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	2b06      	cmp	r3, #6
 800629e:	f200 8128 	bhi.w	80064f2 <USBD_GetDescriptor+0x276>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <USBD_GetDescriptor+0x2c>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080064f3 	.word	0x080064f3
 80062b8:	080064f3 	.word	0x080064f3
 80062bc:	08006493 	.word	0x08006493
 80062c0:	080064bf 	.word	0x080064bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	7c12      	ldrb	r2, [r2, #16]
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
      break;
 80062da:	e112      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7c1b      	ldrb	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f107 0208 	add.w	r2, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3301      	adds	r3, #1
 80062fa:	2202      	movs	r2, #2
 80062fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062fe:	e100      	b.n	8006502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f107 0208 	add.w	r2, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	2202      	movs	r2, #2
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e0f2      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	885b      	ldrh	r3, [r3, #2]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b05      	cmp	r3, #5
 8006324:	f200 80ac 	bhi.w	8006480 <USBD_GetDescriptor+0x204>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USBD_GetDescriptor+0xb4>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006349 	.word	0x08006349
 8006334:	0800637d 	.word	0x0800637d
 8006338:	080063b1 	.word	0x080063b1
 800633c:	080063e5 	.word	0x080063e5
 8006340:	08006419 	.word	0x08006419
 8006344:	0800644d 	.word	0x0800644d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636a:	e091      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa97 	bl	80068a2 <USBD_CtlError>
            err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
          break;
 800637a:	e089      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639e:	e077      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa7d 	bl	80068a2 <USBD_CtlError>
            err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
          break;
 80063ae:	e06f      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d2:	e05d      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa63 	bl	80068a2 <USBD_CtlError>
            err++;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	3301      	adds	r3, #1
 80063e0:	72fb      	strb	r3, [r7, #11]
          break;
 80063e2:	e055      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	7c12      	ldrb	r2, [r2, #16]
 80063fc:	f107 0108 	add.w	r1, r7, #8
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006406:	e043      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa49 	bl	80068a2 <USBD_CtlError>
            err++;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	3301      	adds	r3, #1
 8006414:	72fb      	strb	r3, [r7, #11]
          break;
 8006416:	e03b      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643a:	e029      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa2f 	bl	80068a2 <USBD_CtlError>
            err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
          break;
 800644a:	e021      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7c12      	ldrb	r2, [r2, #16]
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646e:	e00f      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa15 	bl	80068a2 <USBD_CtlError>
            err++;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3301      	adds	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]
          break;
 800647e:	e007      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa0d 	bl	80068a2 <USBD_CtlError>
          err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800648e:	e038      	b.n	8006502 <USBD_GetDescriptor+0x286>
 8006490:	e037      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7c1b      	ldrb	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f107 0208 	add.w	r2, r7, #8
 80064a6:	4610      	mov	r0, r2
 80064a8:	4798      	blx	r3
 80064aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ac:	e029      	b.n	8006502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9f6 	bl	80068a2 <USBD_CtlError>
        err++;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	3301      	adds	r3, #1
 80064ba:	72fb      	strb	r3, [r7, #11]
      break;
 80064bc:	e021      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7c1b      	ldrb	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10d      	bne.n	80064e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f107 0208 	add.w	r2, r7, #8
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
 80064d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	2207      	movs	r2, #7
 80064de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064e0:	e00f      	b.n	8006502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9dc 	bl	80068a2 <USBD_CtlError>
        err++;
 80064ea:	7afb      	ldrb	r3, [r7, #11]
 80064ec:	3301      	adds	r3, #1
 80064ee:	72fb      	strb	r3, [r7, #11]
      break;
 80064f0:	e007      	b.n	8006502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9d4 	bl	80068a2 <USBD_CtlError>
      err++;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	3301      	adds	r3, #1
 80064fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006500:	bf00      	nop
  }

  if (err != 0U)
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11c      	bne.n	8006542 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <USBD_GetDescriptor+0x2b6>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88db      	ldrh	r3, [r3, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88da      	ldrh	r2, [r3, #6]
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	4293      	cmp	r3, r2
 800651e:	bf28      	it	cs
 8006520:	4613      	movcs	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	461a      	mov	r2, r3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa22 	bl	8006976 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa5b 	bl	80069f6 <USBD_CtlSendStatus>
 8006540:	e000      	b.n	8006544 <USBD_GetDescriptor+0x2c8>
    return;
 8006542:	bf00      	nop
    }
  }
}
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop

0800654c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d130      	bne.n	80065c0 <USBD_SetAddress+0x74>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	88db      	ldrh	r3, [r3, #6]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d12c      	bne.n	80065c0 <USBD_SetAddress+0x74>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d828      	bhi.n	80065c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006580:	2b03      	cmp	r3, #3
 8006582:	d104      	bne.n	800658e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f98b 	bl	80068a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658c:	e01d      	b.n	80065ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f003 fcc6 	bl	8009f2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa28 	bl	80069f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b4:	e009      	b.n	80065ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065be:	e004      	b.n	80065ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f96d 	bl	80068a2 <USBD_CtlError>
  }
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b41      	ldr	r3, [pc, #260]	; (80066ec <USBD_SetConfig+0x118>)
 80065e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065e8:	4b40      	ldr	r3, [pc, #256]	; (80066ec <USBD_SetConfig+0x118>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d904      	bls.n	80065fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f955 	bl	80068a2 <USBD_CtlError>
 80065f8:	e075      	b.n	80066e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006600:	2b02      	cmp	r3, #2
 8006602:	d002      	beq.n	800660a <USBD_SetConfig+0x36>
 8006604:	2b03      	cmp	r3, #3
 8006606:	d023      	beq.n	8006650 <USBD_SetConfig+0x7c>
 8006608:	e062      	b.n	80066d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800660a:	4b38      	ldr	r3, [pc, #224]	; (80066ec <USBD_SetConfig+0x118>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01a      	beq.n	8006648 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006612:	4b36      	ldr	r3, [pc, #216]	; (80066ec <USBD_SetConfig+0x118>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2203      	movs	r2, #3
 8006620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006624:	4b31      	ldr	r3, [pc, #196]	; (80066ec <USBD_SetConfig+0x118>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff f9e8 	bl	8005a00 <USBD_SetClassConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	2b02      	cmp	r3, #2
 8006634:	d104      	bne.n	8006640 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f932 	bl	80068a2 <USBD_CtlError>
            return;
 800663e:	e052      	b.n	80066e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9d8 	bl	80069f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006646:	e04e      	b.n	80066e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f9d4 	bl	80069f6 <USBD_CtlSendStatus>
        break;
 800664e:	e04a      	b.n	80066e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006650:	4b26      	ldr	r3, [pc, #152]	; (80066ec <USBD_SetConfig+0x118>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d112      	bne.n	800667e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006660:	4b22      	ldr	r3, [pc, #136]	; (80066ec <USBD_SetConfig+0x118>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800666a:	4b20      	ldr	r3, [pc, #128]	; (80066ec <USBD_SetConfig+0x118>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f9e4 	bl	8005a3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9bd 	bl	80069f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800667c:	e033      	b.n	80066e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800667e:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <USBD_SetConfig+0x118>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d01d      	beq.n	80066c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff f9d2 	bl	8005a3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <USBD_SetConfig+0x118>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <USBD_SetConfig+0x118>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff f9a8 	bl	8005a00 <USBD_SetClassConfig>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d104      	bne.n	80066c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8f2 	bl	80068a2 <USBD_CtlError>
            return;
 80066be:	e012      	b.n	80066e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f998 	bl	80069f6 <USBD_CtlSendStatus>
        break;
 80066c6:	e00e      	b.n	80066e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f994 	bl	80069f6 <USBD_CtlSendStatus>
        break;
 80066ce:	e00a      	b.n	80066e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8e5 	bl	80068a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <USBD_SetConfig+0x118>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff f9ad 	bl	8005a3e <USBD_ClrClassConfig>
        break;
 80066e4:	bf00      	nop
    }
  }
}
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200002a8 	.word	0x200002a8

080066f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	88db      	ldrh	r3, [r3, #6]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d004      	beq.n	800670c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f8cc 	bl	80068a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800670a:	e022      	b.n	8006752 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006712:	2b02      	cmp	r3, #2
 8006714:	dc02      	bgt.n	800671c <USBD_GetConfig+0x2c>
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc03      	bgt.n	8006722 <USBD_GetConfig+0x32>
 800671a:	e015      	b.n	8006748 <USBD_GetConfig+0x58>
 800671c:	2b03      	cmp	r3, #3
 800671e:	d00b      	beq.n	8006738 <USBD_GetConfig+0x48>
 8006720:	e012      	b.n	8006748 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3308      	adds	r3, #8
 800672c:	2201      	movs	r2, #1
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f920 	bl	8006976 <USBD_CtlSendData>
        break;
 8006736:	e00c      	b.n	8006752 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	2201      	movs	r2, #1
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f918 	bl	8006976 <USBD_CtlSendData>
        break;
 8006746:	e004      	b.n	8006752 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8a9 	bl	80068a2 <USBD_CtlError>
        break;
 8006750:	bf00      	nop
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676a:	3b01      	subs	r3, #1
 800676c:	2b02      	cmp	r3, #2
 800676e:	d81e      	bhi.n	80067ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d004      	beq.n	8006782 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f891 	bl	80068a2 <USBD_CtlError>
        break;
 8006780:	e01a      	b.n	80067b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f043 0202 	orr.w	r2, r3, #2
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	330c      	adds	r3, #12
 80067a2:	2202      	movs	r2, #2
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8e5 	bl	8006976 <USBD_CtlSendData>
      break;
 80067ac:	e004      	b.n	80067b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f876 	bl	80068a2 <USBD_CtlError>
      break;
 80067b6:	bf00      	nop
  }
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	885b      	ldrh	r3, [r3, #2]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d106      	bne.n	80067e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f90b 	bl	80069f6 <USBD_CtlSendStatus>
  }
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f8:	3b01      	subs	r3, #1
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d80b      	bhi.n	8006816 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10c      	bne.n	8006820 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f8f1 	bl	80069f6 <USBD_CtlSendStatus>
      }
      break;
 8006814:	e004      	b.n	8006820 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f842 	bl	80068a2 <USBD_CtlError>
      break;
 800681e:	e000      	b.n	8006822 <USBD_ClrFeature+0x3a>
      break;
 8006820:	bf00      	nop
  }
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785a      	ldrb	r2, [r3, #1]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	3302      	adds	r3, #2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	b29a      	uxth	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	3303      	adds	r3, #3
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	b29b      	uxth	r3, r3
 8006858:	4413      	add	r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	3304      	adds	r3, #4
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b29a      	uxth	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	3305      	adds	r3, #5
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	b29b      	uxth	r3, r3
 8006874:	4413      	add	r3, r2
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	3306      	adds	r3, #6
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b29a      	uxth	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	3307      	adds	r3, #7
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	b29b      	uxth	r3, r3
 8006890:	4413      	add	r3, r2
 8006892:	b29a      	uxth	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	80da      	strh	r2, [r3, #6]

}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80068ac:	2180      	movs	r1, #128	; 0x80
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f003 fad2 	bl	8009e58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80068b4:	2100      	movs	r1, #0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f003 face 	bl	8009e58 <USBD_LL_StallEP>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d032      	beq.n	8006940 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f834 	bl	8006948 <USBD_GetLen>
 80068e0:	4603      	mov	r3, r0
 80068e2:	3301      	adds	r3, #1
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	75fa      	strb	r2, [r7, #23]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4413      	add	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	7812      	ldrb	r2, [r2, #0]
 80068fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	75fa      	strb	r2, [r7, #23]
 8006906:	461a      	mov	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	2203      	movs	r2, #3
 800690e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006910:	e012      	b.n	8006938 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	60fa      	str	r2, [r7, #12]
 8006918:	7dfa      	ldrb	r2, [r7, #23]
 800691a:	1c51      	adds	r1, r2, #1
 800691c:	75f9      	strb	r1, [r7, #23]
 800691e:	4611      	mov	r1, r2
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	440a      	add	r2, r1
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	75fa      	strb	r2, [r7, #23]
 800692e:	461a      	mov	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4413      	add	r3, r2
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e8      	bne.n	8006912 <USBD_GetString+0x4e>
    }
  }
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006954:	e005      	b.n	8006962 <USBD_GetLen+0x1a>
  {
    len++;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	3301      	adds	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3301      	adds	r3, #1
 8006960:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f5      	bne.n	8006956 <USBD_GetLen+0xe>
  }

  return len;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	4613      	mov	r3, r2
 8006982:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2202      	movs	r2, #2
 8006988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800698c:	88fa      	ldrh	r2, [r7, #6]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	2100      	movs	r1, #0
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f003 fae3 	bl	8009f6a <USBD_LL_Transmit>

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	4613      	mov	r3, r2
 80069ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	2100      	movs	r1, #0
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f003 fad1 	bl	8009f6a <USBD_LL_Transmit>

  return USBD_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069e0:	88fb      	ldrh	r3, [r7, #6]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	2100      	movs	r1, #0
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f003 fae2 	bl	8009fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2204      	movs	r2, #4
 8006a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a06:	2300      	movs	r3, #0
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f003 faac 	bl	8009f6a <USBD_LL_Transmit>

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2205      	movs	r2, #5
 8006a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2100      	movs	r1, #0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f003 fabc 	bl	8009fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a4a:	f3ef 8305 	mrs	r3, IPSR
 8006a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a56:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <osKernelInitialize+0x32>
 8006a62:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <osKernelInitialize+0x60>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d109      	bne.n	8006a7e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a76:	f06f 0305 	mvn.w	r3, #5
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e00c      	b.n	8006a98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <osKernelInitialize+0x60>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006a86:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <osKernelInitialize+0x60>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e002      	b.n	8006a98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a98:	68fb      	ldr	r3, [r7, #12]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr
 8006aa4:	200002ac 	.word	0x200002ac

08006aa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10f      	bne.n	8006ada <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aba:	f3ef 8310 	mrs	r3, PRIMASK
 8006abe:	607b      	str	r3, [r7, #4]
  return(result);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <osKernelStart+0x32>
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <osKernelStart+0x64>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d109      	bne.n	8006ae2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ace:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006ada:	f06f 0305 	mvn.w	r3, #5
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e00e      	b.n	8006b00 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <osKernelStart+0x64>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d107      	bne.n	8006afa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <osKernelStart+0x64>)
 8006aec:	2202      	movs	r2, #2
 8006aee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006af0:	f001 fb0e 	bl	8008110 <vTaskStartScheduler>
      stat = osOK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e002      	b.n	8006b00 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
 8006afe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200002ac 	.word	0x200002ac

08006b10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b092      	sub	sp, #72	; 0x48
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b20:	f3ef 8305 	mrs	r3, IPSR
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 8094 	bne.w	8006c56 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b32:	623b      	str	r3, [r7, #32]
  return(result);
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 808d 	bne.w	8006c56 <osThreadNew+0x146>
 8006b3c:	4b48      	ldr	r3, [pc, #288]	; (8006c60 <osThreadNew+0x150>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d106      	bne.n	8006b52 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b44:	f3ef 8311 	mrs	r3, BASEPRI
 8006b48:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f040 8082 	bne.w	8006c56 <osThreadNew+0x146>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d07e      	beq.n	8006c56 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006b58:	2380      	movs	r3, #128	; 0x80
 8006b5a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b5c:	2318      	movs	r3, #24
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b60:	2300      	movs	r3, #0
 8006b62:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b64:	f107 031b 	add.w	r3, r7, #27
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d045      	beq.n	8006c02 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <osThreadNew+0x74>
        name = attr->name;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <osThreadNew+0x9a>
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	2b38      	cmp	r3, #56	; 0x38
 8006b9c:	d805      	bhi.n	8006baa <osThreadNew+0x9a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <osThreadNew+0x9e>
        return (NULL);
 8006baa:	2300      	movs	r3, #0
 8006bac:	e054      	b.n	8006c58 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	089b      	lsrs	r3, r3, #2
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <osThreadNew+0xd4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b5b      	cmp	r3, #91	; 0x5b
 8006bcc:	d90a      	bls.n	8006be4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d006      	beq.n	8006be4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <osThreadNew+0xd4>
        mem = 1;
 8006bde:	2301      	movs	r3, #1
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be2:	e010      	b.n	8006c06 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10c      	bne.n	8006c06 <osThreadNew+0xf6>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d108      	bne.n	8006c06 <osThreadNew+0xf6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <osThreadNew+0xf6>
          mem = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c00:	e001      	b.n	8006c06 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d110      	bne.n	8006c2e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f001 f8a8 	bl	8007d78 <xTaskCreateStatic>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e013      	b.n	8006c56 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d110      	bne.n	8006c56 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f107 0314 	add.w	r3, r7, #20
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f001 f8f2 	bl	8007e30 <xTaskCreate>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d001      	beq.n	8006c56 <osThreadNew+0x146>
          hTask = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c56:	697b      	ldr	r3, [r7, #20]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3738      	adds	r7, #56	; 0x38
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	200002ac 	.word	0x200002ac

08006c64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6c:	f3ef 8305 	mrs	r3, IPSR
 8006c70:	613b      	str	r3, [r7, #16]
  return(result);
 8006c72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10f      	bne.n	8006c98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c78:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <osDelay+0x34>
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <osDelay+0x58>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d109      	bne.n	8006ca0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <osDelay+0x3c>
    stat = osErrorISR;
 8006c98:	f06f 0305 	mvn.w	r3, #5
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e007      	b.n	8006cb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f9fc 	bl	80080a8 <vTaskDelay>
    }
  }

  return (stat);
 8006cb0:	697b      	ldr	r3, [r7, #20]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200002ac 	.word	0x200002ac

08006cc0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08c      	sub	sp, #48	; 0x30
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd0:	f3ef 8305 	mrs	r3, IPSR
 8006cd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cd6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d16f      	bne.n	8006dbc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d169      	bne.n	8006dbc <osMessageQueueNew+0xfc>
 8006ce8:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <osMessageQueueNew+0x108>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d105      	bne.n	8006cfc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d15f      	bne.n	8006dbc <osMessageQueueNew+0xfc>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d05c      	beq.n	8006dbc <osMessageQueueNew+0xfc>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d059      	beq.n	8006dbc <osMessageQueueNew+0xfc>
    mem = -1;
 8006d08:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d029      	beq.n	8006d68 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d012      	beq.n	8006d42 <osMessageQueueNew+0x82>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	2b4f      	cmp	r3, #79	; 0x4f
 8006d22:	d90e      	bls.n	8006d42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695a      	ldr	r2, [r3, #20]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d302      	bcc.n	8006d42 <osMessageQueueNew+0x82>
        mem = 1;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	e014      	b.n	8006d6c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d110      	bne.n	8006d6c <osMessageQueueNew+0xac>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10c      	bne.n	8006d6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d108      	bne.n	8006d6c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <osMessageQueueNew+0xac>
          mem = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	e001      	b.n	8006d6c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10b      	bne.n	8006d8a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	9100      	str	r1, [sp, #0]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fa85 	bl	8007290 <xQueueGenericCreateStatic>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24
 8006d88:	e008      	b.n	8006d9c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006d90:	2200      	movs	r2, #0
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 faf2 	bl	800737e <xQueueGenericCreate>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	e001      	b.n	8006db4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006db4:	69f9      	ldr	r1, [r7, #28]
 8006db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006db8:	f000 ff82 	bl	8007cc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3728      	adds	r7, #40	; 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200002ac 	.word	0x200002ac

08006dcc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de4:	f3ef 8305 	mrs	r3, IPSR
 8006de8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006dea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10f      	bne.n	8006e10 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df0:	f3ef 8310 	mrs	r3, PRIMASK
 8006df4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <osMessageQueuePut+0x44>
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <osMessageQueuePut+0xe0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d12e      	bne.n	8006e62 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e04:	f3ef 8311 	mrs	r3, BASEPRI
 8006e08:	617b      	str	r3, [r7, #20]
  return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d028      	beq.n	8006e62 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <osMessageQueuePut+0x56>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <osMessageQueuePut+0x56>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006e22:	f06f 0303 	mvn.w	r3, #3
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e28:	e039      	b.n	8006e9e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e2e:	f107 0210 	add.w	r2, r7, #16
 8006e32:	2300      	movs	r3, #0
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	6a38      	ldr	r0, [r7, #32]
 8006e38:	f000 fc00 	bl	800763c <xQueueGenericSendFromISR>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006e42:	f06f 0302 	mvn.w	r3, #2
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e48:	e029      	b.n	8006e9e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d026      	beq.n	8006e9e <osMessageQueuePut+0xd2>
 8006e50:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <osMessageQueuePut+0xe4>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e60:	e01d      	b.n	8006e9e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <osMessageQueuePut+0xa2>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006e6e:	f06f 0303 	mvn.w	r3, #3
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	e014      	b.n	8006ea0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e76:	2300      	movs	r3, #0
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	6a38      	ldr	r0, [r7, #32]
 8006e7e:	f000 fadf 	bl	8007440 <xQueueGenericSend>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d00b      	beq.n	8006ea0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006e8e:	f06f 0301 	mvn.w	r3, #1
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	e004      	b.n	8006ea0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006e96:	f06f 0302 	mvn.w	r3, #2
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9c:	e000      	b.n	8006ea0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3728      	adds	r7, #40	; 0x28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200002ac 	.word	0x200002ac
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ed0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10f      	bne.n	8006ef6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eda:	61bb      	str	r3, [r7, #24]
  return(result);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <osMessageQueueGet+0x42>
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <osMessageQueueGet+0xdc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d12e      	bne.n	8006f48 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eea:	f3ef 8311 	mrs	r3, BASEPRI
 8006eee:	617b      	str	r3, [r7, #20]
  return(result);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d028      	beq.n	8006f48 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <osMessageQueueGet+0x54>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <osMessageQueueGet+0x54>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006f08:	f06f 0303 	mvn.w	r3, #3
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f0e:	e038      	b.n	8006f82 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	6a38      	ldr	r0, [r7, #32]
 8006f1e:	f000 fd05 	bl	800792c <xQueueReceiveFromISR>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d003      	beq.n	8006f30 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006f28:	f06f 0302 	mvn.w	r3, #2
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f2e:	e028      	b.n	8006f82 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d025      	beq.n	8006f82 <osMessageQueueGet+0xce>
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <osMessageQueueGet+0xe0>)
 8006f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f46:	e01c      	b.n	8006f82 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <osMessageQueueGet+0xa0>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006f54:	f06f 0303 	mvn.w	r3, #3
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
 8006f5a:	e013      	b.n	8006f84 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	6a38      	ldr	r0, [r7, #32]
 8006f62:	f000 fc03 	bl	800776c <xQueueReceive>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d00b      	beq.n	8006f84 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006f72:	f06f 0301 	mvn.w	r3, #1
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
 8006f78:	e004      	b.n	8006f84 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006f7a:	f06f 0302 	mvn.w	r3, #2
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f80:	e000      	b.n	8006f84 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f82:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3728      	adds	r7, #40	; 0x28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200002ac 	.word	0x200002ac
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	e01e      	b.n	8006fee <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fb0:	f3ef 8305 	mrs	r3, IPSR
 8006fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10f      	bne.n	8006fdc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d109      	bne.n	8006fdc <osMessageQueueGetCount+0x44>
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <osMessageQueueGetCount+0x60>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d10a      	bne.n	8006fe6 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006fdc:	69b8      	ldr	r0, [r7, #24]
 8006fde:	f000 fd43 	bl	8007a68 <uxQueueMessagesWaitingFromISR>
 8006fe2:	61f8      	str	r0, [r7, #28]
 8006fe4:	e003      	b.n	8006fee <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f000 fd20 	bl	8007a2c <uxQueueMessagesWaiting>
 8006fec:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006fee:	69fb      	ldr	r3, [r7, #28]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	200002ac 	.word	0x200002ac

08006ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a06      	ldr	r2, [pc, #24]	; (8007024 <vApplicationGetIdleTaskMemory+0x28>)
 800700c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a05      	ldr	r2, [pc, #20]	; (8007028 <vApplicationGetIdleTaskMemory+0x2c>)
 8007012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2280      	movs	r2, #128	; 0x80
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	200002b0 	.word	0x200002b0
 8007028:	2000030c 	.word	0x2000030c

0800702c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <vApplicationGetTimerTaskMemory+0x2c>)
 800703c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <vApplicationGetTimerTaskMemory+0x30>)
 8007042:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	2000050c 	.word	0x2000050c
 800705c:	20000568 	.word	0x20000568

08007060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f103 0208 	add.w	r2, r3, #8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f103 0208 	add.w	r2, r3, #8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f103 0208 	add.w	r2, r3, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr

080070b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	601a      	str	r2, [r3, #0]
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr

080070fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d103      	bne.n	800711c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e00c      	b.n	8007136 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3308      	adds	r3, #8
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e002      	b.n	800712a <vListInsert+0x2e>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d2f6      	bcs.n	8007124 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d103      	bne.n	80071a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
	...

080071c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071ea:	f002 f8bf 	bl	800936c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	441a      	add	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	3b01      	subs	r3, #1
 800721c:	68f9      	ldr	r1, [r7, #12]
 800721e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d114      	bne.n	800726a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f9e9 	bl	8008624 <xTaskRemoveFromEventList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d012      	beq.n	800727e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <xQueueGenericReset+0xcc>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	e009      	b.n	800727e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fef6 	bl	8007060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fef1 	bl	8007060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800727e:	f002 f8a5 	bl	80093cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007282:	2301      	movs	r3, #1
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <xQueueGenericCreateStatic+0x52>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <xQueueGenericCreateStatic+0x56>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <xQueueGenericCreateStatic+0x58>
 80072e6:	2300      	movs	r3, #0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	623b      	str	r3, [r7, #32]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <xQueueGenericCreateStatic+0x7e>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <xQueueGenericCreateStatic+0x82>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <xQueueGenericCreateStatic+0x84>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61fb      	str	r3, [r7, #28]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800732e:	2350      	movs	r3, #80	; 0x50
 8007330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b50      	cmp	r3, #80	; 0x50
 8007336:	d00a      	beq.n	800734e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007360:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f843 	bl	80073fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007376:	4618      	mov	r0, r3
 8007378:	3730      	adds	r7, #48	; 0x30
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800737e:	b580      	push	{r7, lr}
 8007380:	b08a      	sub	sp, #40	; 0x28
 8007382:	af02      	add	r7, sp, #8
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	4613      	mov	r3, r2
 800738a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	613b      	str	r3, [r7, #16]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e004      	b.n	80073be <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	3350      	adds	r3, #80	; 0x50
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 f8d2 	bl	800956c <pvPortMalloc>
 80073c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00f      	beq.n	80073f0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	3350      	adds	r3, #80	; 0x50
 80073d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073de:	79fa      	ldrb	r2, [r7, #7]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f805 	bl	80073fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073f0:	69bb      	ldr	r3, [r7, #24]
	}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e002      	b.n	800741c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007428:	2101      	movs	r1, #1
 800742a:	69b8      	ldr	r0, [r7, #24]
 800742c:	f7ff fec8 	bl	80071c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	; 0x38
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueGenericSend+0x32>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <xQueueGenericSend+0x40>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <xQueueGenericSend+0x44>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <xQueueGenericSend+0x46>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <xQueueGenericSend+0x60>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d103      	bne.n	80074ae <xQueueGenericSend+0x6e>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <xQueueGenericSend+0x72>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <xQueueGenericSend+0x74>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xQueueGenericSend+0x8e>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	623b      	str	r3, [r7, #32]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ce:	f001 fa6b 	bl	80089a8 <xTaskGetSchedulerState>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <xQueueGenericSend+0x9e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <xQueueGenericSend+0xa2>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <xQueueGenericSend+0xa4>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xQueueGenericSend+0xbe>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	61fb      	str	r3, [r7, #28]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074fe:	f001 ff35 	bl	800936c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	429a      	cmp	r2, r3
 800750c:	d302      	bcc.n	8007514 <xQueueGenericSend+0xd4>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d129      	bne.n	8007568 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751a:	f000 fac0 	bl	8007a9e <prvCopyDataToQueue>
 800751e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	d010      	beq.n	800754a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	3324      	adds	r3, #36	; 0x24
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f879 	bl	8008624 <xTaskRemoveFromEventList>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d013      	beq.n	8007560 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007538:	4b3f      	ldr	r3, [pc, #252]	; (8007638 <xQueueGenericSend+0x1f8>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	e00a      	b.n	8007560 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007550:	4b39      	ldr	r3, [pc, #228]	; (8007638 <xQueueGenericSend+0x1f8>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007560:	f001 ff34 	bl	80093cc <vPortExitCritical>
				return pdPASS;
 8007564:	2301      	movs	r3, #1
 8007566:	e063      	b.n	8007630 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800756e:	f001 ff2d 	bl	80093cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007572:	2300      	movs	r3, #0
 8007574:	e05c      	b.n	8007630 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4618      	mov	r0, r3
 8007582:	f001 f8b3 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800758a:	f001 ff1f 	bl	80093cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800758e:	f000 fe25 	bl	80081dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007592:	f001 feeb 	bl	800936c <vPortEnterCritical>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800759c:	b25b      	sxtb	r3, r3
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d103      	bne.n	80075ac <xQueueGenericSend+0x16c>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d103      	bne.n	80075c2 <xQueueGenericSend+0x182>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c2:	f001 ff03 	bl	80093cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075c6:	1d3a      	adds	r2, r7, #4
 80075c8:	f107 0314 	add.w	r3, r7, #20
 80075cc:	4611      	mov	r1, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f8a2 	bl	8008718 <xTaskCheckForTimeOut>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d124      	bne.n	8007624 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075dc:	f000 fb57 	bl	8007c8e <prvIsQueueFull>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d018      	beq.n	8007618 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	3310      	adds	r3, #16
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 ffc8 	bl	8008584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f6:	f000 fae2 	bl	8007bbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075fa:	f000 fdfd 	bl	80081f8 <xTaskResumeAll>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	f47f af7c 	bne.w	80074fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <xQueueGenericSend+0x1f8>)
 8007608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	e772      	b.n	80074fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761a:	f000 fad0 	bl	8007bbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800761e:	f000 fdeb 	bl	80081f8 <xTaskResumeAll>
 8007622:	e76c      	b.n	80074fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 faca 	bl	8007bbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762a:	f000 fde5 	bl	80081f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800762e:	2300      	movs	r3, #0
		}
	}
}
 8007630:	4618      	mov	r0, r3
 8007632:	3738      	adds	r7, #56	; 0x38
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08e      	sub	sp, #56	; 0x38
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <xQueueGenericSendFromISR+0x3c>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <xQueueGenericSendFromISR+0x40>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <xQueueGenericSendFromISR+0x42>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	623b      	str	r3, [r7, #32]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d103      	bne.n	80076a6 <xQueueGenericSendFromISR+0x6a>
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <xQueueGenericSendFromISR+0x6e>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <xQueueGenericSendFromISR+0x70>
 80076aa:	2300      	movs	r3, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	61fb      	str	r3, [r7, #28]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076c6:	f001 ff13 	bl	80094f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ca:	f3ef 8211 	mrs	r2, BASEPRI
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	61ba      	str	r2, [r7, #24]
 80076e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d302      	bcc.n	80076f8 <xQueueGenericSendFromISR+0xbc>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d12c      	bne.n	8007752 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007708:	f000 f9c9 	bl	8007a9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800770c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d112      	bne.n	800773c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d016      	beq.n	800774c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	3324      	adds	r3, #36	; 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 ff7e 	bl	8008624 <xTaskRemoveFromEventList>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00e      	beq.n	800774c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e007      	b.n	800774c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800773c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007740:	3301      	adds	r3, #1
 8007742:	b2db      	uxtb	r3, r3
 8007744:	b25a      	sxtb	r2, r3
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007750:	e001      	b.n	8007756 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007760:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007764:	4618      	mov	r0, r3
 8007766:	3738      	adds	r7, #56	; 0x38
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007778:	2300      	movs	r3, #0
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <xQueueReceive+0x30>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	623b      	str	r3, [r7, #32]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <xQueueReceive+0x3e>
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <xQueueReceive+0x42>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <xQueueReceive+0x44>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xQueueReceive+0x5e>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	61fb      	str	r3, [r7, #28]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ca:	f001 f8ed 	bl	80089a8 <xTaskGetSchedulerState>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d102      	bne.n	80077da <xQueueReceive+0x6e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <xQueueReceive+0x72>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <xQueueReceive+0x74>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xQueueReceive+0x8e>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	61bb      	str	r3, [r7, #24]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80077fa:	f001 fdb7 	bl	800936c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01f      	beq.n	800784a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780e:	f000 f9b0 	bl	8007b72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	3310      	adds	r3, #16
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fefc 	bl	8008624 <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007832:	4b3d      	ldr	r3, [pc, #244]	; (8007928 <xQueueReceive+0x1bc>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007842:	f001 fdc3 	bl	80093cc <vPortExitCritical>
				return pdPASS;
 8007846:	2301      	movs	r3, #1
 8007848:	e069      	b.n	800791e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007850:	f001 fdbc 	bl	80093cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007854:	2300      	movs	r3, #0
 8007856:	e062      	b.n	800791e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800785e:	f107 0310 	add.w	r3, r7, #16
 8007862:	4618      	mov	r0, r3
 8007864:	f000 ff42 	bl	80086ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786c:	f001 fdae 	bl	80093cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007870:	f000 fcb4 	bl	80081dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007874:	f001 fd7a 	bl	800936c <vPortEnterCritical>
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800787e:	b25b      	sxtb	r3, r3
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d103      	bne.n	800788e <xQueueReceive+0x122>
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007894:	b25b      	sxtb	r3, r3
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d103      	bne.n	80078a4 <xQueueReceive+0x138>
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a4:	f001 fd92 	bl	80093cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a8:	1d3a      	adds	r2, r7, #4
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 ff31 	bl	8008718 <xTaskCheckForTimeOut>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d123      	bne.n	8007904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f000 f9d0 	bl	8007c62 <prvIsQueueEmpty>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fe57 	bl	8008584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d8:	f000 f971 	bl	8007bbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078dc:	f000 fc8c 	bl	80081f8 <xTaskResumeAll>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d189      	bne.n	80077fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xQueueReceive+0x1bc>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	e780      	b.n	80077fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fa:	f000 f960 	bl	8007bbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fe:	f000 fc7b 	bl	80081f8 <xTaskResumeAll>
 8007902:	e77a      	b.n	80077fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f95a 	bl	8007bbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790a:	f000 fc75 	bl	80081f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 f9a7 	bl	8007c62 <prvIsQueueEmpty>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f43f af6f 	beq.w	80077fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800791c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800791e:	4618      	mov	r0, r3
 8007920:	3730      	adds	r7, #48	; 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	; 0x38
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	623b      	str	r3, [r7, #32]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <xQueueReceiveFromISR+0x3a>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <xQueueReceiveFromISR+0x3e>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <xQueueReceiveFromISR+0x40>
 800796a:	2300      	movs	r3, #0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61fb      	str	r3, [r7, #28]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007986:	f001 fdb3 	bl	80094f0 <vPortValidateInterruptPriority>
	__asm volatile
 800798a:	f3ef 8211 	mrs	r2, BASEPRI
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	61ba      	str	r2, [r7, #24]
 80079a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02f      	beq.n	8007a12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c0:	f000 f8d7 	bl	8007b72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	1e5a      	subs	r2, r3, #1
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d112      	bne.n	80079fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	3310      	adds	r3, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fe1e 	bl	8008624 <xTaskRemoveFromEventList>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e007      	b.n	8007a0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	b25a      	sxtb	r2, r3
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a10:	e001      	b.n	8007a16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f383 8811 	msr	BASEPRI, r3
}
 8007a20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3738      	adds	r7, #56	; 0x38
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60bb      	str	r3, [r7, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007a50:	f001 fc8c 	bl	800936c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007a5a:	f001 fcb7 	bl	80093cc <vPortExitCritical>

	return uxReturn;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8007a92:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10d      	bne.n	8007ad8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d14d      	bne.n	8007b60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 ff8b 	bl	80089e4 <xTaskPriorityDisinherit>
 8007ace:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	e043      	b.n	8007b60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d119      	bne.n	8007b12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6898      	ldr	r0, [r3, #8]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	f002 faf5 	bl	800a0d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d32b      	bcc.n	8007b60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	609a      	str	r2, [r3, #8]
 8007b10:	e026      	b.n	8007b60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68d8      	ldr	r0, [r3, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	f002 fadb 	bl	800a0d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	425b      	negs	r3, r3
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d207      	bcs.n	8007b4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	425b      	negs	r3, r3
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d105      	bne.n	8007b60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b68:	697b      	ldr	r3, [r7, #20]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d018      	beq.n	8007bb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	441a      	add	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d303      	bcc.n	8007ba6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68d9      	ldr	r1, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f002 fa91 	bl	800a0d8 <memcpy>
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bc6:	f001 fbd1 	bl	800936c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bd2:	e011      	b.n	8007bf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3324      	adds	r3, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fd1f 	bl	8008624 <xTaskRemoveFromEventList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bec:	f000 fdf6 	bl	80087dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dce9      	bgt.n	8007bd4 <prvUnlockQueue+0x16>
 8007c00:	e000      	b.n	8007c04 <prvUnlockQueue+0x46>
					break;
 8007c02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c0c:	f001 fbde 	bl	80093cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c10:	f001 fbac 	bl	800936c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c1c:	e011      	b.n	8007c42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d012      	beq.n	8007c4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3310      	adds	r3, #16
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fcfa 	bl	8008624 <xTaskRemoveFromEventList>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c36:	f000 fdd1 	bl	80087dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dce9      	bgt.n	8007c1e <prvUnlockQueue+0x60>
 8007c4a:	e000      	b.n	8007c4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c56:	f001 fbb9 	bl	80093cc <vPortExitCritical>
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c6a:	f001 fb7f 	bl	800936c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c76:	2301      	movs	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e001      	b.n	8007c80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c80:	f001 fba4 	bl	80093cc <vPortExitCritical>

	return xReturn;
 8007c84:	68fb      	ldr	r3, [r7, #12]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c96:	f001 fb69 	bl	800936c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d102      	bne.n	8007cac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e001      	b.n	8007cb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cb0:	f001 fb8c 	bl	80093cc <vPortExitCritical>

	return xReturn;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e014      	b.n	8007cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cd0:	4a0e      	ldr	r2, [pc, #56]	; (8007d0c <vQueueAddToRegistry+0x4c>)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cdc:	490b      	ldr	r1, [pc, #44]	; (8007d0c <vQueueAddToRegistry+0x4c>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <vQueueAddToRegistry+0x4c>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cf2:	e006      	b.n	8007d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b07      	cmp	r3, #7
 8007cfe:	d9e7      	bls.n	8007cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	20001be0 	.word	0x20001be0

08007d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d20:	f001 fb24 	bl	800936c <vPortEnterCritical>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d2a:	b25b      	sxtb	r3, r3
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d103      	bne.n	8007d3a <vQueueWaitForMessageRestricted+0x2a>
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d103      	bne.n	8007d50 <vQueueWaitForMessageRestricted+0x40>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d50:	f001 fb3c 	bl	80093cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d106      	bne.n	8007d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fc31 	bl	80085cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d6a:	6978      	ldr	r0, [r7, #20]
 8007d6c:	f7ff ff27 	bl	8007bbe <prvUnlockQueue>
	}
 8007d70:	bf00      	nop
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	; 0x38
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	623b      	str	r3, [r7, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xTaskCreateStatic+0x46>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	61fb      	str	r3, [r7, #28]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dbe:	235c      	movs	r3, #92	; 0x5c
 8007dc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b5c      	cmp	r3, #92	; 0x5c
 8007dc6:	d00a      	beq.n	8007dde <xTaskCreateStatic+0x66>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	61bb      	str	r3, [r7, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01e      	beq.n	8007e22 <xTaskCreateStatic+0xaa>
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9303      	str	r3, [sp, #12]
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	9302      	str	r3, [sp, #8]
 8007e04:	f107 0314 	add.w	r3, r7, #20
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f850 	bl	8007eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e1c:	f000 f8d4 	bl	8007fc8 <prvAddNewTaskToReadyList>
 8007e20:	e001      	b.n	8007e26 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e26:	697b      	ldr	r3, [r7, #20]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	; 0x30
 8007e34:	af04      	add	r7, sp, #16
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fb91 	bl	800956c <pvPortMalloc>
 8007e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00e      	beq.n	8007e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007e52:	205c      	movs	r0, #92	; 0x5c
 8007e54:	f001 fb8a 	bl	800956c <pvPortMalloc>
 8007e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
 8007e66:	e005      	b.n	8007e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e68:	6978      	ldr	r0, [r7, #20]
 8007e6a:	f001 fc43 	bl	80096f4 <vPortFree>
 8007e6e:	e001      	b.n	8007e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d017      	beq.n	8007eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	2300      	movs	r3, #0
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f80e 	bl	8007eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e9e:	69f8      	ldr	r0, [r7, #28]
 8007ea0:	f000 f892 	bl	8007fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	e002      	b.n	8007eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3720      	adds	r7, #32
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b088      	sub	sp, #32
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	21a5      	movs	r1, #165	; 0xa5
 8007ed4:	f002 f90e 	bl	800a0f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	617b      	str	r3, [r7, #20]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f12:	2300      	movs	r3, #0
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	e012      	b.n	8007f3e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	7819      	ldrb	r1, [r3, #0]
 8007f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	3334      	adds	r3, #52	; 0x34
 8007f28:	460a      	mov	r2, r1
 8007f2a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	2b0f      	cmp	r3, #15
 8007f42:	d9e9      	bls.n	8007f18 <prvInitialiseNewTask+0x5e>
 8007f44:	e000      	b.n	8007f48 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007f46:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	2b37      	cmp	r3, #55	; 0x37
 8007f54:	d901      	bls.n	8007f5a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f56:	2337      	movs	r3, #55	; 0x37
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2200      	movs	r2, #0
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff f894 	bl	800709e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	3318      	adds	r3, #24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff f88f 	bl	800709e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f94:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	2200      	movs	r2, #0
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	68f9      	ldr	r1, [r7, #12]
 8007fa8:	69b8      	ldr	r0, [r7, #24]
 8007faa:	f001 f8ef 	bl	800918c <pxPortInitialiseStack>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc0:	bf00      	nop
 8007fc2:	3720      	adds	r7, #32
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fd0:	f001 f9cc 	bl	800936c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fd4:	4b2d      	ldr	r3, [pc, #180]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a2c      	ldr	r2, [pc, #176]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fe6:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fec:	4b27      	ldr	r3, [pc, #156]	; (800808c <prvAddNewTaskToReadyList+0xc4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ff4:	f000 fc16 	bl	8008824 <prvInitialiseTaskLists>
 8007ff8:	e00d      	b.n	8008016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	429a      	cmp	r2, r3
 800800e:	d802      	bhi.n	8008016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	4a1e      	ldr	r2, [pc, #120]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 800801e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <prvAddNewTaskToReadyList+0xd0>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d903      	bls.n	800803c <prvAddNewTaskToReadyList+0x74>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <prvAddNewTaskToReadyList+0xd4>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4a15      	ldr	r2, [pc, #84]	; (80080a0 <prvAddNewTaskToReadyList+0xd8>)
 800804a:	441a      	add	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7ff f82f 	bl	80070b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008058:	f001 f9b8 	bl	80093cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <prvAddNewTaskToReadyList+0xcc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddNewTaskToReadyList+0xc8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	429a      	cmp	r2, r3
 8008070:	d207      	bcs.n	8008082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvAddNewTaskToReadyList+0xdc>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000e3c 	.word	0x20000e3c
 8008090:	20000968 	.word	0x20000968
 8008094:	20000e48 	.word	0x20000e48
 8008098:	20000e58 	.word	0x20000e58
 800809c:	20000e44 	.word	0x20000e44
 80080a0:	2000096c 	.word	0x2000096c
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d017      	beq.n	80080ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <vTaskDelay+0x60>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <vTaskDelay+0x30>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080d8:	f000 f880 	bl	80081dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fcee 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080e4:	f000 f888 	bl	80081f8 <xTaskResumeAll>
 80080e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <vTaskDelay+0x64>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000e64 	.word	0x20000e64
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800811e:	463a      	mov	r2, r7
 8008120:	1d39      	adds	r1, r7, #4
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe ff68 	bl	8006ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	2300      	movs	r3, #0
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	460a      	mov	r2, r1
 800813e:	4921      	ldr	r1, [pc, #132]	; (80081c4 <vTaskStartScheduler+0xb4>)
 8008140:	4821      	ldr	r0, [pc, #132]	; (80081c8 <vTaskStartScheduler+0xb8>)
 8008142:	f7ff fe19 	bl	8007d78 <xTaskCreateStatic>
 8008146:	4603      	mov	r3, r0
 8008148:	4a20      	ldr	r2, [pc, #128]	; (80081cc <vTaskStartScheduler+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800814c:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <vTaskStartScheduler+0xbc>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e001      	b.n	800815e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d102      	bne.n	800816a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008164:	f000 fd00 	bl	8008b68 <xTimerCreateTimerTask>
 8008168:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d116      	bne.n	800819e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	613b      	str	r3, [r7, #16]
}
 8008182:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <vTaskStartScheduler+0xc0>)
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800818c:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <vTaskStartScheduler+0xc4>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008192:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <vTaskStartScheduler+0xc8>)
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008198:	f001 f876 	bl	8009288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800819c:	e00e      	b.n	80081bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d10a      	bne.n	80081bc <vTaskStartScheduler+0xac>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60fb      	str	r3, [r7, #12]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <vTaskStartScheduler+0xaa>
}
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	0800a16c 	.word	0x0800a16c
 80081c8:	080087f5 	.word	0x080087f5
 80081cc:	20000e60 	.word	0x20000e60
 80081d0:	20000e5c 	.word	0x20000e5c
 80081d4:	20000e48 	.word	0x20000e48
 80081d8:	20000e40 	.word	0x20000e40

080081dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <vTaskSuspendAll+0x18>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a03      	ldr	r2, [pc, #12]	; (80081f4 <vTaskSuspendAll+0x18>)
 80081e8:	6013      	str	r3, [r2, #0]
}
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000e64 	.word	0x20000e64

080081f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008206:	4b42      	ldr	r3, [pc, #264]	; (8008310 <xTaskResumeAll+0x118>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xTaskResumeAll+0x2c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	603b      	str	r3, [r7, #0]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008224:	f001 f8a2 	bl	800936c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008228:	4b39      	ldr	r3, [pc, #228]	; (8008310 <xTaskResumeAll+0x118>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	4a38      	ldr	r2, [pc, #224]	; (8008310 <xTaskResumeAll+0x118>)
 8008230:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008232:	4b37      	ldr	r3, [pc, #220]	; (8008310 <xTaskResumeAll+0x118>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d162      	bne.n	8008300 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800823a:	4b36      	ldr	r3, [pc, #216]	; (8008314 <xTaskResumeAll+0x11c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d05e      	beq.n	8008300 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008242:	e02f      	b.n	80082a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008244:	4b34      	ldr	r3, [pc, #208]	; (8008318 <xTaskResumeAll+0x120>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3318      	adds	r3, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe ff8b 	bl	800716c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe ff86 	bl	800716c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <xTaskResumeAll+0x124>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d903      	bls.n	8008274 <xTaskResumeAll+0x7c>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a2a      	ldr	r2, [pc, #168]	; (800831c <xTaskResumeAll+0x124>)
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4a27      	ldr	r2, [pc, #156]	; (8008320 <xTaskResumeAll+0x128>)
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fe ff13 	bl	80070b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <xTaskResumeAll+0x12c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <xTaskResumeAll+0x130>)
 80082a0:	2201      	movs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a4:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <xTaskResumeAll+0x120>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1cb      	bne.n	8008244 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082b2:	f000 fb55 	bl	8008960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <xTaskResumeAll+0x134>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d010      	beq.n	80082e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082c2:	f000 f845 	bl	8008350 <xTaskIncrementTick>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80082cc:	4b16      	ldr	r3, [pc, #88]	; (8008328 <xTaskResumeAll+0x130>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f1      	bne.n	80082c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <xTaskResumeAll+0x134>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <xTaskResumeAll+0x130>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <xTaskResumeAll+0x138>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008300:	f001 f864 	bl	80093cc <vPortExitCritical>

	return xAlreadyYielded;
 8008304:	68bb      	ldr	r3, [r7, #8]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000e64 	.word	0x20000e64
 8008314:	20000e3c 	.word	0x20000e3c
 8008318:	20000dfc 	.word	0x20000dfc
 800831c:	20000e44 	.word	0x20000e44
 8008320:	2000096c 	.word	0x2000096c
 8008324:	20000968 	.word	0x20000968
 8008328:	20000e50 	.word	0x20000e50
 800832c:	20000e4c 	.word	0x20000e4c
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800833a:	4b04      	ldr	r3, [pc, #16]	; (800834c <xTaskGetTickCount+0x18>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008340:	687b      	ldr	r3, [r7, #4]
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	20000e40 	.word	0x20000e40

08008350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835a:	4b51      	ldr	r3, [pc, #324]	; (80084a0 <xTaskIncrementTick+0x150>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f040 808e 	bne.w	8008480 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008364:	4b4f      	ldr	r3, [pc, #316]	; (80084a4 <xTaskIncrementTick+0x154>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800836c:	4a4d      	ldr	r2, [pc, #308]	; (80084a4 <xTaskIncrementTick+0x154>)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d120      	bne.n	80083ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008378:	4b4b      	ldr	r3, [pc, #300]	; (80084a8 <xTaskIncrementTick+0x158>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <xTaskIncrementTick+0x48>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	603b      	str	r3, [r7, #0]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <xTaskIncrementTick+0x46>
 8008398:	4b43      	ldr	r3, [pc, #268]	; (80084a8 <xTaskIncrementTick+0x158>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	4b43      	ldr	r3, [pc, #268]	; (80084ac <xTaskIncrementTick+0x15c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a41      	ldr	r2, [pc, #260]	; (80084a8 <xTaskIncrementTick+0x158>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4a41      	ldr	r2, [pc, #260]	; (80084ac <xTaskIncrementTick+0x15c>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	4b40      	ldr	r3, [pc, #256]	; (80084b0 <xTaskIncrementTick+0x160>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a3f      	ldr	r2, [pc, #252]	; (80084b0 <xTaskIncrementTick+0x160>)
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	f000 fad3 	bl	8008960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083ba:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <xTaskIncrementTick+0x164>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d34e      	bcc.n	8008462 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c4:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <xTaskIncrementTick+0x158>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <xTaskIncrementTick+0x82>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <xTaskIncrementTick+0x84>
 80083d2:	2300      	movs	r3, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d8:	4b36      	ldr	r3, [pc, #216]	; (80084b4 <xTaskIncrementTick+0x164>)
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	601a      	str	r2, [r3, #0]
					break;
 80083e0:	e03f      	b.n	8008462 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083e2:	4b31      	ldr	r3, [pc, #196]	; (80084a8 <xTaskIncrementTick+0x158>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d203      	bcs.n	8008402 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083fa:	4a2e      	ldr	r2, [pc, #184]	; (80084b4 <xTaskIncrementTick+0x164>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6013      	str	r3, [r2, #0]
						break;
 8008400:	e02f      	b.n	8008462 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe feb0 	bl	800716c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fea7 	bl	800716c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	4b25      	ldr	r3, [pc, #148]	; (80084b8 <xTaskIncrementTick+0x168>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d903      	bls.n	8008432 <xTaskIncrementTick+0xe2>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	4a22      	ldr	r2, [pc, #136]	; (80084b8 <xTaskIncrementTick+0x168>)
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4a1f      	ldr	r2, [pc, #124]	; (80084bc <xTaskIncrementTick+0x16c>)
 8008440:	441a      	add	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe fe34 	bl	80070b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <xTaskIncrementTick+0x170>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d3b3      	bcc.n	80083c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008460:	e7b0      	b.n	80083c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008462:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <xTaskIncrementTick+0x170>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	4914      	ldr	r1, [pc, #80]	; (80084bc <xTaskIncrementTick+0x16c>)
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d907      	bls.n	800848a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800847a:	2301      	movs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e004      	b.n	800848a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008480:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <xTaskIncrementTick+0x174>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a0f      	ldr	r2, [pc, #60]	; (80084c4 <xTaskIncrementTick+0x174>)
 8008488:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xTaskIncrementTick+0x178>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008492:	2301      	movs	r3, #1
 8008494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008496:	697b      	ldr	r3, [r7, #20]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000e64 	.word	0x20000e64
 80084a4:	20000e40 	.word	0x20000e40
 80084a8:	20000df4 	.word	0x20000df4
 80084ac:	20000df8 	.word	0x20000df8
 80084b0:	20000e54 	.word	0x20000e54
 80084b4:	20000e5c 	.word	0x20000e5c
 80084b8:	20000e44 	.word	0x20000e44
 80084bc:	2000096c 	.word	0x2000096c
 80084c0:	20000968 	.word	0x20000968
 80084c4:	20000e4c 	.word	0x20000e4c
 80084c8:	20000e50 	.word	0x20000e50

080084cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d2:	4b27      	ldr	r3, [pc, #156]	; (8008570 <vTaskSwitchContext+0xa4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <vTaskSwitchContext+0xa8>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e0:	e041      	b.n	8008566 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80084e2:	4b24      	ldr	r3, [pc, #144]	; (8008574 <vTaskSwitchContext+0xa8>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80084e8:	4b23      	ldr	r3, [pc, #140]	; (8008578 <vTaskSwitchContext+0xac>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e010      	b.n	8008512 <vTaskSwitchContext+0x46>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <vTaskSwitchContext+0x40>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	607b      	str	r3, [r7, #4]
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <vTaskSwitchContext+0x3e>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b01      	subs	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	491a      	ldr	r1, [pc, #104]	; (800857c <vTaskSwitchContext+0xb0>)
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0e4      	beq.n	80084f0 <vTaskSwitchContext+0x24>
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4a12      	ldr	r2, [pc, #72]	; (800857c <vTaskSwitchContext+0xb0>)
 8008532:	4413      	add	r3, r2
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	3308      	adds	r3, #8
 8008548:	429a      	cmp	r2, r3
 800854a:	d104      	bne.n	8008556 <vTaskSwitchContext+0x8a>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	4a08      	ldr	r2, [pc, #32]	; (8008580 <vTaskSwitchContext+0xb4>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4a05      	ldr	r2, [pc, #20]	; (8008578 <vTaskSwitchContext+0xac>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6013      	str	r3, [r2, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	20000e64 	.word	0x20000e64
 8008574:	20000e50 	.word	0x20000e50
 8008578:	20000e44 	.word	0x20000e44
 800857c:	2000096c 	.word	0x2000096c
 8008580:	20000968 	.word	0x20000968

08008584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <vTaskPlaceOnEventList+0x44>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3318      	adds	r3, #24
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe fda2 	bl	80070fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085b8:	2101      	movs	r1, #1
 80085ba:	6838      	ldr	r0, [r7, #0]
 80085bc:	f000 fa80 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000968 	.word	0x20000968

080085cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <vTaskPlaceOnEventListRestricted+0x54>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7fe fd5a 	bl	80070b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	68b8      	ldr	r0, [r7, #8]
 8008612:	f000 fa55 	bl	8008ac0 <prvAddCurrentTaskToDelayedList>
	}
 8008616:	bf00      	nop
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000968 	.word	0x20000968

08008624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60fb      	str	r3, [r7, #12]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	3318      	adds	r3, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fd89 	bl	800716c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865a:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <xTaskRemoveFromEventList+0xb0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d11d      	bne.n	800869e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fd80 	bl	800716c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <xTaskRemoveFromEventList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d903      	bls.n	8008680 <xTaskRemoveFromEventList+0x5c>
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <xTaskRemoveFromEventList+0xb4>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4a13      	ldr	r2, [pc, #76]	; (80086dc <xTaskRemoveFromEventList+0xb8>)
 800868e:	441a      	add	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7fe fd0d 	bl	80070b6 <vListInsertEnd>
 800869c:	e005      	b.n	80086aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4619      	mov	r1, r3
 80086a4:	480e      	ldr	r0, [pc, #56]	; (80086e0 <xTaskRemoveFromEventList+0xbc>)
 80086a6:	f7fe fd06 	bl	80070b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <xTaskRemoveFromEventList+0xc0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d905      	bls.n	80086c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <xTaskRemoveFromEventList+0xc4>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e001      	b.n	80086c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000e64 	.word	0x20000e64
 80086d8:	20000e44 	.word	0x20000e44
 80086dc:	2000096c 	.word	0x2000096c
 80086e0:	20000dfc 	.word	0x20000dfc
 80086e4:	20000968 	.word	0x20000968
 80086e8:	20000e50 	.word	0x20000e50

080086ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <vTaskInternalSetTimeOutState+0x24>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <vTaskInternalSetTimeOutState+0x28>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	605a      	str	r2, [r3, #4]
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000e54 	.word	0x20000e54
 8008714:	20000e40 	.word	0x20000e40

08008718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	613b      	str	r3, [r7, #16]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60fb      	str	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800875a:	f000 fe07 	bl	800936c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800875e:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <xTaskCheckForTimeOut+0xbc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008776:	d102      	bne.n	800877e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e023      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <xTaskCheckForTimeOut+0xc0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d007      	beq.n	800879a <xTaskCheckForTimeOut+0x82>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	d302      	bcc.n	800879a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	e015      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d20b      	bcs.n	80087bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff ff9b 	bl	80086ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	e004      	b.n	80087c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087c6:	f000 fe01 	bl	80093cc <vPortExitCritical>

	return xReturn;
 80087ca:	69fb      	ldr	r3, [r7, #28]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000e40 	.word	0x20000e40
 80087d8:	20000e54 	.word	0x20000e54

080087dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087e0:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <vTaskMissedYield+0x14>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	20000e50 	.word	0x20000e50

080087f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087fc:	f000 f852 	bl	80088a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <prvIdleTask+0x28>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d9f9      	bls.n	80087fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <prvIdleTask+0x2c>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008818:	e7f0      	b.n	80087fc <prvIdleTask+0x8>
 800881a:	bf00      	nop
 800881c:	2000096c 	.word	0x2000096c
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
 800882e:	e00c      	b.n	800884a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4a12      	ldr	r2, [pc, #72]	; (8008884 <prvInitialiseTaskLists+0x60>)
 800883c:	4413      	add	r3, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fc0e 	bl	8007060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b37      	cmp	r3, #55	; 0x37
 800884e:	d9ef      	bls.n	8008830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008850:	480d      	ldr	r0, [pc, #52]	; (8008888 <prvInitialiseTaskLists+0x64>)
 8008852:	f7fe fc05 	bl	8007060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008856:	480d      	ldr	r0, [pc, #52]	; (800888c <prvInitialiseTaskLists+0x68>)
 8008858:	f7fe fc02 	bl	8007060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800885c:	480c      	ldr	r0, [pc, #48]	; (8008890 <prvInitialiseTaskLists+0x6c>)
 800885e:	f7fe fbff 	bl	8007060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008862:	480c      	ldr	r0, [pc, #48]	; (8008894 <prvInitialiseTaskLists+0x70>)
 8008864:	f7fe fbfc 	bl	8007060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008868:	480b      	ldr	r0, [pc, #44]	; (8008898 <prvInitialiseTaskLists+0x74>)
 800886a:	f7fe fbf9 	bl	8007060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <prvInitialiseTaskLists+0x78>)
 8008870:	4a05      	ldr	r2, [pc, #20]	; (8008888 <prvInitialiseTaskLists+0x64>)
 8008872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvInitialiseTaskLists+0x7c>)
 8008876:	4a05      	ldr	r2, [pc, #20]	; (800888c <prvInitialiseTaskLists+0x68>)
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	2000096c 	.word	0x2000096c
 8008888:	20000dcc 	.word	0x20000dcc
 800888c:	20000de0 	.word	0x20000de0
 8008890:	20000dfc 	.word	0x20000dfc
 8008894:	20000e10 	.word	0x20000e10
 8008898:	20000e28 	.word	0x20000e28
 800889c:	20000df4 	.word	0x20000df4
 80088a0:	20000df8 	.word	0x20000df8

080088a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088aa:	e019      	b.n	80088e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088ac:	f000 fd5e 	bl	800936c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088b0:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <prvCheckTasksWaitingTermination+0x50>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fc55 	bl	800716c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	4a0b      	ldr	r2, [pc, #44]	; (80088f8 <prvCheckTasksWaitingTermination+0x54>)
 80088ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088d6:	f000 fd79 	bl	80093cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f810 	bl	8008900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <prvCheckTasksWaitingTermination+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e1      	bne.n	80088ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000e10 	.word	0x20000e10
 80088f8:	20000e3c 	.word	0x20000e3c
 80088fc:	20000e24 	.word	0x20000e24

08008900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f000 feec 	bl	80096f4 <vPortFree>
				vPortFree( pxTCB );
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fee9 	bl	80096f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008922:	e018      	b.n	8008956 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800892a:	2b01      	cmp	r3, #1
 800892c:	d103      	bne.n	8008936 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fee0 	bl	80096f4 <vPortFree>
	}
 8008934:	e00f      	b.n	8008956 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800893c:	2b02      	cmp	r3, #2
 800893e:	d00a      	beq.n	8008956 <prvDeleteTCB+0x56>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <prvDeleteTCB+0x54>
	}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008966:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <prvResetNextTaskUnblockTime+0x40>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <prvResetNextTaskUnblockTime+0x14>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <prvResetNextTaskUnblockTime+0x16>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <prvResetNextTaskUnblockTime+0x44>)
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008982:	e008      	b.n	8008996 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <prvResetNextTaskUnblockTime+0x40>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	4a04      	ldr	r2, [pc, #16]	; (80089a4 <prvResetNextTaskUnblockTime+0x44>)
 8008994:	6013      	str	r3, [r2, #0]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	20000df4 	.word	0x20000df4
 80089a4:	20000e5c 	.word	0x20000e5c

080089a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089ae:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <xTaskGetSchedulerState+0x34>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089b6:	2301      	movs	r3, #1
 80089b8:	607b      	str	r3, [r7, #4]
 80089ba:	e008      	b.n	80089ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089bc:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <xTaskGetSchedulerState+0x38>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089c4:	2302      	movs	r3, #2
 80089c6:	607b      	str	r3, [r7, #4]
 80089c8:	e001      	b.n	80089ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089ca:	2300      	movs	r3, #0
 80089cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ce:	687b      	ldr	r3, [r7, #4]
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000e48 	.word	0x20000e48
 80089e0:	20000e64 	.word	0x20000e64

080089e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d056      	beq.n	8008aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089fa:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <xTaskPriorityDisinherit+0xd0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d00a      	beq.n	8008a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	60fb      	str	r3, [r7, #12]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a3c:	1e5a      	subs	r2, r3, #1
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d02c      	beq.n	8008aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d128      	bne.n	8008aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fb86 	bl	800716c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a78:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <xTaskPriorityDisinherit+0xd4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d903      	bls.n	8008a88 <xTaskPriorityDisinherit+0xa4>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	4a0c      	ldr	r2, [pc, #48]	; (8008ab8 <xTaskPriorityDisinherit+0xd4>)
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <xTaskPriorityDisinherit+0xd8>)
 8008a96:	441a      	add	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe fb09 	bl	80070b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008aa8:	697b      	ldr	r3, [r7, #20]
	}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000968 	.word	0x20000968
 8008ab8:	20000e44 	.word	0x20000e44
 8008abc:	2000096c 	.word	0x2000096c

08008ac0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008aca:	4b21      	ldr	r3, [pc, #132]	; (8008b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad0:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fb48 	bl	800716c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d10a      	bne.n	8008afa <prvAddCurrentTaskToDelayedList+0x3a>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d007      	beq.n	8008afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aea:	4b1a      	ldr	r3, [pc, #104]	; (8008b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4819      	ldr	r0, [pc, #100]	; (8008b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8008af4:	f7fe fadf 	bl	80070b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008af8:	e026      	b.n	8008b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4413      	add	r3, r2
 8008b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b02:	4b14      	ldr	r3, [pc, #80]	; (8008b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d209      	bcs.n	8008b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b12:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fe faec 	bl	80070fc <vListInsert>
}
 8008b24:	e010      	b.n	8008b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b26:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fe fae2 	bl	80070fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d202      	bcs.n	8008b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b42:	4a08      	ldr	r2, [pc, #32]	; (8008b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	6013      	str	r3, [r2, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000e40 	.word	0x20000e40
 8008b54:	20000968 	.word	0x20000968
 8008b58:	20000e28 	.word	0x20000e28
 8008b5c:	20000df8 	.word	0x20000df8
 8008b60:	20000df4 	.word	0x20000df4
 8008b64:	20000e5c 	.word	0x20000e5c

08008b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08a      	sub	sp, #40	; 0x28
 8008b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b72:	f000 facb 	bl	800910c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b76:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <xTimerCreateTimerTask+0x80>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d021      	beq.n	8008bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b86:	1d3a      	adds	r2, r7, #4
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fa4b 	bl	800702c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	9202      	str	r2, [sp, #8]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	4910      	ldr	r1, [pc, #64]	; (8008bec <xTimerCreateTimerTask+0x84>)
 8008baa:	4811      	ldr	r0, [pc, #68]	; (8008bf0 <xTimerCreateTimerTask+0x88>)
 8008bac:	f7ff f8e4 	bl	8007d78 <xTaskCreateStatic>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	4a10      	ldr	r2, [pc, #64]	; (8008bf4 <xTimerCreateTimerTask+0x8c>)
 8008bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <xTimerCreateTimerTask+0x8c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	613b      	str	r3, [r7, #16]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008bde:	697b      	ldr	r3, [r7, #20]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000e98 	.word	0x20000e98
 8008bec:	0800a174 	.word	0x0800a174
 8008bf0:	08008d15 	.word	0x08008d15
 8008bf4:	20000e9c 	.word	0x20000e9c

08008bf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	623b      	str	r3, [r7, #32]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <xTimerGenericCommand+0x98>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d02a      	beq.n	8008c84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b05      	cmp	r3, #5
 8008c3e:	dc18      	bgt.n	8008c72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c40:	f7ff feb2 	bl	80089a8 <xTaskGetSchedulerState>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d109      	bne.n	8008c5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c4a:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <xTimerGenericCommand+0x98>)
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f107 0110 	add.w	r1, r7, #16
 8008c52:	2300      	movs	r3, #0
 8008c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c56:	f7fe fbf3 	bl	8007440 <xQueueGenericSend>
 8008c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c5c:	e012      	b.n	8008c84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <xTimerGenericCommand+0x98>)
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	f107 0110 	add.w	r1, r7, #16
 8008c66:	2300      	movs	r3, #0
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f7fe fbe9 	bl	8007440 <xQueueGenericSend>
 8008c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8008c70:	e008      	b.n	8008c84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c72:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <xTimerGenericCommand+0x98>)
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	f107 0110 	add.w	r1, r7, #16
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	f7fe fcdd 	bl	800763c <xQueueGenericSendFromISR>
 8008c82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3728      	adds	r7, #40	; 0x28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000e98 	.word	0x20000e98

08008c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c9e:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <prvProcessExpiredTimer+0x7c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fa5d 	bl	800716c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d122      	bne.n	8008d00 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	18d1      	adds	r1, r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	6978      	ldr	r0, [r7, #20]
 8008cc8:	f000 f8c8 	bl	8008e5c <prvInsertTimerInActiveList>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6978      	ldr	r0, [r7, #20]
 8008cde:	f7ff ff8b 	bl	8008bf8 <xTimerGenericCommand>
 8008ce2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	60fb      	str	r3, [r7, #12]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	6978      	ldr	r0, [r7, #20]
 8008d06:	4798      	blx	r3
}
 8008d08:	bf00      	nop
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000e90 	.word	0x20000e90

08008d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d1c:	f107 0308 	add.w	r3, r7, #8
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f857 	bl	8008dd4 <prvGetNextExpireTime>
 8008d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f803 	bl	8008d38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d32:	f000 f8d5 	bl	8008ee0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d36:	e7f1      	b.n	8008d1c <prvTimerTask+0x8>

08008d38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d42:	f7ff fa4b 	bl	80081dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f866 	bl	8008e1c <prvSampleTimeNow>
 8008d50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d130      	bne.n	8008dba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <prvProcessTimerOrBlockTask+0x3c>
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d806      	bhi.n	8008d74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d66:	f7ff fa47 	bl	80081f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d6a:	68f9      	ldr	r1, [r7, #12]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff91 	bl	8008c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d72:	e024      	b.n	8008dbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d7a:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <prvProcessTimerOrBlockTask+0x90>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bf0c      	ite	eq
 8008d84:	2301      	moveq	r3, #1
 8008d86:	2300      	movne	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <prvProcessTimerOrBlockTask+0x94>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f7fe ffb9 	bl	8007d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d9e:	f7ff fa2b 	bl	80081f8 <xTaskResumeAll>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008da8:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <prvProcessTimerOrBlockTask+0x98>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
}
 8008db8:	e001      	b.n	8008dbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008dba:	f7ff fa1d 	bl	80081f8 <xTaskResumeAll>
}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000e94 	.word	0x20000e94
 8008dcc:	20000e98 	.word	0x20000e98
 8008dd0:	e000ed04 	.word	0xe000ed04

08008dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <prvGetNextExpireTime+0x44>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf0c      	ite	eq
 8008de6:	2301      	moveq	r3, #1
 8008de8:	2300      	movne	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dfa:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <prvGetNextExpireTime+0x44>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e001      	b.n	8008e0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000e90 	.word	0x20000e90

08008e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e24:	f7ff fa86 	bl	8008334 <xTaskGetTickCount>
 8008e28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e2a:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <prvSampleTimeNow+0x3c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d205      	bcs.n	8008e40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e34:	f000 f908 	bl	8009048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e002      	b.n	8008e46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e46:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <prvSampleTimeNow+0x3c>)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000ea0 	.word	0x20000ea0

08008e5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d812      	bhi.n	8008ea8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	1ad2      	subs	r2, r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d302      	bcc.n	8008e96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e01b      	b.n	8008ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <prvInsertTimerInActiveList+0x7c>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7fe f92b 	bl	80070fc <vListInsert>
 8008ea6:	e012      	b.n	8008ece <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d206      	bcs.n	8008ebe <prvInsertTimerInActiveList+0x62>
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d302      	bcc.n	8008ebe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	e007      	b.n	8008ece <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <prvInsertTimerInActiveList+0x80>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4610      	mov	r0, r2
 8008eca:	f7fe f917 	bl	80070fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ece:	697b      	ldr	r3, [r7, #20]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000e94 	.word	0x20000e94
 8008edc:	20000e90 	.word	0x20000e90

08008ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	; 0x38
 8008ee4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ee6:	e09d      	b.n	8009024 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da18      	bge.n	8008f20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	61fb      	str	r3, [r7, #28]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f16:	6850      	ldr	r0, [r2, #4]
 8008f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1a:	6892      	ldr	r2, [r2, #8]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db7d      	blt.n	8009022 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	3304      	adds	r3, #4
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f918 	bl	800716c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff ff6c 	bl	8008e1c <prvSampleTimeNow>
 8008f44:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	d86b      	bhi.n	8009024 <prvProcessReceivedCommands+0x144>
 8008f4c:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <prvProcessReceivedCommands+0x74>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f7d 	.word	0x08008f7d
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f7d 	.word	0x08008f7d
 8008f60:	08009025 	.word	0x08009025
 8008f64:	08008fd9 	.word	0x08008fd9
 8008f68:	08009011 	.word	0x08009011
 8008f6c:	08008f7d 	.word	0x08008f7d
 8008f70:	08008f7d 	.word	0x08008f7d
 8008f74:	08009025 	.word	0x08009025
 8008f78:	08008fd9 	.word	0x08008fd9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	18d1      	adds	r1, r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f8a:	f7ff ff67 	bl	8008e5c <prvInsertTimerInActiveList>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d047      	beq.n	8009024 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d13f      	bne.n	8009024 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	441a      	add	r2, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb6:	f7ff fe1f 	bl	8008bf8 <xTimerGenericCommand>
 8008fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d130      	bne.n	8009024 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61bb      	str	r3, [r7, #24]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	617b      	str	r3, [r7, #20]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	699a      	ldr	r2, [r3, #24]
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	18d1      	adds	r1, r2, r3
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900a:	f7ff ff27 	bl	8008e5c <prvInsertTimerInActiveList>
					break;
 800900e:	e009      	b.n	8009024 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800901a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800901c:	f000 fb6a 	bl	80096f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009020:	e000      	b.n	8009024 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009022:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <prvProcessReceivedCommands+0x164>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1d39      	adds	r1, r7, #4
 800902a:	2200      	movs	r2, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe fb9d 	bl	800776c <xQueueReceive>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	f47f af57 	bne.w	8008ee8 <prvProcessReceivedCommands+0x8>
	}
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	3730      	adds	r7, #48	; 0x30
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000e98 	.word	0x20000e98

08009048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800904e:	e045      	b.n	80090dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009050:	4b2c      	ldr	r3, [pc, #176]	; (8009104 <prvSwitchTimerLists+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800905a:	4b2a      	ldr	r3, [pc, #168]	; (8009104 <prvSwitchTimerLists+0xbc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe f87f 	bl	800716c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d12e      	bne.n	80090dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4413      	add	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	429a      	cmp	r2, r3
 800908e:	d90e      	bls.n	80090ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800909c:	4b19      	ldr	r3, [pc, #100]	; (8009104 <prvSwitchTimerLists+0xbc>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7fe f828 	bl	80070fc <vListInsert>
 80090ac:	e016      	b.n	80090dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ae:	2300      	movs	r3, #0
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	2100      	movs	r1, #0
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff fd9d 	bl	8008bf8 <xTimerGenericCommand>
 80090be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	603b      	str	r3, [r7, #0]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090dc:	4b09      	ldr	r3, [pc, #36]	; (8009104 <prvSwitchTimerLists+0xbc>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1b4      	bne.n	8009050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <prvSwitchTimerLists+0xbc>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <prvSwitchTimerLists+0xc0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a04      	ldr	r2, [pc, #16]	; (8009104 <prvSwitchTimerLists+0xbc>)
 80090f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090f4:	4a04      	ldr	r2, [pc, #16]	; (8009108 <prvSwitchTimerLists+0xc0>)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000e90 	.word	0x20000e90
 8009108:	20000e94 	.word	0x20000e94

0800910c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009112:	f000 f92b 	bl	800936c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009116:	4b15      	ldr	r3, [pc, #84]	; (800916c <prvCheckForValidListAndQueue+0x60>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d120      	bne.n	8009160 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800911e:	4814      	ldr	r0, [pc, #80]	; (8009170 <prvCheckForValidListAndQueue+0x64>)
 8009120:	f7fd ff9e 	bl	8007060 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009124:	4813      	ldr	r0, [pc, #76]	; (8009174 <prvCheckForValidListAndQueue+0x68>)
 8009126:	f7fd ff9b 	bl	8007060 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <prvCheckForValidListAndQueue+0x6c>)
 800912c:	4a10      	ldr	r2, [pc, #64]	; (8009170 <prvCheckForValidListAndQueue+0x64>)
 800912e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <prvCheckForValidListAndQueue+0x70>)
 8009132:	4a10      	ldr	r2, [pc, #64]	; (8009174 <prvCheckForValidListAndQueue+0x68>)
 8009134:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009136:	2300      	movs	r3, #0
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4b11      	ldr	r3, [pc, #68]	; (8009180 <prvCheckForValidListAndQueue+0x74>)
 800913c:	4a11      	ldr	r2, [pc, #68]	; (8009184 <prvCheckForValidListAndQueue+0x78>)
 800913e:	2110      	movs	r1, #16
 8009140:	200a      	movs	r0, #10
 8009142:	f7fe f8a5 	bl	8007290 <xQueueGenericCreateStatic>
 8009146:	4603      	mov	r3, r0
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <prvCheckForValidListAndQueue+0x60>)
 800914a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800914c:	4b07      	ldr	r3, [pc, #28]	; (800916c <prvCheckForValidListAndQueue+0x60>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <prvCheckForValidListAndQueue+0x60>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	490b      	ldr	r1, [pc, #44]	; (8009188 <prvCheckForValidListAndQueue+0x7c>)
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fdb0 	bl	8007cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009160:	f000 f934 	bl	80093cc <vPortExitCritical>
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000e98 	.word	0x20000e98
 8009170:	20000e68 	.word	0x20000e68
 8009174:	20000e7c 	.word	0x20000e7c
 8009178:	20000e90 	.word	0x20000e90
 800917c:	20000e94 	.word	0x20000e94
 8009180:	20000f44 	.word	0x20000f44
 8009184:	20000ea4 	.word	0x20000ea4
 8009188:	0800a17c 	.word	0x0800a17c

0800918c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3b04      	subs	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3b04      	subs	r3, #4
 80091aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f023 0201 	bic.w	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3b04      	subs	r3, #4
 80091ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091bc:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <pxPortInitialiseStack+0x54>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3b14      	subs	r3, #20
 80091c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3b20      	subs	r3, #32
 80091d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091d4:	68fb      	ldr	r3, [r7, #12]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr
 80091e0:	080091e5 	.word	0x080091e5

080091e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <prvTaskExitError+0x54>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d00a      	beq.n	800920e <prvTaskExitError+0x2a>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	60fb      	str	r3, [r7, #12]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <prvTaskExitError+0x28>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60bb      	str	r3, [r7, #8]
}
 8009220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009222:	bf00      	nop
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0fc      	beq.n	8009224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	20000108 	.word	0x20000108
 800923c:	00000000 	.word	0x00000000

08009240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <pxCurrentTCBConst2>)
 8009242:	6819      	ldr	r1, [r3, #0]
 8009244:	6808      	ldr	r0, [r1, #0]
 8009246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800924a:	f380 8809 	msr	PSP, r0
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	f04e 0e0d 	orr.w	lr, lr, #13
 800925e:	4770      	bx	lr

08009260 <pxCurrentTCBConst2>:
 8009260:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009268:	4806      	ldr	r0, [pc, #24]	; (8009284 <prvPortStartFirstTask+0x1c>)
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	6800      	ldr	r0, [r0, #0]
 800926e:	f380 8808 	msr	MSP, r0
 8009272:	b662      	cpsie	i
 8009274:	b661      	cpsie	f
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	df00      	svc	0
 8009280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009282:	bf00      	nop
 8009284:	e000ed08 	.word	0xe000ed08

08009288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800928e:	4b32      	ldr	r3, [pc, #200]	; (8009358 <xPortStartScheduler+0xd0>)
 8009290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	22ff      	movs	r2, #255	; 0xff
 800929e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	4b2a      	ldr	r3, [pc, #168]	; (800935c <xPortStartScheduler+0xd4>)
 80092b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092b6:	4b2a      	ldr	r3, [pc, #168]	; (8009360 <xPortStartScheduler+0xd8>)
 80092b8:	2207      	movs	r2, #7
 80092ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092bc:	e009      	b.n	80092d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80092be:	4b28      	ldr	r3, [pc, #160]	; (8009360 <xPortStartScheduler+0xd8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	4a26      	ldr	r2, [pc, #152]	; (8009360 <xPortStartScheduler+0xd8>)
 80092c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092da:	2b80      	cmp	r3, #128	; 0x80
 80092dc:	d0ef      	beq.n	80092be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092de:	4b20      	ldr	r3, [pc, #128]	; (8009360 <xPortStartScheduler+0xd8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f1c3 0307 	rsb	r3, r3, #7
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d00a      	beq.n	8009300 <xPortStartScheduler+0x78>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	60bb      	str	r3, [r7, #8]
}
 80092fc:	bf00      	nop
 80092fe:	e7fe      	b.n	80092fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009300:	4b17      	ldr	r3, [pc, #92]	; (8009360 <xPortStartScheduler+0xd8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	4a16      	ldr	r2, [pc, #88]	; (8009360 <xPortStartScheduler+0xd8>)
 8009308:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <xPortStartScheduler+0xd8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009312:	4a13      	ldr	r2, [pc, #76]	; (8009360 <xPortStartScheduler+0xd8>)
 8009314:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800931e:	4b11      	ldr	r3, [pc, #68]	; (8009364 <xPortStartScheduler+0xdc>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a10      	ldr	r2, [pc, #64]	; (8009364 <xPortStartScheduler+0xdc>)
 8009324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800932a:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <xPortStartScheduler+0xdc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a0d      	ldr	r2, [pc, #52]	; (8009364 <xPortStartScheduler+0xdc>)
 8009330:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009334:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009336:	f000 f8b9 	bl	80094ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800933a:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <xPortStartScheduler+0xe0>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009340:	f7ff ff92 	bl	8009268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009344:	f7ff f8c2 	bl	80084cc <vTaskSwitchContext>
	prvTaskExitError();
 8009348:	f7ff ff4c 	bl	80091e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	e000e400 	.word	0xe000e400
 800935c:	20000f94 	.word	0x20000f94
 8009360:	20000f98 	.word	0x20000f98
 8009364:	e000ed20 	.word	0xe000ed20
 8009368:	20000108 	.word	0x20000108

0800936c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	607b      	str	r3, [r7, #4]
}
 8009384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009386:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <vPortEnterCritical+0x58>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	4a0d      	ldr	r2, [pc, #52]	; (80093c4 <vPortEnterCritical+0x58>)
 800938e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009390:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <vPortEnterCritical+0x58>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10f      	bne.n	80093b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <vPortEnterCritical+0x5c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	603b      	str	r3, [r7, #0]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vPortEnterCritical+0x4a>
	}
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20000108 	.word	0x20000108
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <vPortExitCritical+0x4c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <vPortExitCritical+0x24>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	607b      	str	r3, [r7, #4]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <vPortExitCritical+0x4c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	4a08      	ldr	r2, [pc, #32]	; (8009418 <vPortExitCritical+0x4c>)
 80093f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <vPortExitCritical+0x4c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d105      	bne.n	800940e <vPortExitCritical+0x42>
 8009402:	2300      	movs	r3, #0
 8009404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	f383 8811 	msr	BASEPRI, r3
}
 800940c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr
 8009418:	20000108 	.word	0x20000108
 800941c:	00000000 	.word	0x00000000

08009420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009420:	f3ef 8009 	mrs	r0, PSP
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <pxCurrentTCBConst>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009430:	6010      	str	r0, [r2, #0]
 8009432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800943a:	f380 8811 	msr	BASEPRI, r0
 800943e:	f7ff f845 	bl	80084cc <vTaskSwitchContext>
 8009442:	f04f 0000 	mov.w	r0, #0
 8009446:	f380 8811 	msr	BASEPRI, r0
 800944a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009456:	f380 8809 	msr	PSP, r0
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	4770      	bx	lr

08009460 <pxCurrentTCBConst>:
 8009460:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop

08009468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009482:	f7fe ff65 	bl	8008350 <xTaskIncrementTick>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <xPortSysTickHandler+0x40>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f383 8811 	msr	BASEPRI, r3
}
 800949e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortSetupTimerInterrupt+0x30>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094b6:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <vPortSetupTimerInterrupt+0x34>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <vPortSetupTimerInterrupt+0x38>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <vPortSetupTimerInterrupt+0x3c>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	099b      	lsrs	r3, r3, #6
 80094c8:	4a08      	ldr	r2, [pc, #32]	; (80094ec <vPortSetupTimerInterrupt+0x40>)
 80094ca:	3b01      	subs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <vPortSetupTimerInterrupt+0x30>)
 80094d0:	2207      	movs	r2, #7
 80094d2:	601a      	str	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr
 80094dc:	e000e010 	.word	0xe000e010
 80094e0:	e000e018 	.word	0xe000e018
 80094e4:	20000000 	.word	0x20000000
 80094e8:	10624dd3 	.word	0x10624dd3
 80094ec:	e000e014 	.word	0xe000e014

080094f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094f6:	f3ef 8305 	mrs	r3, IPSR
 80094fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d914      	bls.n	800952c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009502:	4a16      	ldr	r2, [pc, #88]	; (800955c <vPortValidateInterruptPriority+0x6c>)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800950c:	4b14      	ldr	r3, [pc, #80]	; (8009560 <vPortValidateInterruptPriority+0x70>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	7afa      	ldrb	r2, [r7, #11]
 8009512:	429a      	cmp	r2, r3
 8009514:	d20a      	bcs.n	800952c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	607b      	str	r3, [r7, #4]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <vPortValidateInterruptPriority+0x74>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <vPortValidateInterruptPriority+0x78>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d90a      	bls.n	8009552 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	603b      	str	r3, [r7, #0]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <vPortValidateInterruptPriority+0x60>
	}
 8009552:	bf00      	nop
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr
 800955c:	e000e3f0 	.word	0xe000e3f0
 8009560:	20000f94 	.word	0x20000f94
 8009564:	e000ed0c 	.word	0xe000ed0c
 8009568:	20000f98 	.word	0x20000f98

0800956c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	; 0x28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009578:	f7fe fe30 	bl	80081dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800957c:	4b58      	ldr	r3, [pc, #352]	; (80096e0 <pvPortMalloc+0x174>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009584:	f000 f910 	bl	80097a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009588:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <pvPortMalloc+0x178>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4013      	ands	r3, r2
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 808e 	bne.w	80096b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01d      	beq.n	80095d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800959c:	2208      	movs	r2, #8
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d014      	beq.n	80095d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f023 0307 	bic.w	r3, r3, #7
 80095b4:	3308      	adds	r3, #8
 80095b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <pvPortMalloc+0x6c>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	617b      	str	r3, [r7, #20]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d069      	beq.n	80096b2 <pvPortMalloc+0x146>
 80095de:	4b42      	ldr	r3, [pc, #264]	; (80096e8 <pvPortMalloc+0x17c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d864      	bhi.n	80096b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095e8:	4b40      	ldr	r3, [pc, #256]	; (80096ec <pvPortMalloc+0x180>)
 80095ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095ec:	4b3f      	ldr	r3, [pc, #252]	; (80096ec <pvPortMalloc+0x180>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095f2:	e004      	b.n	80095fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d903      	bls.n	8009610 <pvPortMalloc+0xa4>
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1f1      	bne.n	80095f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009610:	4b33      	ldr	r3, [pc, #204]	; (80096e0 <pvPortMalloc+0x174>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009616:	429a      	cmp	r2, r3
 8009618:	d04b      	beq.n	80096b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2208      	movs	r2, #8
 8009620:	4413      	add	r3, r2
 8009622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	1ad2      	subs	r2, r2, r3
 8009634:	2308      	movs	r3, #8
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	429a      	cmp	r2, r3
 800963a:	d91f      	bls.n	800967c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800963c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <pvPortMalloc+0xf8>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	613b      	str	r3, [r7, #16]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009676:	69b8      	ldr	r0, [r7, #24]
 8009678:	f000 f8f8 	bl	800986c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800967c:	4b1a      	ldr	r3, [pc, #104]	; (80096e8 <pvPortMalloc+0x17c>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <pvPortMalloc+0x17c>)
 8009688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <pvPortMalloc+0x17c>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <pvPortMalloc+0x184>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d203      	bcs.n	800969e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <pvPortMalloc+0x17c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a15      	ldr	r2, [pc, #84]	; (80096f0 <pvPortMalloc+0x184>)
 800969c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <pvPortMalloc+0x178>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096b2:	f7fe fda1 	bl	80081f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00a      	beq.n	80096d6 <pvPortMalloc+0x16a>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <pvPortMalloc+0x168>
	return pvReturn;
 80096d6:	69fb      	ldr	r3, [r7, #28]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3728      	adds	r7, #40	; 0x28
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20001ba4 	.word	0x20001ba4
 80096e4:	20001bb0 	.word	0x20001bb0
 80096e8:	20001ba8 	.word	0x20001ba8
 80096ec:	20001b9c 	.word	0x20001b9c
 80096f0:	20001bac 	.word	0x20001bac

080096f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d048      	beq.n	8009798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009706:	2308      	movs	r3, #8
 8009708:	425b      	negs	r3, r3
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4413      	add	r3, r2
 800970e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <vPortFree+0xac>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4013      	ands	r3, r2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <vPortFree+0x44>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00a      	beq.n	8009756 <vPortFree+0x62>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60bb      	str	r3, [r7, #8]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <vPortFree+0xac>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4013      	ands	r3, r2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d019      	beq.n	8009798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d115      	bne.n	8009798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <vPortFree+0xac>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	43db      	mvns	r3, r3
 8009776:	401a      	ands	r2, r3
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800977c:	f7fe fd2e 	bl	80081dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <vPortFree+0xb0>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4413      	add	r3, r2
 800978a:	4a06      	ldr	r2, [pc, #24]	; (80097a4 <vPortFree+0xb0>)
 800978c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800978e:	6938      	ldr	r0, [r7, #16]
 8009790:	f000 f86c 	bl	800986c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009794:	f7fe fd30 	bl	80081f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009798:	bf00      	nop
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20001bb0 	.word	0x20001bb0
 80097a4:	20001ba8 	.word	0x20001ba8

080097a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80097b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097b4:	4b27      	ldr	r3, [pc, #156]	; (8009854 <prvHeapInit+0xac>)
 80097b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00c      	beq.n	80097dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3307      	adds	r3, #7
 80097c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <prvHeapInit+0xac>)
 80097d8:	4413      	add	r3, r2
 80097da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097e0:	4a1d      	ldr	r2, [pc, #116]	; (8009858 <prvHeapInit+0xb0>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097e6:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <prvHeapInit+0xb0>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097f4:	2208      	movs	r2, #8
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 0307 	bic.w	r3, r3, #7
 8009802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a15      	ldr	r2, [pc, #84]	; (800985c <prvHeapInit+0xb4>)
 8009808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <prvHeapInit+0xb4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2200      	movs	r2, #0
 8009810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <prvHeapInit+0xb4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <prvHeapInit+0xb4>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4a0a      	ldr	r2, [pc, #40]	; (8009860 <prvHeapInit+0xb8>)
 8009836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4a09      	ldr	r2, [pc, #36]	; (8009864 <prvHeapInit+0xbc>)
 800983e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <prvHeapInit+0xc0>)
 8009842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009846:	601a      	str	r2, [r3, #0]
}
 8009848:	bf00      	nop
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000f9c 	.word	0x20000f9c
 8009858:	20001b9c 	.word	0x20001b9c
 800985c:	20001ba4 	.word	0x20001ba4
 8009860:	20001bac 	.word	0x20001bac
 8009864:	20001ba8 	.word	0x20001ba8
 8009868:	20001bb0 	.word	0x20001bb0

0800986c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009874:	4b27      	ldr	r3, [pc, #156]	; (8009914 <prvInsertBlockIntoFreeList+0xa8>)
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	e002      	b.n	8009880 <prvInsertBlockIntoFreeList+0x14>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	429a      	cmp	r2, r3
 8009888:	d8f7      	bhi.n	800987a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d108      	bne.n	80098ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	441a      	add	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	441a      	add	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d118      	bne.n	80098f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <prvInsertBlockIntoFreeList+0xac>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d00d      	beq.n	80098ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e008      	b.n	80098fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <prvInsertBlockIntoFreeList+0xac>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e003      	b.n	80098fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d002      	beq.n	800990a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr
 8009914:	20001b9c 	.word	0x20001b9c
 8009918:	20001ba4 	.word	0x20001ba4

0800991c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009920:	2200      	movs	r2, #0
 8009922:	490e      	ldr	r1, [pc, #56]	; (800995c <MX_USB_DEVICE_Init+0x40>)
 8009924:	480e      	ldr	r0, [pc, #56]	; (8009960 <MX_USB_DEVICE_Init+0x44>)
 8009926:	f7fc f811 	bl	800594c <USBD_Init>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009930:	f7f6 fd46 	bl	80003c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009934:	490b      	ldr	r1, [pc, #44]	; (8009964 <MX_USB_DEVICE_Init+0x48>)
 8009936:	480a      	ldr	r0, [pc, #40]	; (8009960 <MX_USB_DEVICE_Init+0x44>)
 8009938:	f7fc f833 	bl	80059a2 <USBD_RegisterClass>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009942:	f7f6 fd3d 	bl	80003c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009946:	4806      	ldr	r0, [pc, #24]	; (8009960 <MX_USB_DEVICE_Init+0x44>)
 8009948:	f7fc f844 	bl	80059d4 <USBD_Start>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009952:	f7f6 fd35 	bl	80003c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009956:	bf00      	nop
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	2000010c 	.word	0x2000010c
 8009960:	20001c20 	.word	0x20001c20
 8009964:	2000000c 	.word	0x2000000c

08009968 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2212      	movs	r2, #18
 8009978:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <USBD_FS_DeviceDescriptor+0x20>)
}
 800997c:	4618      	mov	r0, r3
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	bc80      	pop	{r7}
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20000128 	.word	0x20000128

0800998c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2204      	movs	r2, #4
 800999c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800999e:	4b03      	ldr	r3, [pc, #12]	; (80099ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bc80      	pop	{r7}
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	2000013c 	.word	0x2000013c

080099b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d105      	bne.n	80099ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4907      	ldr	r1, [pc, #28]	; (80099e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099c6:	4808      	ldr	r0, [pc, #32]	; (80099e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099c8:	f7fc ff7c 	bl	80068c4 <USBD_GetString>
 80099cc:	e004      	b.n	80099d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4904      	ldr	r1, [pc, #16]	; (80099e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80099d2:	4805      	ldr	r0, [pc, #20]	; (80099e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80099d4:	f7fc ff76 	bl	80068c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20001ee4 	.word	0x20001ee4
 80099e8:	0800a184 	.word	0x0800a184

080099ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	4904      	ldr	r1, [pc, #16]	; (8009a0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099fc:	4804      	ldr	r0, [pc, #16]	; (8009a10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099fe:	f7fc ff61 	bl	80068c4 <USBD_GetString>
  return USBD_StrDesc;
 8009a02:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20001ee4 	.word	0x20001ee4
 8009a10:	0800a190 	.word	0x0800a190

08009a14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	221a      	movs	r2, #26
 8009a24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a26:	f000 f843 	bl	8009ab0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a2a:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000140 	.word	0x20000140

08009a38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6039      	str	r1, [r7, #0]
 8009a42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4907      	ldr	r1, [pc, #28]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a4e:	4808      	ldr	r0, [pc, #32]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a50:	f7fc ff38 	bl	80068c4 <USBD_GetString>
 8009a54:	e004      	b.n	8009a60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4904      	ldr	r1, [pc, #16]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a5a:	4805      	ldr	r0, [pc, #20]	; (8009a70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a5c:	f7fc ff32 	bl	80068c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20001ee4 	.word	0x20001ee4
 8009a70:	0800a1a0 	.word	0x0800a1a0

08009a74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4907      	ldr	r1, [pc, #28]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a8a:	4808      	ldr	r0, [pc, #32]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a8c:	f7fc ff1a 	bl	80068c4 <USBD_GetString>
 8009a90:	e004      	b.n	8009a9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4904      	ldr	r1, [pc, #16]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a96:	4805      	ldr	r0, [pc, #20]	; (8009aac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a98:	f7fc ff14 	bl	80068c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20001ee4 	.word	0x20001ee4
 8009aac:	0800a1ac 	.word	0x0800a1ac

08009ab0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ab6:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <Get_SerialNum+0x44>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <Get_SerialNum+0x48>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ac2:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <Get_SerialNum+0x4c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d009      	beq.n	8009aea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ad6:	2208      	movs	r2, #8
 8009ad8:	4909      	ldr	r1, [pc, #36]	; (8009b00 <Get_SerialNum+0x50>)
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f814 	bl	8009b08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ae0:	2204      	movs	r2, #4
 8009ae2:	4908      	ldr	r1, [pc, #32]	; (8009b04 <Get_SerialNum+0x54>)
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f000 f80f 	bl	8009b08 <IntToUnicode>
  }
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	1ffff7e8 	.word	0x1ffff7e8
 8009af8:	1ffff7ec 	.word	0x1ffff7ec
 8009afc:	1ffff7f0 	.word	0x1ffff7f0
 8009b00:	20000142 	.word	0x20000142
 8009b04:	20000152 	.word	0x20000152

08009b08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
 8009b1e:	e027      	b.n	8009b70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	0f1b      	lsrs	r3, r3, #28
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d80b      	bhi.n	8009b40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	0f1b      	lsrs	r3, r3, #28
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	4619      	mov	r1, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	440b      	add	r3, r1
 8009b38:	3230      	adds	r2, #48	; 0x30
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	e00a      	b.n	8009b56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	0f1b      	lsrs	r3, r3, #28
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	440b      	add	r3, r1
 8009b50:	3237      	adds	r2, #55	; 0x37
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	011b      	lsls	r3, r3, #4
 8009b5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	3301      	adds	r3, #1
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	4413      	add	r3, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	7dfa      	ldrb	r2, [r7, #23]
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d3d3      	bcc.n	8009b20 <IntToUnicode+0x18>
  }
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bc80      	pop	{r7}
 8009b82:	4770      	bx	lr

08009b84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a0d      	ldr	r2, [pc, #52]	; (8009bc8 <HAL_PCD_MspInit+0x44>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d113      	bne.n	8009bbe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <HAL_PCD_MspInit+0x48>)
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <HAL_PCD_MspInit+0x48>)
 8009b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ba0:	61d3      	str	r3, [r2, #28]
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <HAL_PCD_MspInit+0x48>)
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2105      	movs	r1, #5
 8009bb2:	2014      	movs	r0, #20
 8009bb4:	f7f7 fa59 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009bb8:	2014      	movs	r0, #20
 8009bba:	f7f7 fa72 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009bbe:	bf00      	nop
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	40005c00 	.word	0x40005c00
 8009bcc:	40021000 	.word	0x40021000

08009bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7fb ff3c 	bl	8005a64 <USBD_LL_SetupStage>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	00db      	lsls	r3, r3, #3
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fb ff6e 	bl	8005afe <USBD_LL_DataOutStage>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	440b      	add	r3, r1
 8009c4a:	333c      	adds	r3, #60	; 0x3c
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fb ffc5 	bl	8005be0 <USBD_LL_DataInStage>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fc f8d5 	bl	8005e1c <USBD_LL_SOF>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c82:	2301      	movs	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d001      	beq.n	8009c92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c8e:	f7f6 fb97 	bl	80003c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c98:	7bfa      	ldrb	r2, [r7, #15]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fc f885 	bl	8005dac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fc f83e 	bl	8005d2a <USBD_LL_Reset>
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fc f87f 	bl	8005dca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cd4:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <HAL_PCD_SuspendCallback+0x30>)
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	4a03      	ldr	r2, [pc, #12]	; (8009ce8 <HAL_PCD_SuspendCallback+0x30>)
 8009cda:	f043 0306 	orr.w	r3, r3, #6
 8009cde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fc f879 	bl	8005df2 <USBD_LL_Resume>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d10:	4a1f      	ldr	r2, [pc, #124]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009d20:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <USBD_LL_Init+0x8c>)
 8009d24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d26:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d28:	2208      	movs	r2, #8
 8009d2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d2c:	4b18      	ldr	r3, [pc, #96]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d2e:	2202      	movs	r2, #2
 8009d30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d38:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d44:	4812      	ldr	r0, [pc, #72]	; (8009d90 <USBD_LL_Init+0x88>)
 8009d46:	f7f7 fb7a 	bl	800143e <HAL_PCD_Init>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009d50:	f7f6 fb36 	bl	80003c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d5a:	2318      	movs	r3, #24
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f7f8 fea5 	bl	8002aae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d6a:	2358      	movs	r3, #88	; 0x58
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	f7f8 fe9d 	bl	8002aae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2181      	movs	r1, #129	; 0x81
 8009d82:	f7f8 fe94 	bl	8002aae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	200020e4 	.word	0x200020e4
 8009d94:	40005c00 	.word	0x40005c00

08009d98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7f7 fc50 	bl	8001654 <HAL_PCD_Start>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 f93c 	bl	800a038 <USBD_Get_USB_Status>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4603      	mov	r3, r0
 8009dde:	70fb      	strb	r3, [r7, #3]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70bb      	strb	r3, [r7, #2]
 8009de4:	4613      	mov	r3, r2
 8009de6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009df6:	78bb      	ldrb	r3, [r7, #2]
 8009df8:	883a      	ldrh	r2, [r7, #0]
 8009dfa:	78f9      	ldrb	r1, [r7, #3]
 8009dfc:	f7f7 fdca 	bl	8001994 <HAL_PCD_EP_Open>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 f916 	bl	800a038 <USBD_Get_USB_Status>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f7 fe11 	bl	8001a60 <HAL_PCD_EP_Close>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 f8f7 	bl	800a038 <USBD_Get_USB_Status>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e72:	78fa      	ldrb	r2, [r7, #3]
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7f7 feba 	bl	8001bf0 <HAL_PCD_EP_SetStall>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 f8d8 	bl	800a038 <USBD_Get_USB_Status>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7f7 fefb 	bl	8001cb0 <HAL_PCD_EP_ClrStall>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f8b9 	bl	800a038 <USBD_Get_USB_Status>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da0c      	bge.n	8009f0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	440b      	add	r3, r1
 8009f04:	3302      	adds	r3, #2
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	e00b      	b.n	8009f22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f10:	68f9      	ldr	r1, [r7, #12]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr

08009f2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7f7 fcfd 	bl	800194a <HAL_PCD_SetAddress>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f86e 	bl	800a038 <USBD_Get_USB_Status>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b086      	sub	sp, #24
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	461a      	mov	r2, r3
 8009f76:	460b      	mov	r3, r1
 8009f78:	72fb      	strb	r3, [r7, #11]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f8c:	893b      	ldrh	r3, [r7, #8]
 8009f8e:	7af9      	ldrb	r1, [r7, #11]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	f7f7 fdea 	bl	8001b6a <HAL_PCD_EP_Transmit>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 f84b 	bl	800a038 <USBD_Get_USB_Status>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	607a      	str	r2, [r7, #4]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	72fb      	strb	r3, [r7, #11]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fd2:	893b      	ldrh	r3, [r7, #8]
 8009fd4:	7af9      	ldrb	r1, [r7, #11]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	f7f7 fd8a 	bl	8001af0 <HAL_PCD_EP_Receive>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f828 	bl	800a038 <USBD_Get_USB_Status>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fec:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a000:	4b02      	ldr	r3, [pc, #8]	; (800a00c <USBD_static_malloc+0x14>)
}
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	bc80      	pop	{r7}
 800a00a:	4770      	bx	lr
 800a00c:	20001bb4 	.word	0x20001bb4

0800a010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bc80      	pop	{r7}
 800a020:	4770      	bx	lr

0800a022 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr

0800a038 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d817      	bhi.n	800a07c <USBD_Get_USB_Status+0x44>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <USBD_Get_USB_Status+0x1c>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a06b 	.word	0x0800a06b
 800a05c:	0800a071 	.word	0x0800a071
 800a060:	0800a077 	.word	0x0800a077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
    break;
 800a068:	e00b      	b.n	800a082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a06a:	2302      	movs	r3, #2
 800a06c:	73fb      	strb	r3, [r7, #15]
    break;
 800a06e:	e008      	b.n	800a082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
    break;
 800a074:	e005      	b.n	800a082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a076:	2302      	movs	r3, #2
 800a078:	73fb      	strb	r3, [r7, #15]
    break;
 800a07a:	e002      	b.n	800a082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a07c:	2302      	movs	r3, #2
 800a07e:	73fb      	strb	r3, [r7, #15]
    break;
 800a080:	bf00      	nop
  }
  return usb_status;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop

0800a090 <__libc_init_array>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	2600      	movs	r6, #0
 800a094:	4d0c      	ldr	r5, [pc, #48]	; (800a0c8 <__libc_init_array+0x38>)
 800a096:	4c0d      	ldr	r4, [pc, #52]	; (800a0cc <__libc_init_array+0x3c>)
 800a098:	1b64      	subs	r4, r4, r5
 800a09a:	10a4      	asrs	r4, r4, #2
 800a09c:	42a6      	cmp	r6, r4
 800a09e:	d109      	bne.n	800a0b4 <__libc_init_array+0x24>
 800a0a0:	f000 f830 	bl	800a104 <_init>
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	4d0a      	ldr	r5, [pc, #40]	; (800a0d0 <__libc_init_array+0x40>)
 800a0a8:	4c0a      	ldr	r4, [pc, #40]	; (800a0d4 <__libc_init_array+0x44>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	42a6      	cmp	r6, r4
 800a0b0:	d105      	bne.n	800a0be <__libc_init_array+0x2e>
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b8:	4798      	blx	r3
 800a0ba:	3601      	adds	r6, #1
 800a0bc:	e7ee      	b.n	800a09c <__libc_init_array+0xc>
 800a0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c2:	4798      	blx	r3
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	e7f2      	b.n	800a0ae <__libc_init_array+0x1e>
 800a0c8:	0800a2e0 	.word	0x0800a2e0
 800a0cc:	0800a2e0 	.word	0x0800a2e0
 800a0d0:	0800a2e0 	.word	0x0800a2e0
 800a0d4:	0800a2e4 	.word	0x0800a2e4

0800a0d8 <memcpy>:
 800a0d8:	440a      	add	r2, r1
 800a0da:	4291      	cmp	r1, r2
 800a0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e0:	d100      	bne.n	800a0e4 <memcpy+0xc>
 800a0e2:	4770      	bx	lr
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ea:	4291      	cmp	r1, r2
 800a0ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0f0:	d1f9      	bne.n	800a0e6 <memcpy+0xe>
 800a0f2:	bd10      	pop	{r4, pc}

0800a0f4 <memset>:
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	4402      	add	r2, r0
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d100      	bne.n	800a0fe <memset+0xa>
 800a0fc:	4770      	bx	lr
 800a0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a102:	e7f9      	b.n	800a0f8 <memset+0x4>

0800a104 <_init>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	bf00      	nop
 800a108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10a:	bc08      	pop	{r3}
 800a10c:	469e      	mov	lr, r3
 800a10e:	4770      	bx	lr

0800a110 <_fini>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr
