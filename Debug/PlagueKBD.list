
PlagueKBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a95c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800aa6c  0800aa6c  0001aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad6c  0800ad6c  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad6c  0800ad6c  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad6c  0800ad6c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800ad74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002278  2000015c  0800aed0  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023d4  0800aed0  000223d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef37  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004844  00000000  00000000  0003f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00043900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00044b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000063c4  00000000  00000000  00045c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ac5  00000000  00000000  0004bffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f90d  00000000  00000000  00063ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f33ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  000f3424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa54 	.word	0x0800aa54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	0800aa54 	.word	0x0800aa54

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000154:	f000 ff14 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f84e 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8a8 	bl	80002b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LEDkeymapLevel(currentKeymapLevel);
 8000160:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <main+0x70>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	4618      	mov	r0, r3
 8000166:	f000 f91d 	bl	80003a4 <LEDkeymapLevel>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016a:	f006 fd2f 	bl	8006bcc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of keyboardRecordQueue */
  keyboardRecordQueueHandle = osMessageQueueNew (16, sizeof(KEYMSGQUEUE_OBJ_t), &keyboardRecordQueue_attributes);
 800016e:	4a15      	ldr	r2, [pc, #84]	; (80001c4 <main+0x74>)
 8000170:	210d      	movs	r1, #13
 8000172:	2010      	movs	r0, #16
 8000174:	f006 ff88 	bl	8007088 <osMessageQueueNew>
 8000178:	4603      	mov	r3, r0
 800017a:	4a13      	ldr	r2, [pc, #76]	; (80001c8 <main+0x78>)
 800017c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800017e:	4a13      	ldr	r2, [pc, #76]	; (80001cc <main+0x7c>)
 8000180:	2100      	movs	r1, #0
 8000182:	4813      	ldr	r0, [pc, #76]	; (80001d0 <main+0x80>)
 8000184:	f006 fd88 	bl	8006c98 <osThreadNew>
 8000188:	4603      	mov	r3, r0
 800018a:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <main+0x84>)
 800018c:	6013      	str	r3, [r2, #0]

  /* creation of kbdMatrixRead */
  kbdMatrixReadHandle = osThreadNew(StartTask_kbdMatrixRead, NULL, &kbdMatrixRead_attributes);
 800018e:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <main+0x88>)
 8000190:	2100      	movs	r1, #0
 8000192:	4812      	ldr	r0, [pc, #72]	; (80001dc <main+0x8c>)
 8000194:	f006 fd80 	bl	8006c98 <osThreadNew>
 8000198:	4603      	mov	r3, r0
 800019a:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <main+0x90>)
 800019c:	6013      	str	r3, [r2, #0]

  /* creation of processRecord */
  processRecordHandle = osThreadNew(StartTask_processRecord, NULL, &processRecord_attributes);
 800019e:	4a11      	ldr	r2, [pc, #68]	; (80001e4 <main+0x94>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	4811      	ldr	r0, [pc, #68]	; (80001e8 <main+0x98>)
 80001a4:	f006 fd78 	bl	8006c98 <osThreadNew>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4a10      	ldr	r2, [pc, #64]	; (80001ec <main+0x9c>)
 80001ac:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of kbdHMIevent */
  kbdHMIeventHandle = osEventFlagsNew(&kbdHMIevent_attributes);
 80001ae:	4810      	ldr	r0, [pc, #64]	; (80001f0 <main+0xa0>)
 80001b0:	f006 fe4a 	bl	8006e48 <osEventFlagsNew>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4a0f      	ldr	r2, [pc, #60]	; (80001f4 <main+0xa4>)
 80001b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001ba:	f006 fd39 	bl	8006c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001be:	e7fe      	b.n	80001be <main+0x6e>
 80001c0:	20000182 	.word	0x20000182
 80001c4:	0800ab84 	.word	0x0800ab84
 80001c8:	20001bd0 	.word	0x20001bd0
 80001cc:	0800ab18 	.word	0x0800ab18
 80001d0:	08000425 	.word	0x08000425
 80001d4:	20001bc8 	.word	0x20001bc8
 80001d8:	0800ab3c 	.word	0x0800ab3c
 80001dc:	080004b1 	.word	0x080004b1
 80001e0:	20001bd8 	.word	0x20001bd8
 80001e4:	0800ab60 	.word	0x0800ab60
 80001e8:	080004c5 	.word	0x080004c5
 80001ec:	20001bd4 	.word	0x20001bd4
 80001f0:	0800ab9c 	.word	0x0800ab9c
 80001f4:	20001bcc 	.word	0x20001bcc

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	; 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f00a fc1c 	bl	800aa44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fd34 	bl	8002cbc <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f93d 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f002 ff9e 	bl	80031bc <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f927 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800028a:	2310      	movs	r3, #16
 800028c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800028e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000292:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4618      	mov	r0, r3
 8000298:	f003 f8f8 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002a2:	f000 f919 	bl	80004d8 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3750      	adds	r7, #80	; 0x50
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b34      	ldr	r3, [pc, #208]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b31      	ldr	r3, [pc, #196]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b28      	ldr	r3, [pc, #160]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a27      	ldr	r2, [pc, #156]	; (8000398 <MX_GPIO_Init+0xe8>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b25      	ldr	r3, [pc, #148]	; (8000398 <MX_GPIO_Init+0xe8>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800030c:	2200      	movs	r2, #0
 800030e:	f64f 41e6 	movw	r1, #64742	; 0xfce6
 8000312:	4822      	ldr	r0, [pc, #136]	; (800039c <MX_GPIO_Init+0xec>)
 8000314:	f001 f93f 	bl	8001596 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800031e:	4820      	ldr	r0, [pc, #128]	; (80003a0 <MX_GPIO_Init+0xf0>)
 8000320:	f001 f939 	bl	8001596 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000324:	23ff      	movs	r3, #255	; 0xff
 8000326:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800032c:	2302      	movs	r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	481a      	ldr	r0, [pc, #104]	; (80003a0 <MX_GPIO_Init+0xf0>)
 8000338:	f000 ff92 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800033c:	2301      	movs	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <MX_GPIO_Init+0xec>)
 8000350:	f000 ff86 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000354:	f64f 43e6 	movw	r3, #64742	; 0xfce6
 8000358:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <MX_GPIO_Init+0xec>)
 800036e:	f000 ff77 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2302      	movs	r3, #2
 8000382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_GPIO_Init+0xf0>)
 800038c:	f000 ff68 	bl	8001260 <HAL_GPIO_Init>

}
 8000390:	bf00      	nop
 8000392:	3720      	adds	r7, #32
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <LEDkeymapLevel>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
}

void LEDkeymapLevel(uint8_t KBDlayoutLevel){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	switch(KBDlayoutLevel){
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d011      	beq.n	80003d8 <LEDkeymapLevel+0x34>
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d01f      	beq.n	80003f8 <LEDkeymapLevel+0x54>
		default:
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	4818      	ldr	r0, [pc, #96]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003be:	f001 f8ea 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4816      	ldr	r0, [pc, #88]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003c8:	f001 f8e5 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003d2:	f001 f8e0 	bl	8001596 <HAL_GPIO_WritePin>
			break;
 80003d6:	e01f      	b.n	8000418 <LEDkeymapLevel+0x74>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2140      	movs	r1, #64	; 0x40
 80003dc:	4810      	ldr	r0, [pc, #64]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003de:	f001 f8da 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	480e      	ldr	r0, [pc, #56]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003e8:	f001 f8d5 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003f2:	f001 f8d0 	bl	8001596 <HAL_GPIO_WritePin>
			break;
 80003f6:	e00f      	b.n	8000418 <LEDkeymapLevel+0x74>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2140      	movs	r1, #64	; 0x40
 80003fc:	4808      	ldr	r0, [pc, #32]	; (8000420 <LEDkeymapLevel+0x7c>)
 80003fe:	f001 f8ca 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2120      	movs	r1, #32
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <LEDkeymapLevel+0x7c>)
 8000408:	f001 f8c5 	bl	8001596 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <LEDkeymapLevel+0x7c>)
 8000412:	f001 f8c0 	bl	8001596 <HAL_GPIO_WritePin>
			break;
 8000416:	bf00      	nop
	}




}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40010c00 	.word	0x40010c00

08000424 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800042c:	f009 ff1e 	bl	800a26c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  for(;;)
  {

	  HmiEventFlag=osEventFlagsWait(kbdHMIeventHandle, 0xFFFFU, NULL, 1000/*osWaitForever*/);  // wait forever for any flag
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <StartDefaultTask+0x84>)
 8000432:	6818      	ldr	r0, [r3, #0]
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	2200      	movs	r2, #0
 800043a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800043e:	f006 fdad 	bl	8006f9c <osEventFlagsWait>
 8000442:	60f8      	str	r0, [r7, #12]

	  if (HmiEventFlag & FLAG_LAYOUT_PAGE_UP)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d012      	beq.n	8000474 <StartDefaultTask+0x50>
	  {

		  if (currentKeymapLevel<2)
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <StartDefaultTask+0x88>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d806      	bhi.n	8000464 <StartDefaultTask+0x40>
		 	currentKeymapLevel++;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <StartDefaultTask+0x88>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <StartDefaultTask+0x88>)
 8000460:	701a      	strb	r2, [r3, #0]
 8000462:	e002      	b.n	800046a <StartDefaultTask+0x46>
		  else
			currentKeymapLevel=0;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <StartDefaultTask+0x88>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]

		  LEDkeymapLevel(currentKeymapLevel);
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <StartDefaultTask+0x88>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff98 	bl	80003a4 <LEDkeymapLevel>
	  }

	  if (HmiEventFlag & FLAG_LAYOUT_PAGE_DOWN)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0d8      	beq.n	8000430 <StartDefaultTask+0xc>
	  {
		if (currentKeymapLevel>0)
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <StartDefaultTask+0x88>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d006      	beq.n	8000494 <StartDefaultTask+0x70>
			currentKeymapLevel--;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <StartDefaultTask+0x88>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <StartDefaultTask+0x88>)
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	e002      	b.n	800049a <StartDefaultTask+0x76>
		else
			currentKeymapLevel=2;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <StartDefaultTask+0x88>)
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]

		LEDkeymapLevel(currentKeymapLevel);
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <StartDefaultTask+0x88>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff80 	bl	80003a4 <LEDkeymapLevel>
	  HmiEventFlag=osEventFlagsWait(kbdHMIeventHandle, 0xFFFFU, NULL, 1000/*osWaitForever*/);  // wait forever for any flag
 80004a4:	e7c4      	b.n	8000430 <StartDefaultTask+0xc>
 80004a6:	bf00      	nop
 80004a8:	20001bcc 	.word	0x20001bcc
 80004ac:	20000182 	.word	0x20000182

080004b0 <StartTask_kbdMatrixRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_kbdMatrixRead */
void StartTask_kbdMatrixRead(void *argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_kbdMatrixRead */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f006 fc97 	bl	8006dec <osDelay>

    kbdMatrixRead();
 80004be:	f000 f98f 	bl	80007e0 <kbdMatrixRead>
  {
 80004c2:	e7f9      	b.n	80004b8 <StartTask_kbdMatrixRead+0x8>

080004c4 <StartTask_processRecord>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_processRecord */
void StartTask_processRecord(void *argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_processRecord */
  /* Infinite loop */
  for(;;)
  {
    osDelay(30);
 80004cc:	201e      	movs	r0, #30
 80004ce:	f006 fc8d 	bl	8006dec <osDelay>
    processRecord();
 80004d2:	f000 fb07 	bl	8000ae4 <processRecord>
  {
 80004d6:	e7f9      	b.n	80004cc <StartTask_processRecord+0x8>

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <HAL_MspInit+0x68>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <HAL_MspInit+0x68>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_MspInit+0x68>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_MspInit+0x68>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <HAL_MspInit+0x68>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x68>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	210f      	movs	r1, #15
 800051e:	f06f 0001 	mvn.w	r0, #1
 8000522:	f000 fe66 	bl	80011f2 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x6c>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_MspInit+0x6c>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 fd43 	bl	800100c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000586:	f008 fe7f 	bl	8009288 <xTaskGetSchedulerState>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d001      	beq.n	8000594 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000590:	f009 fc12 	bl	8009db8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800059e:	f001 f943 	bl	8001828 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200020e8 	.word	0x200020e8

080005ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <kbdRecord>:
uint8_t currentModifier=0;

extern osMessageQueueId_t keyboardRecordQueueHandle;
extern osEventFlagsId_t kbdHMIeventHandle;

char kbdRecord(uint8_t *currentPressedKeys ){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	int i,j;
	int keyIdx=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
	char matrixChanged = False;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char found=False;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t newKeyPressedMsg[KEY_PRESS_NB_MAX]={0};
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	809a      	strh	r2, [r3, #4]
	KEYMSGQUEUE_OBJ_t keyMsgQueueObj;

	//changement tableau boutons appuyés
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005e2:	e010      	b.n	8000606 <kbdRecord+0x4e>
	{
		if (currentPressedKeys[i]!=globalPressedKeys[i])
 80005e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	4979      	ldr	r1, [pc, #484]	; (80007d4 <kbdRecord+0x21c>)
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	440b      	add	r3, r1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d003      	beq.n	8000600 <kbdRecord+0x48>
		{
			matrixChanged= True;
 80005f8:	2301      	movs	r3, #1
 80005fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 80005fe:	e005      	b.n	800060c <kbdRecord+0x54>
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000602:	3301      	adds	r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	2b09      	cmp	r3, #9
 800060a:	ddeb      	ble.n	80005e4 <kbdRecord+0x2c>
	}




	if (matrixChanged==True)
 800060c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000610:	2b01      	cmp	r3, #1
 8000612:	f040 80c6 	bne.w	80007a2 <kbdRecord+0x1ea>
	{

		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	220d      	movs	r2, #13
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00a fa10 	bl	800aa44 <memset>
		keyIdx=0;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24

		if(isValueInArray(KBD_LAYOUT_UP,currentPressedKeys,KEY_PRESS_NB_MAX)){
 8000628:	220a      	movs	r2, #10
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	20fe      	movs	r0, #254	; 0xfe
 800062e:	f000 f919 	bl	8000864 <isValueInArray>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <kbdRecord+0x8c>
			//currentKeymapLevel++;
			osEventFlagsSet(kbdHMIeventHandle, 1);
 8000638:	4b67      	ldr	r3, [pc, #412]	; (80007d8 <kbdRecord+0x220>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fc54 	bl	8006eec <osEventFlagsSet>
		}

		if(isValueInArray(KBD_LAYOUT_DOWN,currentPressedKeys,KEY_PRESS_NB_MAX)){
 8000644:	220a      	movs	r2, #10
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	f000 f90b 	bl	8000864 <isValueInArray>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d005      	beq.n	8000660 <kbdRecord+0xa8>
			//currentKeymapLevel--;
			osEventFlagsSet(kbdHMIeventHandle, 2);
 8000654:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <kbdRecord+0x220>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fc46 	bl	8006eec <osEventFlagsSet>
		}


		//detect newly pressed keys
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000664:	e033      	b.n	80006ce <kbdRecord+0x116>
		{
			found=False;
 8000666:	2300      	movs	r3, #0
 8000668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			//find globalPressedKeys elmt in currentPressedKeys
			if (currentPressedKeys[i]!=0x00){
 800066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d027      	beq.n	80006c8 <kbdRecord+0x110>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
 800067c:	e010      	b.n	80006a0 <kbdRecord+0xe8>
					if (currentPressedKeys[i]==globalPressedKeys[j]){
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	4953      	ldr	r1, [pc, #332]	; (80007d4 <kbdRecord+0x21c>)
 8000688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068a:	440b      	add	r3, r1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	429a      	cmp	r2, r3
 8000690:	d103      	bne.n	800069a <kbdRecord+0xe2>
						found=True;
 8000692:	2301      	movs	r3, #1
 8000694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 8000698:	e005      	b.n	80006a6 <kbdRecord+0xee>
				for (j=0;j<KEY_PRESS_NB_MAX;j++){
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	3301      	adds	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a2:	2b09      	cmp	r3, #9
 80006a4:	ddeb      	ble.n	800067e <kbdRecord+0xc6>
					}
				}

				//If not found, key newly pressed
				if (found==False)
 80006a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10c      	bne.n	80006c8 <kbdRecord+0x110>
				{
					keyMsgQueueObj.Buf[keyIdx]=currentPressedKeys[i];
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	f107 0208 	add.w	r2, r7, #8
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	3301      	adds	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	3301      	adds	r3, #1
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	ddc8      	ble.n	8000666 <kbdRecord+0xae>

		}


		//send to processRecord in case of key(s) newly pressed
		if (keyIdx != 0){
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00e      	beq.n	80006f8 <kbdRecord+0x140>
				keyMsgQueueObj.KeyNbr=keyIdx;
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74bb      	strb	r3, [r7, #18]
				keyMsgQueueObj.Action=PRESS;
 80006e0:	2300      	movs	r3, #0
 80006e2:	753b      	strb	r3, [r7, #20]
				keyMsgQueueObj.KeyType=UNICODE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	74fb      	strb	r3, [r7, #19]
				osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <kbdRecord+0x224>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	f107 0108 	add.w	r1, r7, #8
 80006f0:	2300      	movs	r3, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	f006 fd4e 	bl	8007194 <osMessageQueuePut>




		//detect newly released keys
		memset(&keyMsgQueueObj, 0, sizeof keyMsgQueueObj);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	220d      	movs	r2, #13
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f00a f99f 	bl	800aa44 <memset>
		keyIdx=0;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800070e:	e033      	b.n	8000778 <kbdRecord+0x1c0>
		{
			found=False;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			if (globalPressedKeys[i]!=0x00)
 8000716:	4a2f      	ldr	r2, [pc, #188]	; (80007d4 <kbdRecord+0x21c>)
 8000718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d027      	beq.n	8000772 <kbdRecord+0x1ba>
			{
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
 8000726:	e010      	b.n	800074a <kbdRecord+0x192>
				{
					if (globalPressedKeys[i]==currentPressedKeys[j]){
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <kbdRecord+0x21c>)
 800072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072c:	4413      	add	r3, r2
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	440b      	add	r3, r1
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d103      	bne.n	8000744 <kbdRecord+0x18c>
						found=True;
 800073c:	2301      	movs	r3, #1
 800073e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						break;
 8000742:	e005      	b.n	8000750 <kbdRecord+0x198>
				for (j=0;j<KEY_PRESS_NB_MAX;j++)
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	3301      	adds	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	2b09      	cmp	r3, #9
 800074e:	ddeb      	ble.n	8000728 <kbdRecord+0x170>
					}
				}

				//If not found, key newly released
				if (found==False)
 8000750:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10c      	bne.n	8000772 <kbdRecord+0x1ba>
				{

					keyMsgQueueObj.Buf[keyIdx]= globalPressedKeys[i];
 8000758:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <kbdRecord+0x21c>)
 800075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075c:	4413      	add	r3, r2
 800075e:	7819      	ldrb	r1, [r3, #0]
 8000760:	f107 0208 	add.w	r2, r7, #8
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	4413      	add	r3, r2
 8000768:	460a      	mov	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
					keyIdx++;
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	3301      	adds	r3, #1
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
		for (i=0;i<KEY_PRESS_NB_MAX;i++)
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	3301      	adds	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077a:	2b09      	cmp	r3, #9
 800077c:	ddc8      	ble.n	8000710 <kbdRecord+0x158>
				}
			}
		}

		//send to processRecord in case of key(s) newly released
		if (keyIdx != 0){
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00e      	beq.n	80007a2 <kbdRecord+0x1ea>
			keyMsgQueueObj.KeyNbr=keyIdx;
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	b2db      	uxtb	r3, r3
 8000788:	74bb      	strb	r3, [r7, #18]
			keyMsgQueueObj.Action=RELEASE;
 800078a:	2301      	movs	r3, #1
 800078c:	753b      	strb	r3, [r7, #20]
			keyMsgQueueObj.KeyType=UNICODE;
 800078e:	2302      	movs	r3, #2
 8000790:	74fb      	strb	r3, [r7, #19]
			osMessageQueuePut(keyboardRecordQueueHandle,&keyMsgQueueObj,0U,0U);
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <kbdRecord+0x224>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	f006 fcf9 	bl	8007194 <osMessageQueuePut>

	}


	//copy currentPressedKeys in globalPressedKeys
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	e00b      	b.n	80007c0 <kbdRecord+0x208>
	{
		globalPressedKeys[i]=currentPressedKeys[i];
 80007a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	7819      	ldrb	r1, [r3, #0]
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <kbdRecord+0x21c>)
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
	for (i=0;i<KEY_PRESS_NB_MAX;i++)
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	3301      	adds	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	2b09      	cmp	r3, #9
 80007c4:	ddf0      	ble.n	80007a8 <kbdRecord+0x1f0>
	}

	return matrixChanged;
 80007c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23

}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000178 	.word	0x20000178
 80007d8:	20001bcc 	.word	0x20001bcc
 80007dc:	20001bd0 	.word	0x20001bd0

080007e0 <kbdMatrixRead>:


void kbdMatrixRead(void){
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b087      	sub	sp, #28
 80007e4:	af00      	add	r7, sp, #0

	matrixState *matrixState;
	uint8_t currentPressedKeys[KEY_PRESS_NB_MAX];
	int i;

	memset(currentPressedKeys, 0, sizeof(currentPressedKeys));
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	220a      	movs	r2, #10
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00a f929 	bl	800aa44 <memset>
	matrixState=ReadMatrixState();
 80007f2:	f000 f925 	bl	8000a40 <ReadMatrixState>
 80007f6:	6138      	str	r0, [r7, #16]


	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e020      	b.n	8000840 <kbdMatrixRead+0x60>
		currentPressedKeys[i]=keymap_azerty[currentKeymapLevel][(matrixState->keyTab[i][1])-1][(matrixState->keyTab[i][0])-1];
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <kbdMatrixRead+0x7c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461c      	mov	r4, r3
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	889b      	ldrh	r3, [r3, #4]
 800080e:	1e59      	subs	r1, r3, #1
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	885b      	ldrh	r3, [r3, #2]
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <kbdMatrixRead+0x80>)
 800081e:	4623      	mov	r3, r4
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4423      	add	r3, r4
 8000824:	440b      	add	r3, r1
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	4413      	add	r3, r2
 800082a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800082e:	b2d9      	uxtb	r1, r3
 8000830:	1d3a      	adds	r2, r7, #4
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	for (i=0;i<matrixState->keyCurrentEntriesNb;i++){
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	4293      	cmp	r3, r2
 800084a:	dbd8      	blt.n	80007fe <kbdMatrixRead+0x1e>
	}


    kbdRecord(currentPressedKeys);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feb2 	bl	80005b8 <kbdRecord>
}
 8000854:	bf00      	nop
 8000856:	371c      	adds	r7, #28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	20000182 	.word	0x20000182
 8000860:	0800abbc 	.word	0x0800abbc

08000864 <isValueInArray>:




char isValueInArray(uint8_t val, uint8_t * array, uint8_t sizeArray){
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	4613      	mov	r3, r2
 8000872:	71bb      	strb	r3, [r7, #6]
	int i;
	char valFound=0;
 8000874:	2300      	movs	r3, #0
 8000876:	72fb      	strb	r3, [r7, #11]
	for (i=0;i<=sizeArray;i++){
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e00b      	b.n	8000896 <isValueInArray+0x32>
		if (array[i]==val)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	429a      	cmp	r2, r3
 800088a:	d101      	bne.n	8000890 <isValueInArray+0x2c>
			valFound=1;
 800088c:	2301      	movs	r3, #1
 800088e:	72fb      	strb	r3, [r7, #11]
	for (i=0;i<=sizeArray;i++){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	429a      	cmp	r2, r3
 800089c:	ddef      	ble.n	800087e <isValueInArray+0x1a>
	}
	return valFound;
 800089e:	7afb      	ldrb	r3, [r7, #11]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <bWriteColumnState>:


#include "matrixRead.h"


void bWriteColumnState(int column, uint8_t state){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d851      	bhi.n	8000964 <bWriteColumnState+0xb8>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <bWriteColumnState+0x1c>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008e9 	.word	0x080008e9
 80008cc:	080008f7 	.word	0x080008f7
 80008d0:	08000905 	.word	0x08000905
 80008d4:	08000915 	.word	0x08000915
 80008d8:	08000925 	.word	0x08000925
 80008dc:	08000935 	.word	0x08000935
 80008e0:	08000945 	.word	0x08000945
 80008e4:	08000955 	.word	0x08000955
	switch (column){
		case 1 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,state);
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	461a      	mov	r2, r3
 80008ec:	2102      	movs	r1, #2
 80008ee:	481f      	ldr	r0, [pc, #124]	; (800096c <bWriteColumnState+0xc0>)
 80008f0:	f000 fe51 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 80008f4:	e036      	b.n	8000964 <bWriteColumnState+0xb8>
		case 2 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,state);
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	461a      	mov	r2, r3
 80008fa:	2104      	movs	r1, #4
 80008fc:	481b      	ldr	r0, [pc, #108]	; (800096c <bWriteColumnState+0xc0>)
 80008fe:	f000 fe4a 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000902:	e02f      	b.n	8000964 <bWriteColumnState+0xb8>
		case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,state);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	461a      	mov	r2, r3
 8000908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090c:	4817      	ldr	r0, [pc, #92]	; (800096c <bWriteColumnState+0xc0>)
 800090e:	f000 fe42 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000912:	e027      	b.n	8000964 <bWriteColumnState+0xb8>
		case 4 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,state);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	461a      	mov	r2, r3
 8000918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <bWriteColumnState+0xc0>)
 800091e:	f000 fe3a 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000922:	e01f      	b.n	8000964 <bWriteColumnState+0xb8>
		case 5 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,state);
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	461a      	mov	r2, r3
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <bWriteColumnState+0xc0>)
 800092e:	f000 fe32 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000932:	e017      	b.n	8000964 <bWriteColumnState+0xb8>
		case 6 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,state);
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	461a      	mov	r2, r3
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <bWriteColumnState+0xc0>)
 800093e:	f000 fe2a 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000942:	e00f      	b.n	8000964 <bWriteColumnState+0xb8>
		case 7 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,state);
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	461a      	mov	r2, r3
 8000948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <bWriteColumnState+0xc0>)
 800094e:	f000 fe22 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000952:	e007      	b.n	8000964 <bWriteColumnState+0xb8>
		case 8 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,state);
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	461a      	mov	r2, r3
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <bWriteColumnState+0xc0>)
 800095e:	f000 fe1a 	bl	8001596 <HAL_GPIO_WritePin>
				break;
 8000962:	bf00      	nop
			}
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010c00 	.word	0x40010c00

08000970 <bReadRowState>:


int bReadRowState(int row){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	int state=0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	2b08      	cmp	r3, #8
 8000982:	d854      	bhi.n	8000a2e <bReadRowState+0xbe>
 8000984:	a201      	add	r2, pc, #4	; (adr r2, 800098c <bReadRowState+0x1c>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	080009b1 	.word	0x080009b1
 8000990:	080009bf 	.word	0x080009bf
 8000994:	080009cd 	.word	0x080009cd
 8000998:	080009db 	.word	0x080009db
 800099c:	080009e9 	.word	0x080009e9
 80009a0:	080009f7 	.word	0x080009f7
 80009a4:	08000a05 	.word	0x08000a05
 80009a8:	08000a13 	.word	0x08000a13
 80009ac:	08000a21 	.word	0x08000a21
	switch (row){
		case 1 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80009b0:	2101      	movs	r1, #1
 80009b2:	4821      	ldr	r0, [pc, #132]	; (8000a38 <bReadRowState+0xc8>)
 80009b4:	f000 fdd8 	bl	8001568 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	60fb      	str	r3, [r7, #12]
			break;
 80009bc:	e037      	b.n	8000a2e <bReadRowState+0xbe>
		case 2 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 80009be:	2102      	movs	r1, #2
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <bReadRowState+0xc8>)
 80009c2:	f000 fdd1 	bl	8001568 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	60fb      	str	r3, [r7, #12]
			break;
 80009ca:	e030      	b.n	8000a2e <bReadRowState+0xbe>
		case 3:
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
 80009cc:	2104      	movs	r1, #4
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <bReadRowState+0xc8>)
 80009d0:	f000 fdca 	bl	8001568 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	60fb      	str	r3, [r7, #12]
			break;
 80009d8:	e029      	b.n	8000a2e <bReadRowState+0xbe>
		case 4 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 80009da:	2108      	movs	r1, #8
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <bReadRowState+0xc8>)
 80009de:	f000 fdc3 	bl	8001568 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	60fb      	str	r3, [r7, #12]
			break;
 80009e6:	e022      	b.n	8000a2e <bReadRowState+0xbe>
		case 5 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 80009e8:	2110      	movs	r1, #16
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <bReadRowState+0xc8>)
 80009ec:	f000 fdbc 	bl	8001568 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	60fb      	str	r3, [r7, #12]
			break;
 80009f4:	e01b      	b.n	8000a2e <bReadRowState+0xbe>
		case 6 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80009f6:	2120      	movs	r1, #32
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <bReadRowState+0xc8>)
 80009fa:	f000 fdb5 	bl	8001568 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60fb      	str	r3, [r7, #12]
			break;
 8000a02:	e014      	b.n	8000a2e <bReadRowState+0xbe>
		case 7 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <bReadRowState+0xc8>)
 8000a08:	f000 fdae 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]
			break;
 8000a10:	e00d      	b.n	8000a2e <bReadRowState+0xbe>
		case 8 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <bReadRowState+0xc8>)
 8000a16:	f000 fda7 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	60fb      	str	r3, [r7, #12]
			break;
 8000a1e:	e006      	b.n	8000a2e <bReadRowState+0xbe>
		case 9:
			state=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000a20:	2101      	movs	r1, #1
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <bReadRowState+0xcc>)
 8000a24:	f000 fda0 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60fb      	str	r3, [r7, #12]
			break;
 8000a2c:	bf00      	nop
	}
	return state;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <ReadMatrixState>:
 * The function then return the pointer to int array size 2 containing:
 * 			- array[0]=column
 * 			- array[1]=row
 * if no key is pressed, it then return {0,0}
 */
matrixState * ReadMatrixState(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	int col=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
	int row=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
	static matrixState matrixState;

	matrixState.keyCurrentEntriesNb=0;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <ReadMatrixState+0x9c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	memset(matrixState.keyTab, 0, sizeof matrixState.keyTab);
 8000a54:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <ReadMatrixState+0xa0>)
 8000a5c:	f009 fff2 	bl	800aa44 <memset>


	for(col=1;col<=8;col++){
 8000a60:	2301      	movs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	e031      	b.n	8000aca <ReadMatrixState+0x8a>

		bWriteColumnState(col,1);
 8000a66:	2101      	movs	r1, #1
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff1f 	bl	80008ac <bWriteColumnState>

		for (row=1;row<=9;row++)
 8000a6e:	2301      	movs	r3, #1
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	e020      	b.n	8000ab6 <ReadMatrixState+0x76>
			{
				if (bReadRowState(row))
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f7ff ff7b 	bl	8000970 <bReadRowState>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d017      	beq.n	8000ab0 <ReadMatrixState+0x70>
				{
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][0]=col;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <ReadMatrixState+0x9c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	b291      	uxth	r1, r2
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <ReadMatrixState+0x9c>)
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	460a      	mov	r2, r1
 8000a90:	805a      	strh	r2, [r3, #2]
					matrixState.keyTab[matrixState.keyCurrentEntriesNb][1]=row;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <ReadMatrixState+0x9c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	b291      	uxth	r1, r2
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <ReadMatrixState+0x9c>)
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	809a      	strh	r2, [r3, #4]
					matrixState.keyCurrentEntriesNb++;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <ReadMatrixState+0x9c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <ReadMatrixState+0x9c>)
 8000aae:	701a      	strb	r2, [r3, #0]
		for (row=1;row<=9;row++)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b09      	cmp	r3, #9
 8000aba:	dddb      	ble.n	8000a74 <ReadMatrixState+0x34>
				}

			}
		bWriteColumnState(col,0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fef4 	bl	80008ac <bWriteColumnState>
	for(col=1;col<=8;col++){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	ddca      	ble.n	8000a66 <ReadMatrixState+0x26>
	}
	return &matrixState;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <ReadMatrixState+0x9c>)

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000184 	.word	0x20000184
 8000ae0:	20000186 	.word	0x20000186

08000ae4 <processRecord>:


void processU*/


void processRecord(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
	KEYMSGQUEUE_OBJ_t keyMsgQueueObj;
	uint32_t queueCount;
	osStatus_t status;
	uint8_t i,keycodeIdx;

	queueCount= osMessageQueueGetCount(keyboardRecordQueueHandle);
 8000aea:	4bad      	ldr	r3, [pc, #692]	; (8000da0 <processRecord+0x2bc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f006 fc36 	bl	8007360 <osMessageQueueGetCount>
 8000af4:	61b8      	str	r0, [r7, #24]

	if (queueCount>=1){
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 8210 	beq.w	8000f1e <processRecord+0x43a>
		status=osMessageQueueGet(keyboardRecordQueueHandle,&keyMsgQueueObj,NULL,0U);
 8000afe:	4ba8      	ldr	r3, [pc, #672]	; (8000da0 <processRecord+0x2bc>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	1d39      	adds	r1, r7, #4
 8000b04:	2300      	movs	r3, #0
 8000b06:	2200      	movs	r2, #0
 8000b08:	f006 fbb8 	bl	800727c <osMessageQueueGet>
 8000b0c:	6178      	str	r0, [r7, #20]

		if(keyMsgQueueObj.Action==PRESS)
 8000b0e:	7c3b      	ldrb	r3, [r7, #16]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 80f2 	bne.w	8000cfa <processRecord+0x216>
		{

			keycodeIdx=0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000b1a:	4ba2      	ldr	r3, [pc, #648]	; (8000da4 <processRecord+0x2c0>)
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000b24:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <processRecord+0x2c4>)
 8000b26:	785a      	ldrb	r2, [r3, #1]
 8000b28:	4b9e      	ldr	r3, [pc, #632]	; (8000da4 <processRecord+0x2c0>)
 8000b2a:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	77fb      	strb	r3, [r7, #31]
 8000b30:	e0d9      	b.n	8000ce6 <processRecord+0x202>
			{

				switch (keyMsgQueueObj.Buf[i])
 8000b32:	7ffb      	ldrb	r3, [r7, #31]
 8000b34:	f107 0220 	add.w	r2, r7, #32
 8000b38:	4413      	add	r3, r2
 8000b3a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000b3e:	3be0      	subs	r3, #224	; 0xe0
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d873      	bhi.n	8000c2c <processRecord+0x148>
 8000b44:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <processRecord+0x68>)
 8000b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4a:	bf00      	nop
 8000b4c:	08000b6d 	.word	0x08000b6d
 8000b50:	08000b85 	.word	0x08000b85
 8000b54:	08000b9d 	.word	0x08000b9d
 8000b58:	08000bb5 	.word	0x08000bb5
 8000b5c:	08000bcd 	.word	0x08000bcd
 8000b60:	08000be5 	.word	0x08000be5
 8000b64:	08000bfd 	.word	0x08000bfd
 8000b68:	08000c15 	.word	0x08000c15
					{

					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LCTRL);
 8000b6c:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <processRecord+0x2c4>)
 8000b6e:	785b      	ldrb	r3, [r3, #1]
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b8b      	ldr	r3, [pc, #556]	; (8000da4 <processRecord+0x2c0>)
 8000b78:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000b7a:	4b8a      	ldr	r3, [pc, #552]	; (8000da4 <processRecord+0x2c0>)
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b8a      	ldr	r3, [pc, #552]	; (8000da8 <processRecord+0x2c4>)
 8000b80:	705a      	strb	r2, [r3, #1]
						break;
 8000b82:	e0ad      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LSHIFT);
 8000b84:	4b88      	ldr	r3, [pc, #544]	; (8000da8 <processRecord+0x2c4>)
 8000b86:	785b      	ldrb	r3, [r3, #1]
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b85      	ldr	r3, [pc, #532]	; (8000da4 <processRecord+0x2c0>)
 8000b90:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000b92:	4b84      	ldr	r3, [pc, #528]	; (8000da4 <processRecord+0x2c0>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <processRecord+0x2c4>)
 8000b98:	705a      	strb	r2, [r3, #1]
						break;
 8000b9a:	e0a1      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LALT);
 8000b9c:	4b82      	ldr	r3, [pc, #520]	; (8000da8 <processRecord+0x2c4>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	; (8000da4 <processRecord+0x2c0>)
 8000ba8:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000baa:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <processRecord+0x2c0>)
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <processRecord+0x2c4>)
 8000bb0:	705a      	strb	r2, [r3, #1]
						break;
 8000bb2:	e095      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_LMETA);
 8000bb4:	4b7c      	ldr	r3, [pc, #496]	; (8000da8 <processRecord+0x2c4>)
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <processRecord+0x2c0>)
 8000bc0:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000bc2:	4b78      	ldr	r3, [pc, #480]	; (8000da4 <processRecord+0x2c0>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <processRecord+0x2c4>)
 8000bc8:	705a      	strb	r2, [r3, #1]
						break;
 8000bca:	e089      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RCTRL);
 8000bcc:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <processRecord+0x2c4>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <processRecord+0x2c0>)
 8000bd8:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000bda:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <processRecord+0x2c0>)
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b72      	ldr	r3, [pc, #456]	; (8000da8 <processRecord+0x2c4>)
 8000be0:	705a      	strb	r2, [r3, #1]
						break;
 8000be2:	e07d      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RSHIFT);
 8000be4:	4b70      	ldr	r3, [pc, #448]	; (8000da8 <processRecord+0x2c4>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <processRecord+0x2c0>)
 8000bf0:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000bf2:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <processRecord+0x2c0>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <processRecord+0x2c4>)
 8000bf8:	705a      	strb	r2, [r3, #1]
						break;
 8000bfa:	e071      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RALT);
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <processRecord+0x2c4>)
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <processRecord+0x2c0>)
 8000c08:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c0a:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <processRecord+0x2c0>)
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b66      	ldr	r3, [pc, #408]	; (8000da8 <processRecord+0x2c4>)
 8000c10:	705a      	strb	r2, [r3, #1]
						break;
 8000c12:	e065      	b.n	8000ce0 <processRecord+0x1fc>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER | KEY_MOD_RMETA);
 8000c14:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <processRecord+0x2c4>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <processRecord+0x2c0>)
 8000c20:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000c22:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <processRecord+0x2c0>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b60      	ldr	r3, [pc, #384]	; (8000da8 <processRecord+0x2c4>)
 8000c28:	705a      	strb	r2, [r3, #1]
						break;
 8000c2a:	e059      	b.n	8000ce0 <processRecord+0x1fc>

					default:
						switch (keycodeIdx)
 8000c2c:	7fbb      	ldrb	r3, [r7, #30]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	d856      	bhi.n	8000ce0 <processRecord+0x1fc>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <processRecord+0x154>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c69 	.word	0x08000c69
 8000c40:	08000c81 	.word	0x08000c81
 8000c44:	08000c99 	.word	0x08000c99
 8000c48:	08000cb1 	.word	0x08000cb1
 8000c4c:	08000cc9 	.word	0x08000cc9
						{
							case 0:
								keyboardhid.KEYCODE1=keyMsgQueueObj.Buf[i];
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	f107 0220 	add.w	r2, r7, #32
 8000c56:	4413      	add	r3, r2
 8000c58:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000c5c:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <processRecord+0x2c0>)
 8000c5e:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000c60:	7fbb      	ldrb	r3, [r7, #30]
 8000c62:	3301      	adds	r3, #1
 8000c64:	77bb      	strb	r3, [r7, #30]
								break;
 8000c66:	e03b      	b.n	8000ce0 <processRecord+0x1fc>
							case 1:
								keyboardhid.KEYCODE2=keyMsgQueueObj.Buf[i];
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	f107 0220 	add.w	r2, r7, #32
 8000c6e:	4413      	add	r3, r2
 8000c70:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000c74:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <processRecord+0x2c0>)
 8000c76:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000c78:	7fbb      	ldrb	r3, [r7, #30]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	77bb      	strb	r3, [r7, #30]
								break;
 8000c7e:	e02f      	b.n	8000ce0 <processRecord+0x1fc>
							case 2:
								keyboardhid.KEYCODE3=keyMsgQueueObj.Buf[i];
 8000c80:	7ffb      	ldrb	r3, [r7, #31]
 8000c82:	f107 0220 	add.w	r2, r7, #32
 8000c86:	4413      	add	r3, r2
 8000c88:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000c8c:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <processRecord+0x2c0>)
 8000c8e:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000c90:	7fbb      	ldrb	r3, [r7, #30]
 8000c92:	3301      	adds	r3, #1
 8000c94:	77bb      	strb	r3, [r7, #30]
								break;
 8000c96:	e023      	b.n	8000ce0 <processRecord+0x1fc>
							case 3:
								keyboardhid.KEYCODE4=keyMsgQueueObj.Buf[i];
 8000c98:	7ffb      	ldrb	r3, [r7, #31]
 8000c9a:	f107 0220 	add.w	r2, r7, #32
 8000c9e:	4413      	add	r3, r2
 8000ca0:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <processRecord+0x2c0>)
 8000ca6:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000ca8:	7fbb      	ldrb	r3, [r7, #30]
 8000caa:	3301      	adds	r3, #1
 8000cac:	77bb      	strb	r3, [r7, #30]
								break;
 8000cae:	e017      	b.n	8000ce0 <processRecord+0x1fc>
							case 4:
								keyboardhid.KEYCODE5=keyMsgQueueObj.Buf[i];
 8000cb0:	7ffb      	ldrb	r3, [r7, #31]
 8000cb2:	f107 0220 	add.w	r2, r7, #32
 8000cb6:	4413      	add	r3, r2
 8000cb8:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <processRecord+0x2c0>)
 8000cbe:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000cc0:	7fbb      	ldrb	r3, [r7, #30]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	77bb      	strb	r3, [r7, #30]
								break;
 8000cc6:	e00b      	b.n	8000ce0 <processRecord+0x1fc>
							case 5:
								keyboardhid.KEYCODE6=keyMsgQueueObj.Buf[i];
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	f107 0220 	add.w	r2, r7, #32
 8000cce:	4413      	add	r3, r2
 8000cd0:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <processRecord+0x2c0>)
 8000cd6:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000cd8:	7fbb      	ldrb	r3, [r7, #30]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	77bb      	strb	r3, [r7, #30]
								break;
 8000cde:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000ce0:	7ffb      	ldrb	r3, [r7, #31]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	77fb      	strb	r3, [r7, #31]
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	7ffa      	ldrb	r2, [r7, #31]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	f4ff af21 	bcc.w	8000b32 <processRecord+0x4e>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	492c      	ldr	r1, [pc, #176]	; (8000da4 <processRecord+0x2c0>)
 8000cf4:	482d      	ldr	r0, [pc, #180]	; (8000dac <processRecord+0x2c8>)
 8000cf6:	f004 fe79 	bl	80059ec <USBD_HID_SendReport>
			}




		if(keyMsgQueueObj.Action==RELEASE){
 8000cfa:	7c3b      	ldrb	r3, [r7, #16]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	f040 810e 	bne.w	8000f1e <processRecord+0x43a>

			keycodeIdx=0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	77bb      	strb	r3, [r7, #30]
			keyboardhid=keyboardhid_empty;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <processRecord+0x2c0>)
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	6053      	str	r3, [r2, #4]
			keyboardhid.MODIFIER=globalState.MODIFIER;
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <processRecord+0x2c4>)
 8000d12:	785a      	ldrb	r2, [r3, #1]
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <processRecord+0x2c0>)
 8000d16:	701a      	strb	r2, [r3, #0]

			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
 8000d1c:	e0f5      	b.n	8000f0a <processRecord+0x426>
			{


				switch (keyMsgQueueObj.Buf[i])
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	f107 0220 	add.w	r2, r7, #32
 8000d24:	4413      	add	r3, r2
 8000d26:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d2a:	3be0      	subs	r3, #224	; 0xe0
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	d87c      	bhi.n	8000e2a <processRecord+0x346>
 8000d30:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <processRecord+0x254>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d59 	.word	0x08000d59
 8000d3c:	08000d71 	.word	0x08000d71
 8000d40:	08000d89 	.word	0x08000d89
 8000d44:	08000db1 	.word	0x08000db1
 8000d48:	08000dc9 	.word	0x08000dc9
 8000d4c:	08000de1 	.word	0x08000de1
 8000d50:	08000df9 	.word	0x08000df9
 8000d54:	08000e11 	.word	0x08000e11
					{
					case KEY_LEFTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LCTRL);
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <processRecord+0x2c4>)
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <processRecord+0x2c0>)
 8000d64:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <processRecord+0x2c0>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <processRecord+0x2c4>)
 8000d6c:	705a      	strb	r2, [r3, #1]
						break;
 8000d6e:	e0c9      	b.n	8000f04 <processRecord+0x420>
					case KEY_LEFTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LSHIFT);
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <processRecord+0x2c4>)
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	f083 0302 	eor.w	r3, r3, #2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <processRecord+0x2c0>)
 8000d7c:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <processRecord+0x2c0>)
 8000d80:	781a      	ldrb	r2, [r3, #0]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <processRecord+0x2c4>)
 8000d84:	705a      	strb	r2, [r3, #1]
						break;
 8000d86:	e0bd      	b.n	8000f04 <processRecord+0x420>
					case KEY_LEFTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LALT);
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <processRecord+0x2c4>)
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	f083 0304 	eor.w	r3, r3, #4
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <processRecord+0x2c0>)
 8000d94:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000d96:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <processRecord+0x2c0>)
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <processRecord+0x2c4>)
 8000d9c:	705a      	strb	r2, [r3, #1]
						break;
 8000d9e:	e0b1      	b.n	8000f04 <processRecord+0x420>
 8000da0:	20001bd0 	.word	0x20001bd0
 8000da4:	200002a0 	.word	0x200002a0
 8000da8:	20001bdc 	.word	0x20001bdc
 8000dac:	20001c24 	.word	0x20001c24
					case KEY_LEFTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_LMETA);
 8000db0:	4b5d      	ldr	r3, [pc, #372]	; (8000f28 <processRecord+0x444>)
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	f083 0308 	eor.w	r3, r3, #8
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b5c      	ldr	r3, [pc, #368]	; (8000f2c <processRecord+0x448>)
 8000dbc:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000dbe:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <processRecord+0x448>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <processRecord+0x444>)
 8000dc4:	705a      	strb	r2, [r3, #1]
						break;
 8000dc6:	e09d      	b.n	8000f04 <processRecord+0x420>
					case KEY_RIGHTCTRL:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RCTRL);
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <processRecord+0x444>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	f083 0310 	eor.w	r3, r3, #16
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <processRecord+0x448>)
 8000dd4:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000dd6:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <processRecord+0x448>)
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <processRecord+0x444>)
 8000ddc:	705a      	strb	r2, [r3, #1]
						break;
 8000dde:	e091      	b.n	8000f04 <processRecord+0x420>
					case KEY_RIGHTSHIFT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RSHIFT);
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <processRecord+0x444>)
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	f083 0320 	eor.w	r3, r3, #32
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <processRecord+0x448>)
 8000dec:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000dee:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <processRecord+0x448>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <processRecord+0x444>)
 8000df4:	705a      	strb	r2, [r3, #1]
						break;
 8000df6:	e085      	b.n	8000f04 <processRecord+0x420>
					case KEY_RIGHTALT:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RALT);
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <processRecord+0x444>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <processRecord+0x448>)
 8000e04:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <processRecord+0x448>)
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <processRecord+0x444>)
 8000e0c:	705a      	strb	r2, [r3, #1]
						break;
 8000e0e:	e079      	b.n	8000f04 <processRecord+0x420>
					case KEY_RIGHTMETA:
						keyboardhid.MODIFIER = (globalState.MODIFIER ^ KEY_MOD_RMETA);
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <processRecord+0x444>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <processRecord+0x448>)
 8000e1e:	701a      	strb	r2, [r3, #0]
						globalState.MODIFIER = keyboardhid.MODIFIER ;
 8000e20:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <processRecord+0x448>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <processRecord+0x444>)
 8000e26:	705a      	strb	r2, [r3, #1]
						break;
 8000e28:	e06c      	b.n	8000f04 <processRecord+0x420>

					default:
						switch (keycodeIdx)
 8000e2a:	7fbb      	ldrb	r3, [r7, #30]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d869      	bhi.n	8000f04 <processRecord+0x420>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <processRecord+0x354>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000e6f 	.word	0x08000e6f
 8000e40:	08000e8d 	.word	0x08000e8d
 8000e44:	08000eab 	.word	0x08000eab
 8000e48:	08000ec9 	.word	0x08000ec9
 8000e4c:	08000ee7 	.word	0x08000ee7
						{
							case 0:
								keyboardhid.KEYCODE1=(keyMsgQueueObj.Buf[i] | 0x80);
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	f107 0220 	add.w	r2, r7, #32
 8000e56:	4413      	add	r3, r2
 8000e58:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <processRecord+0x448>)
 8000e64:	709a      	strb	r2, [r3, #2]
								keycodeIdx++;
 8000e66:	7fbb      	ldrb	r3, [r7, #30]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	77bb      	strb	r3, [r7, #30]
								break;
 8000e6c:	e04a      	b.n	8000f04 <processRecord+0x420>
							case 1:
								keyboardhid.KEYCODE2=(keyMsgQueueObj.Buf[i] | 0x80);
 8000e6e:	7ffb      	ldrb	r3, [r7, #31]
 8000e70:	f107 0220 	add.w	r2, r7, #32
 8000e74:	4413      	add	r3, r2
 8000e76:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <processRecord+0x448>)
 8000e82:	70da      	strb	r2, [r3, #3]
								keycodeIdx++;
 8000e84:	7fbb      	ldrb	r3, [r7, #30]
 8000e86:	3301      	adds	r3, #1
 8000e88:	77bb      	strb	r3, [r7, #30]
								break;
 8000e8a:	e03b      	b.n	8000f04 <processRecord+0x420>
							case 2:
								keyboardhid.KEYCODE3=(keyMsgQueueObj.Buf[i] | 0x80);
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	f107 0220 	add.w	r2, r7, #32
 8000e92:	4413      	add	r3, r2
 8000e94:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <processRecord+0x448>)
 8000ea0:	711a      	strb	r2, [r3, #4]
								keycodeIdx++;
 8000ea2:	7fbb      	ldrb	r3, [r7, #30]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	77bb      	strb	r3, [r7, #30]
								break;
 8000ea8:	e02c      	b.n	8000f04 <processRecord+0x420>
							case 3:
								keyboardhid.KEYCODE4=(keyMsgQueueObj.Buf[i] | 0x80);
 8000eaa:	7ffb      	ldrb	r3, [r7, #31]
 8000eac:	f107 0220 	add.w	r2, r7, #32
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <processRecord+0x448>)
 8000ebe:	715a      	strb	r2, [r3, #5]
								keycodeIdx++;
 8000ec0:	7fbb      	ldrb	r3, [r7, #30]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	77bb      	strb	r3, [r7, #30]
								break;
 8000ec6:	e01d      	b.n	8000f04 <processRecord+0x420>
							case 4:
								keyboardhid.KEYCODE5=(keyMsgQueueObj.Buf[i] | 0x80);
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	f107 0220 	add.w	r2, r7, #32
 8000ece:	4413      	add	r3, r2
 8000ed0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <processRecord+0x448>)
 8000edc:	719a      	strb	r2, [r3, #6]
								keycodeIdx++;
 8000ede:	7fbb      	ldrb	r3, [r7, #30]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	77bb      	strb	r3, [r7, #30]
								break;
 8000ee4:	e00e      	b.n	8000f04 <processRecord+0x420>
							case 5:
								keyboardhid.KEYCODE6=(keyMsgQueueObj.Buf[i] | 0x80);
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	f107 0220 	add.w	r2, r7, #32
 8000eec:	4413      	add	r3, r2
 8000eee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <processRecord+0x448>)
 8000efa:	71da      	strb	r2, [r3, #7]
								keycodeIdx++;
 8000efc:	7fbb      	ldrb	r3, [r7, #30]
 8000efe:	3301      	adds	r3, #1
 8000f00:	77bb      	strb	r3, [r7, #30]
								break;
 8000f02:	bf00      	nop
			for(i=0;i<keyMsgQueueObj.KeyNbr;i++)
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
 8000f06:	3301      	adds	r3, #1
 8000f08:	77fb      	strb	r3, [r7, #31]
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	7ffa      	ldrb	r2, [r7, #31]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	f4ff af05 	bcc.w	8000d1e <processRecord+0x23a>
					}
				}


			//Envoi de la trame USB
			USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000f14:	2208      	movs	r2, #8
 8000f16:	4905      	ldr	r1, [pc, #20]	; (8000f2c <processRecord+0x448>)
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <processRecord+0x44c>)
 8000f1a:	f004 fd67 	bl	80059ec <USBD_HID_SendReport>

		}

	}

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20001bdc 	.word	0x20001bdc
 8000f2c:	200002a0 	.word	0x200002a0
 8000f30:	20001c24 	.word	0x20001c24

08000f34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f36:	e003      	b.n	8000f40 <LoopCopyDataInit>

08000f38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f3e:	3104      	adds	r1, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f48:	d3f6      	bcc.n	8000f38 <CopyDataInit>
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f4c:	e002      	b.n	8000f54 <LoopFillZerobss>

08000f4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f50:	f842 3b04 	str.w	r3, [r2], #4

08000f54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f58:	d3f9      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f5a:	f7ff fb27 	bl	80005ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f009 fd3f 	bl	800a9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff f8f5 	bl	8000150 <main>
  bx lr
 8000f66:	4770      	bx	lr
  ldr r3, =_sidata
 8000f68:	0800ad74 	.word	0x0800ad74
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f70:	2000015c 	.word	0x2000015c
  ldr r2, =_sbss
 8000f74:	2000015c 	.word	0x2000015c
  ldr r3, = _ebss
 8000f78:	200023d4 	.word	0x200023d4

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x28>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x28>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f923 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff faa2 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40022000 	.word	0x40022000

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f93b 	bl	8001246 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f903 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x1c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x20>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_IncTick+0x20>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	20000008 	.word	0x20000008
 800102c:	20001be0 	.word	0x20001be0

08001030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_GetTick+0x10>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20001be0 	.word	0x20001be0

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4906      	ldr	r1, [pc, #24]	; (80010dc <__NVIC_EnableIRQ+0x34>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff90 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff2d 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff42 	bl	800108c <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff90 	bl	8001134 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5f 	bl	80010e0 <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff35 	bl	80010a8 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa2 	bl	8001198 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b08b      	sub	sp, #44	; 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	e169      	b.n	8001548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001274:	2201      	movs	r2, #1
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8158 	bne.w	8001542 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a9a      	ldr	r2, [pc, #616]	; (8001500 <HAL_GPIO_Init+0x2a0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d05e      	beq.n	800135a <HAL_GPIO_Init+0xfa>
 800129c:	4a98      	ldr	r2, [pc, #608]	; (8001500 <HAL_GPIO_Init+0x2a0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d875      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012a2:	4a98      	ldr	r2, [pc, #608]	; (8001504 <HAL_GPIO_Init+0x2a4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d058      	beq.n	800135a <HAL_GPIO_Init+0xfa>
 80012a8:	4a96      	ldr	r2, [pc, #600]	; (8001504 <HAL_GPIO_Init+0x2a4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d86f      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012ae:	4a96      	ldr	r2, [pc, #600]	; (8001508 <HAL_GPIO_Init+0x2a8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d052      	beq.n	800135a <HAL_GPIO_Init+0xfa>
 80012b4:	4a94      	ldr	r2, [pc, #592]	; (8001508 <HAL_GPIO_Init+0x2a8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d869      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012ba:	4a94      	ldr	r2, [pc, #592]	; (800150c <HAL_GPIO_Init+0x2ac>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d04c      	beq.n	800135a <HAL_GPIO_Init+0xfa>
 80012c0:	4a92      	ldr	r2, [pc, #584]	; (800150c <HAL_GPIO_Init+0x2ac>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d863      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012c6:	4a92      	ldr	r2, [pc, #584]	; (8001510 <HAL_GPIO_Init+0x2b0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d046      	beq.n	800135a <HAL_GPIO_Init+0xfa>
 80012cc:	4a90      	ldr	r2, [pc, #576]	; (8001510 <HAL_GPIO_Init+0x2b0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d85d      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d82a      	bhi.n	800132c <HAL_GPIO_Init+0xcc>
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d859      	bhi.n	800138e <HAL_GPIO_Init+0x12e>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <HAL_GPIO_Init+0x80>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	0800135b 	.word	0x0800135b
 80012e4:	08001335 	.word	0x08001335
 80012e8:	08001347 	.word	0x08001347
 80012ec:	08001389 	.word	0x08001389
 80012f0:	0800138f 	.word	0x0800138f
 80012f4:	0800138f 	.word	0x0800138f
 80012f8:	0800138f 	.word	0x0800138f
 80012fc:	0800138f 	.word	0x0800138f
 8001300:	0800138f 	.word	0x0800138f
 8001304:	0800138f 	.word	0x0800138f
 8001308:	0800138f 	.word	0x0800138f
 800130c:	0800138f 	.word	0x0800138f
 8001310:	0800138f 	.word	0x0800138f
 8001314:	0800138f 	.word	0x0800138f
 8001318:	0800138f 	.word	0x0800138f
 800131c:	0800138f 	.word	0x0800138f
 8001320:	0800138f 	.word	0x0800138f
 8001324:	0800133d 	.word	0x0800133d
 8001328:	08001351 	.word	0x08001351
 800132c:	4a79      	ldr	r2, [pc, #484]	; (8001514 <HAL_GPIO_Init+0x2b4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001332:	e02c      	b.n	800138e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e029      	b.n	8001390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	3304      	adds	r3, #4
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e024      	b.n	8001390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	3308      	adds	r3, #8
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e01f      	b.n	8001390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	330c      	adds	r3, #12
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e01a      	b.n	8001390 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001362:	2304      	movs	r3, #4
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e013      	b.n	8001390 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001370:	2308      	movs	r3, #8
 8001372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	611a      	str	r2, [r3, #16]
          break;
 800137a:	e009      	b.n	8001390 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800137c:	2308      	movs	r3, #8
 800137e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	615a      	str	r2, [r3, #20]
          break;
 8001386:	e003      	b.n	8001390 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x130>
          break;
 800138e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d801      	bhi.n	800139a <HAL_GPIO_Init+0x13a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	e001      	b.n	800139e <HAL_GPIO_Init+0x13e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3304      	adds	r3, #4
 800139e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2bff      	cmp	r3, #255	; 0xff
 80013a4:	d802      	bhi.n	80013ac <HAL_GPIO_Init+0x14c>
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	e002      	b.n	80013b2 <HAL_GPIO_Init+0x152>
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	3b08      	subs	r3, #8
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	210f      	movs	r1, #15
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	401a      	ands	r2, r3
 80013c4:	6a39      	ldr	r1, [r7, #32]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80b1 	beq.w	8001542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e0:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x2b8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f8:	4a48      	ldr	r2, [pc, #288]	; (800151c <HAL_GPIO_Init+0x2bc>)
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a40      	ldr	r2, [pc, #256]	; (8001520 <HAL_GPIO_Init+0x2c0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d013      	beq.n	800144c <HAL_GPIO_Init+0x1ec>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3f      	ldr	r2, [pc, #252]	; (8001524 <HAL_GPIO_Init+0x2c4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1e8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3e      	ldr	r2, [pc, #248]	; (8001528 <HAL_GPIO_Init+0x2c8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1e4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3d      	ldr	r2, [pc, #244]	; (800152c <HAL_GPIO_Init+0x2cc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1e0>
 800143c:	2303      	movs	r3, #3
 800143e:	e006      	b.n	800144e <HAL_GPIO_Init+0x1ee>
 8001440:	2304      	movs	r3, #4
 8001442:	e004      	b.n	800144e <HAL_GPIO_Init+0x1ee>
 8001444:	2302      	movs	r3, #2
 8001446:	e002      	b.n	800144e <HAL_GPIO_Init+0x1ee>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_GPIO_Init+0x1ee>
 800144c:	2300      	movs	r3, #0
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	f002 0203 	and.w	r2, r2, #3
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	4093      	lsls	r3, r2
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145e:	492f      	ldr	r1, [pc, #188]	; (800151c <HAL_GPIO_Init+0x2bc>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	492c      	ldr	r1, [pc, #176]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	4928      	ldr	r1, [pc, #160]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 8001490:	4013      	ands	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4922      	ldr	r1, [pc, #136]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	491e      	ldr	r1, [pc, #120]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4918      	ldr	r1, [pc, #96]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	4914      	ldr	r1, [pc, #80]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d021      	beq.n	8001534 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60cb      	str	r3, [r1, #12]
 80014fc:	e021      	b.n	8001542 <HAL_GPIO_Init+0x2e2>
 80014fe:	bf00      	nop
 8001500:	10320000 	.word	0x10320000
 8001504:	10310000 	.word	0x10310000
 8001508:	10220000 	.word	0x10220000
 800150c:	10210000 	.word	0x10210000
 8001510:	10120000 	.word	0x10120000
 8001514:	10110000 	.word	0x10110000
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	40010800 	.word	0x40010800
 8001524:	40010c00 	.word	0x40010c00
 8001528:	40011000 	.word	0x40011000
 800152c:	40011400 	.word	0x40011400
 8001530:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_GPIO_Init+0x304>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	43db      	mvns	r3, r3
 800153c:	4909      	ldr	r1, [pc, #36]	; (8001564 <HAL_GPIO_Init+0x304>)
 800153e:	4013      	ands	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3301      	adds	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f47f ae8e 	bne.w	8001274 <HAL_GPIO_Init+0x14>
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	372c      	adds	r7, #44	; 0x2c
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a6:	787b      	ldrb	r3, [r7, #1]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b2:	e003      	b.n	80015bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	041a      	lsls	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	611a      	str	r2, [r3, #16]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c8:	b08b      	sub	sp, #44	; 0x2c
 80015ca:	af06      	add	r7, sp, #24
 80015cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0fd      	b.n	80017d4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f008 ff71 	bl	800a4d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 f820 	bl	8003644 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	687e      	ldr	r6, [r7, #4]
 800160c:	466d      	mov	r5, sp
 800160e:	f106 0410 	add.w	r4, r6, #16
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	602b      	str	r3, [r5, #0]
 800161a:	1d33      	adds	r3, r6, #4
 800161c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f001 ffea 	bl	80035f8 <USB_CoreInit>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0ce      	b.n	80017d4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f81b 	bl	8003678 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e04c      	b.n	80016e2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3301      	adds	r3, #1
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	b298      	uxth	r0, r3
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3336      	adds	r3, #54	; 0x36
 8001686:	4602      	mov	r2, r0
 8001688:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3303      	adds	r3, #3
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	333c      	adds	r3, #60	; 0x3c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3340      	adds	r3, #64	; 0x40
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3ad      	bcc.n	8001648 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e044      	b.n	800177c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3301      	adds	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3b5      	bcc.n	80016f2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	687e      	ldr	r6, [r7, #4]
 800178e:	466d      	mov	r5, sp
 8001790:	f106 0410 	add.w	r4, r6, #16
 8001794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	1d33      	adds	r3, r6, #4
 800179e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f001 ff75 	bl	8003690 <USB_DevInit>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00d      	b.n	80017d4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 ff0f 	bl	80055f0 <USB_DevDisconnect>

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_PCD_Start+0x16>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e016      	b.n	8001820 <HAL_PCD_Start+0x44>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 ff0a 	bl	8003618 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001804:	2101      	movs	r1, #1
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f009 f8b3 	bl	800a972 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fee3 	bl	80055dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fee5 	bl	8005604 <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001844:	d102      	bne.n	800184c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fb4a 	bl	8001ee0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fed7 	bl	8005604 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d112      	bne.n	8001888 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001874:	b292      	uxth	r2, r2
 8001876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f008 fea5 	bl	800a5ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001880:	2100      	movs	r1, #0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f925 	bl	8001ad2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 feb9 	bl	8005604 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800189c:	d10b      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fea2 	bl	8005604 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d10b      	bne.n	80018e4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fe8b 	bl	8005604 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f8:	d126      	bne.n	8001948 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	b292      	uxth	r2, r2
 800190e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	b292      	uxth	r2, r2
 8001926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f008 fe86 	bl	800a63c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001942:	b292      	uxth	r2, r2
 8001944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fe59 	bl	8005604 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195c:	f040 8084 	bne.w	8001a68 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]
 8001964:	e011      	b.n	800198a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	441a      	add	r2, r3
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	8812      	ldrh	r2, [r2, #0]
 8001976:	b292      	uxth	r2, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	f107 0120 	add.w	r1, r7, #32
 800197e:	440b      	add	r3, r1
 8001980:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	3301      	adds	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	2b07      	cmp	r3, #7
 800198e:	d9ea      	bls.n	8001966 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019c0:	bf00      	nop
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f6      	beq.n	80019c2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e6:	b292      	uxth	r2, r2
 80019e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	77fb      	strb	r3, [r7, #31]
 80019f0:	e010      	b.n	8001a14 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4611      	mov	r1, r2
 80019fa:	7ffa      	ldrb	r2, [r7, #31]
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	440a      	add	r2, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	f107 0120 	add.w	r1, r7, #32
 8001a06:	440b      	add	r3, r1
 8001a08:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a0c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	3301      	adds	r3, #1
 8001a12:	77fb      	strb	r3, [r7, #31]
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d9eb      	bls.n	80019f2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0208 	orr.w	r2, r2, #8
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a44:	b292      	uxth	r2, r2
 8001a46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f008 fdd0 	bl	800a608 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fdc9 	bl	8005604 <USB_ReadInterrupts>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a7c:	d10e      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a90:	b292      	uxth	r2, r2
 8001a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f008 fd89 	bl	800a5ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fdaf 	bl	8005604 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab0:	d10b      	bne.n	8001aca <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_PCD_SetAddress+0x1a>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e013      	b.n	8001b14 <HAL_PCD_SetAddress+0x42>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fd56 	bl	80055b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	70fb      	strb	r3, [r7, #3]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	803b      	strh	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da0e      	bge.n	8001b60 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	705a      	strb	r2, [r3, #1]
 8001b5e:	e00e      	b.n	8001b7e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0207 	and.w	r2, r3, #7
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b8a:	883a      	ldrh	r2, [r7, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	78ba      	ldrb	r2, [r7, #2]
 8001b94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ba8:	78bb      	ldrb	r3, [r7, #2]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d102      	bne.n	8001bb4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_EP_Open+0xa6>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e00e      	b.n	8001be0 <HAL_PCD_EP_Open+0xc4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fd7d 	bl	80036d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da0e      	bge.n	8001c1a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00e      	b.n	8001c38 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 0207 	and.w	r2, r3, #7
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_PCD_EP_Close+0x6a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e00e      	b.n	8001c70 <HAL_PCD_EP_Close+0x88>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 f89f 	bl	8003da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	460b      	mov	r3, r1
 8001c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f003 0207 	and.w	r2, r3, #7
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6979      	ldr	r1, [r7, #20]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fa51 	bl	800417c <USB_EPStartXfer>
 8001cda:	e005      	b.n	8001ce8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6979      	ldr	r1, [r7, #20]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fa4a 	bl	800417c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fa0e 	bl	800417c <USB_EPStartXfer>
 8001d60:	e005      	b.n	8001d6e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fa07 	bl	800417c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 0207 	and.w	r2, r3, #7
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d901      	bls.n	8001d96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e04c      	b.n	8001e30 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0e      	bge.n	8001dbc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	705a      	strb	r2, [r3, #1]
 8001dba:	e00c      	b.n	8001dd6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_EP_SetStall+0x7e>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e01c      	b.n	8001e30 <HAL_PCD_EP_SetStall+0xb8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fad9 	bl	80053bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f003 fbfe 	bl	8005622 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d901      	bls.n	8001e56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e040      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0e      	bge.n	8001e7c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_ClrStall+0x82>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e00e      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0xa0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fac7 	bl	800545c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ee8:	e2df      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ef4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 8158 	bne.w	80021ba <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d152      	bne.n	8001fba <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	81fb      	strh	r3, [r7, #14]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	89fb      	ldrh	r3, [r7, #14]
 8001f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	3302      	adds	r3, #2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	441a      	add	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f008 fafd 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 828e 	beq.w	80024aa <PCD_EP_ISR_Handler+0x5ca>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8289 	bne.w	80024aa <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fb8:	e277      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d034      	beq.n	800203e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002012:	b29b      	uxth	r3, r3
 8002014:	f003 fb55 	bl	80056c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002024:	4013      	ands	r3, r2
 8002026:	823b      	strh	r3, [r7, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8a3a      	ldrh	r2, [r7, #16]
 800202e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002032:	b292      	uxth	r2, r2
 8002034:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f008 fa72 	bl	800a520 <HAL_PCD_SetupStageCallback>
 800203c:	e235      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800203e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002042:	2b00      	cmp	r3, #0
 8002044:	f280 8231 	bge.w	80024aa <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29a      	uxth	r2, r3
 8002050:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002054:	4013      	ands	r3, r2
 8002056:	83bb      	strh	r3, [r7, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8bba      	ldrh	r2, [r7, #28]
 800205e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002062:	b292      	uxth	r2, r2
 8002064:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	3306      	adds	r3, #6
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <PCD_EP_ISR_Handler+0x1ee>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	6959      	ldr	r1, [r3, #20]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f003 fb05 	bl	80056c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	441a      	add	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020c6:	2100      	movs	r1, #0
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f008 fa3b 	bl	800a544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4413      	add	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <PCD_EP_ISR_Handler+0x23c>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002100:	b29a      	uxth	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002114:	b29a      	uxth	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e02f      	b.n	800217c <PCD_EP_ISR_Handler+0x29c>
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b3e      	cmp	r3, #62	; 0x3e
 8002122:	d813      	bhi.n	800214c <PCD_EP_ISR_Handler+0x26c>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <PCD_EP_ISR_Handler+0x25e>
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	3301      	adds	r3, #1
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	b29b      	uxth	r3, r3
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	b29a      	uxth	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	e017      	b.n	800217c <PCD_EP_ISR_Handler+0x29c>
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <PCD_EP_ISR_Handler+0x286>
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	3b01      	subs	r3, #1
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002168:	b29b      	uxth	r3, r3
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	b29b      	uxth	r3, r3
 800216e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002176:	b29a      	uxth	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	827b      	strh	r3, [r7, #18]
 800218e:	8a7b      	ldrh	r3, [r7, #18]
 8002190:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002194:	827b      	strh	r3, [r7, #18]
 8002196:	8a7b      	ldrh	r3, [r7, #18]
 8002198:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800219c:	827b      	strh	r3, [r7, #18]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	8a7b      	ldrh	r3, [r7, #18]
 80021a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8013      	strh	r3, [r2, #0]
 80021b8:	e177      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f280 80ea 	bge.w	80023aa <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021ec:	4013      	ands	r3, r2
 80021ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002208:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d122      	bne.n	800226c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	3306      	adds	r3, #6
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002250:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8087 	beq.w	8002366 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	6959      	ldr	r1, [r3, #20]
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	88da      	ldrh	r2, [r3, #6]
 8002264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002266:	f003 fa2c 	bl	80056c2 <USB_ReadPMA>
 800226a:	e07c      	b.n	8002366 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	78db      	ldrb	r3, [r3, #3]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d108      	bne.n	8002286 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002274:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002276:	461a      	mov	r2, r3
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f923 	bl	80024c6 <HAL_PCD_EP_DB_Receive>
 8002280:	4603      	mov	r3, r0
 8002282:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002284:	e06f      	b.n	8002366 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	441a      	add	r2, r3
 80022b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	3302      	adds	r3, #2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002308:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800230a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02a      	beq.n	8002366 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	6959      	ldr	r1, [r3, #20]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	891a      	ldrh	r2, [r3, #8]
 800231c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231e:	f003 f9d0 	bl	80056c2 <USB_ReadPMA>
 8002322:	e020      	b.n	8002366 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	3306      	adds	r3, #6
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800234e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	6959      	ldr	r1, [r3, #20]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	895a      	ldrh	r2, [r3, #10]
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	f003 f9ae 	bl	80056c2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236c:	441a      	add	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002378:	441a      	add	r2, r3
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <PCD_EP_ISR_Handler+0x4b0>
 8002386:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d206      	bcs.n	800239e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f008 f8d4 	bl	800a544 <HAL_PCD_DataOutStageCallback>
 800239c:	e005      	b.n	80023aa <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fee9 	bl	800417c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d07a      	beq.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80023b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	843b      	strh	r3, [r7, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	8c3b      	ldrh	r3, [r7, #32]
 80023f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	78db      	ldrb	r3, [r3, #3]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d108      	bne.n	800241a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800240c:	2b02      	cmp	r3, #2
 800240e:	d146      	bne.n	800249e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002410:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d141      	bne.n	800249e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	3302      	adds	r3, #2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002442:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	8bfb      	ldrh	r3, [r7, #30]
 800244a:	429a      	cmp	r2, r3
 800244c:	d906      	bls.n	800245c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	8bfb      	ldrh	r3, [r7, #30]
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	619a      	str	r2, [r3, #24]
 800245a:	e002      	b.n	8002462 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f008 f882 	bl	800a57a <HAL_PCD_DataInStageCallback>
 8002476:	e018      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	441a      	add	r2, r3
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	8bfb      	ldrh	r3, [r7, #30]
 800248a:	441a      	add	r2, r3
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002496:	4618      	mov	r0, r3
 8002498:	f001 fe70 	bl	800417c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800249c:	e005      	b.n	80024aa <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800249e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f91b 	bl	80026e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f6ff ad17 	blt.w	8001eea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3738      	adds	r7, #56	; 0x38
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b088      	sub	sp, #32
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d07e      	beq.n	80025dc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3302      	adds	r3, #2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	8b7b      	ldrh	r3, [r7, #26]
 800250e:	429a      	cmp	r2, r3
 8002510:	d306      	bcc.n	8002520 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	8b7b      	ldrh	r3, [r7, #26]
 8002518:	1ad2      	subs	r2, r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	619a      	str	r2, [r3, #24]
 800251e:	e002      	b.n	8002526 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d123      	bne.n	8002576 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002548:	833b      	strh	r3, [r7, #24]
 800254a:	8b3b      	ldrh	r3, [r7, #24]
 800254c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002550:	833b      	strh	r3, [r7, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	8b3b      	ldrh	r3, [r7, #24]
 8002562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002572:	b29b      	uxth	r3, r3
 8002574:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01f      	beq.n	80025c0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259a:	82fb      	strh	r3, [r7, #22]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	8afb      	ldrh	r3, [r7, #22]
 80025ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025c0:	8b7b      	ldrh	r3, [r7, #26]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6959      	ldr	r1, [r3, #20]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	891a      	ldrh	r2, [r3, #8]
 80025d4:	8b7b      	ldrh	r3, [r7, #26]
 80025d6:	f003 f874 	bl	80056c2 <USB_ReadPMA>
 80025da:	e07c      	b.n	80026d6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	3306      	adds	r3, #6
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002604:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	8b7b      	ldrh	r3, [r7, #26]
 800260c:	429a      	cmp	r2, r3
 800260e:	d306      	bcc.n	800261e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	8b7b      	ldrh	r3, [r7, #26]
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e002      	b.n	8002624 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d123      	bne.n	8002674 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	83fb      	strh	r3, [r7, #30]
 8002648:	8bfb      	ldrh	r3, [r7, #30]
 800264a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800264e:	83fb      	strh	r3, [r7, #30]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	441a      	add	r2, r3
 800265e:	8bfb      	ldrh	r3, [r7, #30]
 8002660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002670:	b29b      	uxth	r3, r3
 8002672:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11f      	bne.n	80026be <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	83bb      	strh	r3, [r7, #28]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	441a      	add	r2, r3
 80026a8:	8bbb      	ldrh	r3, [r7, #28]
 80026aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026be:	8b7b      	ldrh	r3, [r7, #26]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	6959      	ldr	r1, [r3, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	895a      	ldrh	r2, [r3, #10]
 80026d0:	8b7b      	ldrh	r3, [r7, #26]
 80026d2:	f002 fff6 	bl	80056c2 <USB_ReadPMA>
    }
  }

  return count;
 80026d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b094      	sub	sp, #80	; 0x50
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8138 	beq.w	800296a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	3302      	adds	r3, #2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002722:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800272e:	429a      	cmp	r2, r3
 8002730:	d907      	bls.n	8002742 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	619a      	str	r2, [r3, #24]
 8002740:	e002      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d12c      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f007 ff0f 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 823a 	beq.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	82fb      	strh	r3, [r7, #22]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	8afb      	ldrh	r3, [r7, #22]
 8002794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
 80027a8:	e218      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01f      	beq.n	80027f4 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	857b      	strh	r3, [r7, #42]	; 0x2a
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 81ee 	bne.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002808:	441a      	add	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002816:	441a      	add	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d309      	bcc.n	800283c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e015      	b.n	8002868 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002844:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002852:	e009      	b.n	8002868 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	785b      	ldrb	r3, [r3, #1]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d155      	bne.n	800291c <HAL_PCD_EP_DB_Transmit+0x23c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287e:	b29b      	uxth	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	011a      	lsls	r2, r3, #4
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	2b00      	cmp	r3, #0
 800289c:	d112      	bne.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29a      	uxth	r2, r3
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e047      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x274>
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2b3e      	cmp	r3, #62	; 0x3e
 80028c8:	d811      	bhi.n	80028ee <HAL_PCD_EP_DB_Transmit+0x20e>
 80028ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x200>
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	3301      	adds	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	029b      	lsls	r3, r3, #10
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	e032      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x274>
 80028ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0x224>
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	3b01      	subs	r3, #1
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	b29b      	uxth	r3, r3
 8002908:	029b      	lsls	r3, r3, #10
 800290a:	b29b      	uxth	r3, r3
 800290c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002914:	b29a      	uxth	r2, r3
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	e01b      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x274>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d117      	bne.n	8002954 <HAL_PCD_EP_DB_Transmit+0x274>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	4413      	add	r3, r2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	011a      	lsls	r2, r3, #4
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	4413      	add	r3, r2
 8002946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	b29a      	uxth	r2, r3
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6959      	ldr	r1, [r3, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	891a      	ldrh	r2, [r3, #8]
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	b29b      	uxth	r3, r3
 8002964:	f002 fe68 	bl	8005638 <USB_WritePMA>
 8002968:	e138      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	3306      	adds	r3, #6
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002992:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800299e:	429a      	cmp	r2, r3
 80029a0:	d307      	bcc.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d12e      	bne.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f007 fdd7 	bl	800a57a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 8102 	bne.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	8013      	strh	r3, [r2, #0]
 8002a1c:	e0de      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11f      	bne.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	867b      	strh	r3, [r7, #50]	; 0x32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 80b4 	bne.w	8002bdc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d309      	bcc.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa8:	1ad2      	subs	r2, r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	621a      	str	r2, [r3, #32]
 8002aae:	e015      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ac6:	e009      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d155      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	4413      	add	r3, r2
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	011a      	lsls	r2, r3, #4
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e044      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b40:	2b3e      	cmp	r3, #62	; 0x3e
 8002b42:	d811      	bhi.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x488>
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x47a>
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	3301      	adds	r3, #1
 8002b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	029b      	lsls	r3, r3, #10
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	e02f      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x49e>
 8002b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e018      	b.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d114      	bne.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	4413      	add	r3, r2
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	011a      	lsls	r2, r3, #4
 8002bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb8:	4413      	add	r3, r2
 8002bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6959      	ldr	r1, [r3, #20]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	895a      	ldrh	r2, [r3, #10]
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f002 fd2e 	bl	8005638 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf6:	82bb      	strh	r3, [r7, #20]
 8002bf8:	8abb      	ldrh	r3, [r7, #20]
 8002bfa:	f083 0310 	eor.w	r3, r3, #16
 8002bfe:	82bb      	strh	r3, [r7, #20]
 8002c00:	8abb      	ldrh	r3, [r7, #20]
 8002c02:	f083 0320 	eor.w	r3, r3, #32
 8002c06:	82bb      	strh	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	8abb      	ldrh	r3, [r7, #20]
 8002c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3750      	adds	r7, #80	; 0x50
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	817b      	strh	r3, [r7, #10]
 8002c44:	4613      	mov	r3, r2
 8002c46:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	897b      	ldrh	r3, [r7, #10]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e009      	b.n	8002c80 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c6c:	897a      	ldrh	r2, [r7, #10]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	80da      	strh	r2, [r3, #6]
 8002c94:	e00b      	b.n	8002cae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e26c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce8:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x12c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e246      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x76>
 8002d24:	4b80      	ldr	r3, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7a      	ldr	r2, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xbc>
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a71      	ldr	r2, [pc, #452]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd4>
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a67      	ldr	r2, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fe f94a 	bl	8001030 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe f946 	bl	8001030 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1fa      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe4>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f936 	bl	8001030 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f932 	bl	8001030 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1e6      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x10c>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ba      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4939      	ldr	r1, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e03a      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe f8eb 	bl	8001030 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe f8e7 	bl	8001030 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e19b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x270>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f8ca 	bl	8001030 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe f8c6 	bl	8001030 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e17a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03a      	beq.n	8002f40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f8aa 	bl	8001030 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7fe f8a6 	bl	8001030 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e15a      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 faa6 	bl	8003450 <RCC_Delay>
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_OscConfig+0x274>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f890 	bl	8001030 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	e00f      	b.n	8002f34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f88c 	bl	8001030 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d908      	bls.n	8002f34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e140      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	42420000 	.word	0x42420000
 8002f30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e9      	bne.n	8002f14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a93      	ldr	r2, [pc, #588]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d118      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f84d 	bl	8001030 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe f849 	bl	8001030 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0fd      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b81      	ldr	r3, [pc, #516]	; (80031b4 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fc0:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	e02d      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x334>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x356>
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a6c      	ldr	r2, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x36e>
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	4b64      	ldr	r3, [pc, #400]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fd fffd 	bl	8001030 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fff9 	bl	8001030 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ab      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x37e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fd ffe7 	bl	8001030 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fd ffe3 	bl	8001030 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e095      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a47      	ldr	r2, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8081 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d061      	beq.n	8003174 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d146      	bne.n	8003146 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd ffb7 	bl	8001030 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fd ffb3 	bl	8001030 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	492d      	ldr	r1, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	430b      	orrs	r3, r1
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fd ff87 	bl	8001030 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fd ff83 	bl	8001030 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e037      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
 8003144:	e02f      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_OscConfig+0x4fc>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fd ff70 	bl	8001030 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003154:	f7fd ff6c 	bl	8001030 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e020      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x498>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0d0      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4965      	ldr	r1, [pc, #404]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800323a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	494d      	ldr	r1, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d040      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e073      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4936      	ldr	r1, [pc, #216]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fd fec0 	bl	8001030 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fd febc 	bl	8001030 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e053      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d210      	bcs.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4922      	ldr	r1, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e032      	b.n	8003372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800334a:	f000 f821 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800334e:	4602      	mov	r2, r0
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	490a      	ldr	r1, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	5ccb      	ldrb	r3, [r1, r3]
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1d0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fe1e 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40022000 	.word	0x40022000
 8003380:	40021000 	.word	0x40021000
 8003384:	0800abac 	.word	0x0800abac
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004

08003390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b490      	push	{r4, r7}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003398:	1d3c      	adds	r4, r7, #4
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033a0:	f240 2301 	movw	r3, #513	; 0x201
 80033a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x40>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x46>
 80033ce:	e02d      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d2:	623b      	str	r3, [r7, #32]
      break;
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033e2:	4413      	add	r3, r2
 80033e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c5b      	lsrs	r3, r3, #17
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003402:	4413      	add	r3, r2
 8003404:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003408:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340e:	fb02 f203 	mul.w	r2, r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4a0b      	ldr	r2, [pc, #44]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	623b      	str	r3, [r7, #32]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342e:	623b      	str	r3, [r7, #32]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	6a3b      	ldr	r3, [r7, #32]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc90      	pop	{r4, r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	0800aab8 	.word	0x0800aab8
 8003444:	40021000 	.word	0x40021000
 8003448:	007a1200 	.word	0x007a1200
 800344c:	003d0900 	.word	0x003d0900

08003450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <RCC_Delay+0x34>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <RCC_Delay+0x38>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0a5b      	lsrs	r3, r3, #9
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800346c:	bf00      	nop
  }
  while (Delay --);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	60fa      	str	r2, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <RCC_Delay+0x1c>
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	20000000 	.word	0x20000000
 8003488:	10624dd3 	.word	0x10624dd3

0800348c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d07d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
 80034c4:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d118      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7fd fda0 	bl	8001030 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	e008      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fd fd9c 	bl	8001030 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e06d      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d027      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003530:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fd fd6b 	bl	8001030 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd fd67 	bl	8001030 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e036      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4917      	ldr	r1, [pc, #92]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	4313      	orrs	r3, r2
 8003590:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	490b      	ldr	r1, [pc, #44]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42420440 	.word	0x42420440

080035f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035f8:	b084      	sub	sp, #16
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	f107 0014 	add.w	r0, r7, #20
 8003606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr

08003618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003628:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800362c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800364c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003650:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	b29b      	uxth	r3, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	b29b      	uxth	r3, r3
 8003662:	4013      	ands	r3, r2
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003690:	b084      	sub	sp, #16
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	f107 0014 	add.w	r0, r7, #20
 800369e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	b004      	add	sp, #16
 80036ce:	4770      	bx	lr

080036d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b09b      	sub	sp, #108	; 0x6c
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	78db      	ldrb	r3, [r3, #3]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d81f      	bhi.n	8003742 <USB_ActivateEndpoint+0x72>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <USB_ActivateEndpoint+0x38>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003719 	.word	0x08003719
 800370c:	08003735 	.word	0x08003735
 8003710:	0800374b 	.word	0x0800374b
 8003714:	08003727 	.word	0x08003727
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003718:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800371c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003720:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003724:	e012      	b.n	800374c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003726:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800372a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800372e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003732:	e00b      	b.n	800374c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003734:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003740:	e004      	b.n	800374c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003748:	e000      	b.n	800374c <USB_ActivateEndpoint+0x7c>
      break;
 800374a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	b29a      	uxth	r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4313      	orrs	r3, r2
 800378e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	7b1b      	ldrb	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 8149 	bne.w	8003a50 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8084 	beq.w	80038d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4413      	add	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	011a      	lsls	r2, r3, #4
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	88db      	ldrh	r3, [r3, #6]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	81fb      	strh	r3, [r7, #14]
 800380a:	89fb      	ldrh	r3, [r7, #14]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <USB_ActivateEndpoint+0x17c>
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	81bb      	strh	r3, [r7, #12]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	441a      	add	r2, r3
 8003836:	89bb      	ldrh	r3, [r7, #12]
 8003838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800383c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003844:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003848:	b29b      	uxth	r3, r3
 800384a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	78db      	ldrb	r3, [r3, #3]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d020      	beq.n	8003896 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386a:	813b      	strh	r3, [r7, #8]
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	f083 0320 	eor.w	r3, r3, #32
 8003872:	813b      	strh	r3, [r7, #8]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	893b      	ldrh	r3, [r7, #8]
 8003880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	b29b      	uxth	r3, r3
 8003892:	8013      	strh	r3, [r2, #0]
 8003894:	e27f      	b.n	8003d96 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	441a      	add	r2, r3
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	8013      	strh	r3, [r2, #0]
 80038ce:	e262      	b.n	8003d96 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	4413      	add	r3, r2
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	011a      	lsls	r2, r3, #4
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	88db      	ldrh	r3, [r3, #6]
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	4413      	add	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	4413      	add	r3, r2
 8003922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d112      	bne.n	8003956 <USB_ActivateEndpoint+0x286>
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800393a:	b29a      	uxth	r2, r3
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800394a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800394e:	b29a      	uxth	r2, r3
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	801a      	strh	r2, [r3, #0]
 8003954:	e02f      	b.n	80039b6 <USB_ActivateEndpoint+0x2e6>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b3e      	cmp	r3, #62	; 0x3e
 800395c:	d813      	bhi.n	8003986 <USB_ActivateEndpoint+0x2b6>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	663b      	str	r3, [r7, #96]	; 0x60
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <USB_ActivateEndpoint+0x2a8>
 8003972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003974:	3301      	adds	r3, #1
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
 8003978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397a:	b29b      	uxth	r3, r3
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	b29a      	uxth	r2, r3
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e017      	b.n	80039b6 <USB_ActivateEndpoint+0x2e6>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	663b      	str	r3, [r7, #96]	; 0x60
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <USB_ActivateEndpoint+0x2d0>
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	3b01      	subs	r3, #1
 800399e:	663b      	str	r3, [r7, #96]	; 0x60
 80039a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	83fb      	strh	r3, [r7, #30]
 80039c4:	8bfb      	ldrh	r3, [r7, #30]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01b      	beq.n	8003a06 <USB_ActivateEndpoint+0x336>
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	83bb      	strh	r3, [r7, #28]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	8bbb      	ldrh	r3, [r7, #28]
 80039f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	837b      	strh	r3, [r7, #26]
 8003a1e:	8b7b      	ldrh	r3, [r7, #26]
 8003a20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a24:	837b      	strh	r3, [r7, #26]
 8003a26:	8b7b      	ldrh	r3, [r7, #26]
 8003a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a2c:	837b      	strh	r3, [r7, #26]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	8b7b      	ldrh	r3, [r7, #26]
 8003a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8013      	strh	r3, [r2, #0]
 8003a4e:	e1a2      	b.n	8003d96 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a9c:	4413      	add	r3, r2
 8003a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aae:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	891b      	ldrh	r3, [r3, #8]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad0:	4413      	add	r3, r2
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	895b      	ldrh	r3, [r3, #10]
 8003ae8:	085b      	lsrs	r3, r3, #1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 8091 	bne.w	8003c20 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003b0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01b      	beq.n	8003b4e <USB_ActivateEndpoint+0x47e>
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003b5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01b      	beq.n	8003b9e <USB_ActivateEndpoint+0x4ce>
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
 8003c1e:	e0ba      	b.n	8003d96 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01d      	beq.n	8003c78 <USB_ActivateEndpoint+0x5a8>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01d      	beq.n	8003cd0 <USB_ActivateEndpoint+0x600>
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d024      	beq.n	8003d22 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cf6:	f083 0320 	eor.w	r3, r3, #32
 8003cfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8013      	strh	r3, [r2, #0]
 8003d20:	e01d      	b.n	8003d5e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003d96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	376c      	adds	r7, #108	; 0x6c
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b08d      	sub	sp, #52	; 0x34
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	7b1b      	ldrb	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 808e 	bne.w	8003ed4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d044      	beq.n	8003e4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	81bb      	strh	r3, [r7, #12]
 8003dce:	89bb      	ldrh	r3, [r7, #12]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <USB_DeactivateEndpoint+0x6c>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	817b      	strh	r3, [r7, #10]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	897b      	ldrh	r3, [r7, #10]
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e26:	813b      	strh	r3, [r7, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	8013      	strh	r3, [r2, #0]
 8003e48:	e192      	b.n	8004170 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	827b      	strh	r3, [r7, #18]
 8003e58:	8a7b      	ldrh	r3, [r7, #18]
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01b      	beq.n	8003e9a <USB_DeactivateEndpoint+0xf6>
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e78:	823b      	strh	r3, [r7, #16]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	441a      	add	r2, r3
 8003e84:	8a3b      	ldrh	r3, [r7, #16]
 8003e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb0:	81fb      	strh	r3, [r7, #14]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	89fb      	ldrh	r3, [r7, #14]
 8003ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	8013      	strh	r3, [r2, #0]
 8003ed2:	e14d      	b.n	8004170 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 80a5 	bne.w	8004028 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	843b      	strh	r3, [r7, #32]
 8003eec:	8c3b      	ldrh	r3, [r7, #32]
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01b      	beq.n	8003f2e <USB_DeactivateEndpoint+0x18a>
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0c:	83fb      	strh	r3, [r7, #30]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	8bfb      	ldrh	r3, [r7, #30]
 8003f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	83bb      	strh	r3, [r7, #28]
 8003f3c:	8bbb      	ldrh	r3, [r7, #28]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01b      	beq.n	8003f7e <USB_DeactivateEndpoint+0x1da>
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	837b      	strh	r3, [r7, #26]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8b7b      	ldrh	r3, [r7, #26]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	833b      	strh	r3, [r7, #24]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	8b3b      	ldrh	r3, [r7, #24]
 8003fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	82fb      	strh	r3, [r7, #22]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	8afb      	ldrh	r3, [r7, #22]
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004004:	82bb      	strh	r3, [r7, #20]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	441a      	add	r2, r3
 8004010:	8abb      	ldrh	r3, [r7, #20]
 8004012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800401a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004022:	b29b      	uxth	r3, r3
 8004024:	8013      	strh	r3, [r2, #0]
 8004026:	e0a3      	b.n	8004170 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <USB_DeactivateEndpoint+0x2d4>
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004074:	b29b      	uxth	r3, r3
 8004076:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <USB_DeactivateEndpoint+0x324>
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	441a      	add	r2, r3
 80040b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004134:	b29b      	uxth	r3, r3
 8004136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800415c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416c:	b29b      	uxth	r3, r3
 800416e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3734      	adds	r7, #52	; 0x34
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0c4      	sub	sp, #272	; 0x110
 8004180:	af00      	add	r7, sp, #0
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	6018      	str	r0, [r3, #0]
 8004186:	463b      	mov	r3, r7
 8004188:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	2b01      	cmp	r3, #1
 8004192:	f040 8557 	bne.w	8004c44 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004196:	463b      	mov	r3, r7
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	463b      	mov	r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d905      	bls.n	80041b2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80041a6:	463b      	mov	r3, r7
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041b0:	e004      	b.n	80041bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80041b2:	463b      	mov	r3, r7
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	7b1b      	ldrb	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12c      	bne.n	8004220 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041c6:	463b      	mov	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6959      	ldr	r1, [r3, #20]
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	88da      	ldrh	r2, [r3, #6]
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	1d38      	adds	r0, r7, #4
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	f001 fa2c 	bl	8005638 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	463b      	mov	r3, r7
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	011a      	lsls	r2, r3, #4
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004212:	b29a      	uxth	r2, r3
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	f000 bcdd 	b.w	8004bda <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004220:	463b      	mov	r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	78db      	ldrb	r3, [r3, #3]
 8004226:	2b02      	cmp	r3, #2
 8004228:	f040 8347 	bne.w	80048ba <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800422c:	463b      	mov	r3, r7
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	463b      	mov	r3, r7
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	429a      	cmp	r2, r3
 800423a:	f240 82eb 	bls.w	8004814 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	463b      	mov	r3, r7
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	463b      	mov	r3, r7
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800426e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004276:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427e:	b29b      	uxth	r3, r3
 8004280:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004282:	463b      	mov	r3, r7
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	1ad2      	subs	r2, r2, r3
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	463b      	mov	r3, r7
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8159 	beq.w	8004562 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
 80042b6:	463b      	mov	r3, r7
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d164      	bne.n	800438a <USB_EPStartXfer+0x20e>
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	4413      	add	r3, r2
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	463b      	mov	r3, r7
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	011a      	lsls	r2, r3, #4
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d112      	bne.n	8004318 <USB_EPStartXfer+0x19c>
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004310:	b29a      	uxth	r2, r3
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e054      	b.n	80043c2 <USB_EPStartXfer+0x246>
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	2b3e      	cmp	r3, #62	; 0x3e
 800431e:	d817      	bhi.n	8004350 <USB_EPStartXfer+0x1d4>
 8004320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800432a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <USB_EPStartXfer+0x1c4>
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	3301      	adds	r3, #1
 800433c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004344:	b29b      	uxth	r3, r3
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	b29a      	uxth	r2, r3
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e038      	b.n	80043c2 <USB_EPStartXfer+0x246>
 8004350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <USB_EPStartXfer+0x1f4>
 8004366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436a:	3b01      	subs	r3, #1
 800436c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004374:	b29b      	uxth	r3, r3
 8004376:	029b      	lsls	r3, r3, #10
 8004378:	b29b      	uxth	r3, r3
 800437a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004382:	b29a      	uxth	r2, r3
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e01b      	b.n	80043c2 <USB_EPStartXfer+0x246>
 800438a:	463b      	mov	r3, r7
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	785b      	ldrb	r3, [r3, #1]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d116      	bne.n	80043c2 <USB_EPStartXfer+0x246>
 8004394:	1d3b      	adds	r3, r7, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439c:	b29b      	uxth	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	4413      	add	r3, r2
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	463b      	mov	r3, r7
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	011a      	lsls	r2, r3, #4
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	4413      	add	r3, r2
 80043b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	895b      	ldrh	r3, [r3, #10]
 80043c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6959      	ldr	r1, [r3, #20]
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80043dc:	1d38      	adds	r0, r7, #4
 80043de:	6800      	ldr	r0, [r0, #0]
 80043e0:	f001 f92a 	bl	8005638 <USB_WritePMA>
            ep->xfer_buff += len;
 80043e4:	463b      	mov	r3, r7
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ee:	441a      	add	r2, r3
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d909      	bls.n	800441a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004406:	463b      	mov	r3, r7
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	621a      	str	r2, [r3, #32]
 8004418:	e008      	b.n	800442c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d164      	bne.n	8004500 <USB_EPStartXfer+0x384>
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	011a      	lsls	r2, r3, #4
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d112      	bne.n	800448e <USB_EPStartXfer+0x312>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004472:	b29a      	uxth	r2, r3
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004486:	b29a      	uxth	r2, r3
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	e057      	b.n	800453e <USB_EPStartXfer+0x3c2>
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004492:	2b3e      	cmp	r3, #62	; 0x3e
 8004494:	d817      	bhi.n	80044c6 <USB_EPStartXfer+0x34a>
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <USB_EPStartXfer+0x33a>
 80044ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044b0:	3301      	adds	r3, #1
 80044b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	029b      	lsls	r3, r3, #10
 80044be:	b29a      	uxth	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e03b      	b.n	800453e <USB_EPStartXfer+0x3c2>
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <USB_EPStartXfer+0x36a>
 80044dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	e01e      	b.n	800453e <USB_EPStartXfer+0x3c2>
 8004500:	463b      	mov	r3, r7
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d119      	bne.n	800453e <USB_EPStartXfer+0x3c2>
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	4413      	add	r3, r2
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	463b      	mov	r3, r7
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	011a      	lsls	r2, r3, #4
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	4413      	add	r3, r2
 800452e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004538:	b29a      	uxth	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	891b      	ldrh	r3, [r3, #8]
 8004544:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004548:	463b      	mov	r3, r7
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6959      	ldr	r1, [r3, #20]
 800454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004552:	b29b      	uxth	r3, r3
 8004554:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004558:	1d38      	adds	r0, r7, #4
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	f001 f86c 	bl	8005638 <USB_WritePMA>
 8004560:	e33b      	b.n	8004bda <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004562:	463b      	mov	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d164      	bne.n	8004636 <USB_EPStartXfer+0x4ba>
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004580:	4413      	add	r3, r2
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	463b      	mov	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	011a      	lsls	r2, r3, #4
 800458c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458e:	4413      	add	r3, r2
 8004590:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
 8004596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d112      	bne.n	80045c4 <USB_EPStartXfer+0x448>
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	e057      	b.n	8004674 <USB_EPStartXfer+0x4f8>
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ca:	d817      	bhi.n	80045fc <USB_EPStartXfer+0x480>
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <USB_EPStartXfer+0x470>
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	3301      	adds	r3, #1
 80045e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	e03b      	b.n	8004674 <USB_EPStartXfer+0x4f8>
 80045fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <USB_EPStartXfer+0x4a0>
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004616:	3b01      	subs	r3, #1
 8004618:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800461c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004620:	b29b      	uxth	r3, r3
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	b29b      	uxth	r3, r3
 8004626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462e:	b29a      	uxth	r2, r3
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	e01e      	b.n	8004674 <USB_EPStartXfer+0x4f8>
 8004636:	463b      	mov	r3, r7
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d119      	bne.n	8004674 <USB_EPStartXfer+0x4f8>
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	657b      	str	r3, [r7, #84]	; 0x54
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800464e:	b29b      	uxth	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004654:	4413      	add	r3, r2
 8004656:	657b      	str	r3, [r7, #84]	; 0x54
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011a      	lsls	r2, r3, #4
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	4413      	add	r3, r2
 8004664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004668:	653b      	str	r3, [r7, #80]	; 0x50
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	b29a      	uxth	r2, r3
 8004670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004674:	463b      	mov	r3, r7
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	891b      	ldrh	r3, [r3, #8]
 800467a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800467e:	463b      	mov	r3, r7
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6959      	ldr	r1, [r3, #20]
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	b29b      	uxth	r3, r3
 800468a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800468e:	1d38      	adds	r0, r7, #4
 8004690:	6800      	ldr	r0, [r0, #0]
 8004692:	f000 ffd1 	bl	8005638 <USB_WritePMA>
            ep->xfer_buff += len;
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a0:	441a      	add	r2, r3
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046a8:	463b      	mov	r3, r7
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d909      	bls.n	80046cc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	463b      	mov	r3, r7
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	621a      	str	r2, [r3, #32]
 80046ca:	e008      	b.n	80046de <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80046cc:	463b      	mov	r3, r7
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80046d6:	463b      	mov	r3, r7
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	647b      	str	r3, [r7, #68]	; 0x44
 80046e4:	463b      	mov	r3, r7
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d164      	bne.n	80047b8 <USB_EPStartXfer+0x63c>
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004702:	4413      	add	r3, r2
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011a      	lsls	r2, r3, #4
 800470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004710:	4413      	add	r3, r2
 8004712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004716:	63bb      	str	r3, [r7, #56]	; 0x38
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d112      	bne.n	8004746 <USB_EPStartXfer+0x5ca>
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800472a:	b29a      	uxth	r2, r3
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	801a      	strh	r2, [r3, #0]
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473e:	b29a      	uxth	r2, r3
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	e054      	b.n	80047f0 <USB_EPStartXfer+0x674>
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474a:	2b3e      	cmp	r3, #62	; 0x3e
 800474c:	d817      	bhi.n	800477e <USB_EPStartXfer+0x602>
 800474e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <USB_EPStartXfer+0x5f2>
 8004764:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004768:	3301      	adds	r3, #1
 800476a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800476e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004772:	b29b      	uxth	r3, r3
 8004774:	029b      	lsls	r3, r3, #10
 8004776:	b29a      	uxth	r2, r3
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	e038      	b.n	80047f0 <USB_EPStartXfer+0x674>
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <USB_EPStartXfer+0x622>
 8004794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004798:	3b01      	subs	r3, #1
 800479a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800479e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	029b      	lsls	r3, r3, #10
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e01b      	b.n	80047f0 <USB_EPStartXfer+0x674>
 80047b8:	463b      	mov	r3, r7
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d116      	bne.n	80047f0 <USB_EPStartXfer+0x674>
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	4413      	add	r3, r2
 80047d2:	647b      	str	r3, [r7, #68]	; 0x44
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047de:	4413      	add	r3, r2
 80047e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e4:	643b      	str	r3, [r7, #64]	; 0x40
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	895b      	ldrh	r3, [r3, #10]
 80047f6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047fa:	463b      	mov	r3, r7
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	b29b      	uxth	r3, r3
 8004806:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800480a:	1d38      	adds	r0, r7, #4
 800480c:	6800      	ldr	r0, [r0, #0]
 800480e:	f000 ff13 	bl	8005638 <USB_WritePMA>
 8004812:	e1e2      	b.n	8004bda <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	463b      	mov	r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	463b      	mov	r3, r7
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004862:	1d3b      	adds	r3, r7, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	663b      	str	r3, [r7, #96]	; 0x60
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004876:	4413      	add	r3, r2
 8004878:	663b      	str	r3, [r7, #96]	; 0x60
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	011a      	lsls	r2, r3, #4
 8004882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004884:	4413      	add	r3, r2
 8004886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800488a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004890:	b29a      	uxth	r2, r3
 8004892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	891b      	ldrh	r3, [r3, #8]
 800489c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6959      	ldr	r1, [r3, #20]
 80048a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048b0:	1d38      	adds	r0, r7, #4
 80048b2:	6800      	ldr	r0, [r0, #0]
 80048b4:	f000 fec0 	bl	8005638 <USB_WritePMA>
 80048b8:	e18f      	b.n	8004bda <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	463b      	mov	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 808f 	beq.w	80049f4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	67bb      	str	r3, [r7, #120]	; 0x78
 80048dc:	463b      	mov	r3, r7
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d164      	bne.n	80049b0 <USB_EPStartXfer+0x834>
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	673b      	str	r3, [r7, #112]	; 0x70
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048fa:	4413      	add	r3, r2
 80048fc:	673b      	str	r3, [r7, #112]	; 0x70
 80048fe:	463b      	mov	r3, r7
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004908:	4413      	add	r3, r2
 800490a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800490e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d112      	bne.n	800493e <USB_EPStartXfer+0x7c2>
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004922:	b29a      	uxth	r2, r3
 8004924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004936:	b29a      	uxth	r2, r3
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	e054      	b.n	80049e8 <USB_EPStartXfer+0x86c>
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d817      	bhi.n	8004976 <USB_EPStartXfer+0x7fa>
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <USB_EPStartXfer+0x7ea>
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	3301      	adds	r3, #1
 8004962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	b29b      	uxth	r3, r3
 800496c:	029b      	lsls	r3, r3, #10
 800496e:	b29a      	uxth	r2, r3
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	e038      	b.n	80049e8 <USB_EPStartXfer+0x86c>
 8004976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <USB_EPStartXfer+0x81a>
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	3b01      	subs	r3, #1
 8004992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	b29b      	uxth	r3, r3
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e01b      	b.n	80049e8 <USB_EPStartXfer+0x86c>
 80049b0:	463b      	mov	r3, r7
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d116      	bne.n	80049e8 <USB_EPStartXfer+0x86c>
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c8:	4413      	add	r3, r2
 80049ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	011a      	lsls	r2, r3, #4
 80049d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d6:	4413      	add	r3, r2
 80049d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049dc:	677b      	str	r3, [r7, #116]	; 0x74
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049e8:	463b      	mov	r3, r7
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	895b      	ldrh	r3, [r3, #10]
 80049ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80049f2:	e097      	b.n	8004b24 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049f4:	463b      	mov	r3, r7
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d168      	bne.n	8004ad0 <USB_EPStartXfer+0x954>
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a06:	1d3b      	adds	r3, r7, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a16:	4413      	add	r3, r2
 8004a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	011a      	lsls	r2, r3, #4
 8004a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d112      	bne.n	8004a5e <USB_EPStartXfer+0x8e2>
 8004a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	e05d      	b.n	8004b1a <USB_EPStartXfer+0x99e>
 8004a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a62:	2b3e      	cmp	r3, #62	; 0x3e
 8004a64:	d817      	bhi.n	8004a96 <USB_EPStartXfer+0x91a>
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <USB_EPStartXfer+0x90a>
 8004a7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a80:	3301      	adds	r3, #1
 8004a82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e041      	b.n	8004b1a <USB_EPStartXfer+0x99e>
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <USB_EPStartXfer+0x93a>
 8004aac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ab6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	e024      	b.n	8004b1a <USB_EPStartXfer+0x99e>
 8004ad0:	463b      	mov	r3, r7
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d11f      	bne.n	8004b1a <USB_EPStartXfer+0x99e>
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae2:	1d3b      	adds	r3, r7, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af2:	4413      	add	r3, r2
 8004af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004af8:	463b      	mov	r3, r7
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	011a      	lsls	r2, r3, #4
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	4413      	add	r3, r2
 8004b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	891b      	ldrh	r3, [r3, #8]
 8004b20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b24:	463b      	mov	r3, r7
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6959      	ldr	r1, [r3, #20]
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b34:	1d38      	adds	r0, r7, #4
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	f000 fd7e 	bl	8005638 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d122      	bne.n	8004b8c <USB_EPStartXfer+0xa10>
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	463b      	mov	r3, r7
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
 8004b8a:	e026      	b.n	8004bda <USB_EPStartXfer+0xa5e>
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d121      	bne.n	8004bda <USB_EPStartXfer+0xa5e>
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	463b      	mov	r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	463b      	mov	r3, r7
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f107 020e 	add.w	r2, r7, #14
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf8:	8013      	strh	r3, [r2, #0]
 8004bfa:	f107 030e 	add.w	r3, r7, #14
 8004bfe:	f107 020e 	add.w	r2, r7, #14
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	f082 0210 	eor.w	r2, r2, #16
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	f107 030e 	add.w	r3, r7, #14
 8004c0e:	f107 020e 	add.w	r2, r7, #14
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	f082 0220 	eor.w	r2, r2, #32
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	463b      	mov	r3, r7
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	f107 030e 	add.w	r3, r7, #14
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]
 8004c42:	e3b5      	b.n	80053b0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c44:	463b      	mov	r3, r7
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	7b1b      	ldrb	r3, [r3, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8090 	bne.w	8004d70 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c50:	463b      	mov	r3, r7
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	463b      	mov	r3, r7
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d90e      	bls.n	8004c7e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004c60:	463b      	mov	r3, r7
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	463b      	mov	r3, r7
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	619a      	str	r2, [r3, #24]
 8004c7c:	e008      	b.n	8004c90 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004c7e:	463b      	mov	r3, r7
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca8:	4413      	add	r3, r2
 8004caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	011a      	lsls	r2, r3, #4
 8004cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cba:	4413      	add	r3, r2
 8004cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d116      	bne.n	8004cfa <USB_EPStartXfer+0xb7e>
 8004ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e32c      	b.n	8005354 <USB_EPStartXfer+0x11d8>
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004d00:	d818      	bhi.n	8004d34 <USB_EPStartXfer+0xbb8>
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <USB_EPStartXfer+0xba6>
 8004d18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d30:	801a      	strh	r2, [r3, #0]
 8004d32:	e30f      	b.n	8005354 <USB_EPStartXfer+0x11d8>
 8004d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <USB_EPStartXfer+0xbd8>
 8004d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e2f1      	b.n	8005354 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	78db      	ldrb	r3, [r3, #3]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	f040 818f 	bne.w	800509a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d175      	bne.n	8004e72 <USB_EPStartXfer+0xcf6>
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d9e:	4413      	add	r3, r2
 8004da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	011a      	lsls	r2, r3, #4
 8004dac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d116      	bne.n	8004df2 <USB_EPStartXfer+0xc76>
 8004dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e065      	b.n	8004ebe <USB_EPStartXfer+0xd42>
 8004df2:	463b      	mov	r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfa:	d81a      	bhi.n	8004e32 <USB_EPStartXfer+0xcb6>
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e08:	463b      	mov	r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <USB_EPStartXfer+0xca4>
 8004e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e045      	b.n	8004ebe <USB_EPStartXfer+0xd42>
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <USB_EPStartXfer+0xcda>
 8004e4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e50:	3b01      	subs	r3, #1
 8004e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	e025      	b.n	8004ebe <USB_EPStartXfer+0xd42>
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d120      	bne.n	8004ebe <USB_EPStartXfer+0xd42>
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e94:	4413      	add	r3, r2
 8004e96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011a      	lsls	r2, r3, #4
 8004ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d175      	bne.n	8004fbc <USB_EPStartXfer+0xe40>
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed8:	1d3b      	adds	r3, r7, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee8:	4413      	add	r3, r2
 8004eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eee:	463b      	mov	r3, r7
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	011a      	lsls	r2, r3, #4
 8004ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <USB_EPStartXfer+0xdc0>
 8004f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	e061      	b.n	8005000 <USB_EPStartXfer+0xe84>
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b3e      	cmp	r3, #62	; 0x3e
 8004f44:	d81a      	bhi.n	8004f7c <USB_EPStartXfer+0xe00>
 8004f46:	463b      	mov	r3, r7
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f52:	463b      	mov	r3, r7
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <USB_EPStartXfer+0xdee>
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	3301      	adds	r3, #1
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	029b      	lsls	r3, r3, #10
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e041      	b.n	8005000 <USB_EPStartXfer+0xe84>
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <USB_EPStartXfer+0xe24>
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	029b      	lsls	r3, r3, #10
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e021      	b.n	8005000 <USB_EPStartXfer+0xe84>
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d11c      	bne.n	8005000 <USB_EPStartXfer+0xe84>
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	011a      	lsls	r2, r3, #4
 8004fe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fe8:	4413      	add	r3, r2
 8004fea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ffe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 81a4 	beq.w	8005354 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005020:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <USB_EPStartXfer+0xebc>
 800502c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005038:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005040:	2b00      	cmp	r3, #0
 8005042:	f040 8187 	bne.w	8005354 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005046:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 8180 	bne.w	8005354 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
 8005098:	e15c      	b.n	8005354 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	78db      	ldrb	r3, [r3, #3]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	f040 8155 	bne.w	8005350 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	463b      	mov	r3, r7
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d90e      	bls.n	80050d4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80050b6:	463b      	mov	r3, r7
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	619a      	str	r2, [r3, #24]
 80050d2:	e008      	b.n	80050e6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d16f      	bne.n	80051d0 <USB_EPStartXfer+0x1054>
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005100:	b29b      	uxth	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005108:	4413      	add	r3, r2
 800510a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800510e:	463b      	mov	r3, r7
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	011a      	lsls	r2, r3, #4
 8005116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800511a:	4413      	add	r3, r2
 800511c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <USB_EPStartXfer+0xfde>
 800512c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005138:	b29a      	uxth	r2, r3
 800513a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e05f      	b.n	800521a <USB_EPStartXfer+0x109e>
 800515a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515e:	2b3e      	cmp	r3, #62	; 0x3e
 8005160:	d818      	bhi.n	8005194 <USB_EPStartXfer+0x1018>
 8005162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800516c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <USB_EPStartXfer+0x1006>
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	3301      	adds	r3, #1
 800517e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29a      	uxth	r2, r3
 800518c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	e042      	b.n	800521a <USB_EPStartXfer+0x109e>
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <USB_EPStartXfer+0x1038>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	e024      	b.n	800521a <USB_EPStartXfer+0x109e>
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d11f      	bne.n	800521a <USB_EPStartXfer+0x109e>
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f2:	4413      	add	r3, r2
 80051f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005204:	4413      	add	r3, r2
 8005206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800520a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005212:	b29a      	uxth	r2, r3
 8005214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d16f      	bne.n	800530c <USB_EPStartXfer+0x1190>
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005244:	4413      	add	r3, r2
 8005246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	011a      	lsls	r2, r3, #4
 8005252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005256:	4413      	add	r3, r2
 8005258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <USB_EPStartXfer+0x111a>
 8005268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005274:	b29a      	uxth	r2, r3
 8005276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528c:	b29a      	uxth	r2, r3
 800528e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e05e      	b.n	8005354 <USB_EPStartXfer+0x11d8>
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	2b3e      	cmp	r3, #62	; 0x3e
 800529c:	d818      	bhi.n	80052d0 <USB_EPStartXfer+0x1154>
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <USB_EPStartXfer+0x1142>
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e041      	b.n	8005354 <USB_EPStartXfer+0x11d8>
 80052d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <USB_EPStartXfer+0x1174>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005302:	b29a      	uxth	r2, r3
 8005304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e023      	b.n	8005354 <USB_EPStartXfer+0x11d8>
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d11e      	bne.n	8005354 <USB_EPStartXfer+0x11d8>
 8005316:	1d3b      	adds	r3, r7, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005326:	4413      	add	r3, r2
 8005328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	011a      	lsls	r2, r3, #4
 8005334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005338:	4413      	add	r3, r2
 800533a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800533e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005346:	b29a      	uxth	r2, r3
 8005348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e001      	b.n	8005354 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e02e      	b.n	80053b2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005372:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005376:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800537a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800537e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005386:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800538a:	1d3b      	adds	r3, r7, #4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800539c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	785b      	ldrb	r3, [r3, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e4:	81bb      	strh	r3, [r7, #12]
 80053e6:	89bb      	ldrh	r3, [r7, #12]
 80053e8:	f083 0310 	eor.w	r3, r3, #16
 80053ec:	81bb      	strh	r3, [r7, #12]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	89bb      	ldrh	r3, [r7, #12]
 80053fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
 800540e:	e01f      	b.n	8005450 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	81fb      	strh	r3, [r7, #14]
 8005428:	89fb      	ldrh	r3, [r7, #14]
 800542a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800542e:	81fb      	strh	r3, [r7, #14]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	7b1b      	ldrb	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f040 809d 	bne.w	80055aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d04c      	beq.n	8005512 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	823b      	strh	r3, [r7, #16]
 8005486:	8a3b      	ldrh	r3, [r7, #16]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <USB_EPClearStall+0x6c>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	81fb      	strh	r3, [r7, #14]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	78db      	ldrb	r3, [r3, #3]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d06c      	beq.n	80055aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e6:	81bb      	strh	r3, [r7, #12]
 80054e8:	89bb      	ldrh	r3, [r7, #12]
 80054ea:	f083 0320 	eor.w	r3, r3, #32
 80054ee:	81bb      	strh	r3, [r7, #12]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	89bb      	ldrh	r3, [r7, #12]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
 8005510:	e04b      	b.n	80055aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	82fb      	strh	r3, [r7, #22]
 8005520:	8afb      	ldrh	r3, [r7, #22]
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01b      	beq.n	8005562 <USB_EPClearStall+0x106>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	82bb      	strh	r3, [r7, #20]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8abb      	ldrh	r3, [r7, #20]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	827b      	strh	r3, [r7, #18]
 800557a:	8a7b      	ldrh	r3, [r7, #18]
 800557c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005580:	827b      	strh	r3, [r7, #18]
 8005582:	8a7b      	ldrh	r3, [r7, #18]
 8005584:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005588:	827b      	strh	r3, [r7, #18]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8a7b      	ldrh	r3, [r7, #18]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d103      	bne.n	80055d0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005612:	b29b      	uxth	r3, r3
 8005614:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005638:	b480      	push	{r7}
 800563a:	b08d      	sub	sp, #52	; 0x34
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	460b      	mov	r3, r1
 8005648:	80fb      	strh	r3, [r7, #6]
 800564a:	4613      	mov	r3, r2
 800564c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800564e:	88bb      	ldrh	r3, [r7, #4]
 8005650:	3301      	adds	r3, #1
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	005a      	lsls	r2, r3, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005670:	e01e      	b.n	80056b0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	3301      	adds	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	b29b      	uxth	r3, r3
 8005688:	461a      	mov	r2, r3
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	b29a      	uxth	r2, r3
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	3302      	adds	r3, #2
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	3302      	adds	r3, #2
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	3301      	adds	r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	3b01      	subs	r3, #1
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1dd      	bne.n	8005672 <USB_WritePMA+0x3a>
  }
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3734      	adds	r7, #52	; 0x34
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b08b      	sub	sp, #44	; 0x2c
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4611      	mov	r1, r2
 80056ce:	461a      	mov	r2, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	80fb      	strh	r3, [r7, #6]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056d8:	88bb      	ldrh	r3, [r7, #4]
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	005a      	lsls	r2, r3, #1
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e01b      	b.n	8005734 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	3302      	adds	r3, #2
 8005708:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	b2da      	uxtb	r2, r3
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3301      	adds	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	3302      	adds	r3, #2
 800572c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	3b01      	subs	r3, #1
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e0      	bne.n	80056fc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800573a:	88bb      	ldrh	r3, [r7, #4]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	701a      	strb	r2, [r3, #0]
  }
}
 8005756:	bf00      	nop
 8005758:	372c      	adds	r7, #44	; 0x2c
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800576c:	2304      	movs	r3, #4
 800576e:	2203      	movs	r2, #3
 8005770:	2181      	movs	r1, #129	; 0x81
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f004 ffd3 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800577e:	2010      	movs	r0, #16
 8005780:	f005 f8e2 	bl	800a948 <USBD_static_malloc>
 8005784:	4602      	mov	r2, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005796:	2302      	movs	r3, #2
 8005798:	e005      	b.n	80057a6 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	2200      	movs	r2, #0
 80057a2:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80057ba:	2181      	movs	r1, #129	; 0x81
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f004 ffd4 	bl	800a76a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	4618      	mov	r0, r3
 80057da:	f005 f8c1 	bl	800a960 <USBD_static_free>
    pdev->pClassData = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005800:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800581a:	2b00      	cmp	r3, #0
 800581c:	d045      	beq.n	80058aa <USBD_HID_Setup+0xba>
 800581e:	2b20      	cmp	r3, #32
 8005820:	f040 80d3 	bne.w	80059ca <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	3b02      	subs	r3, #2
 800582a:	2b09      	cmp	r3, #9
 800582c:	d835      	bhi.n	800589a <USBD_HID_Setup+0xaa>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USBD_HID_Setup+0x44>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800588b 	.word	0x0800588b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800589b 	.word	0x0800589b
 8005840:	0800589b 	.word	0x0800589b
 8005844:	0800589b 	.word	0x0800589b
 8005848:	0800589b 	.word	0x0800589b
 800584c:	0800589b 	.word	0x0800589b
 8005850:	0800589b 	.word	0x0800589b
 8005854:	08005879 	.word	0x08005879
 8005858:	0800585d 	.word	0x0800585d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	601a      	str	r2, [r3, #0]
          break;
 8005868:	e01e      	b.n	80058a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2201      	movs	r2, #1
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f944 	bl	8006afe <USBD_CtlSendData>
          break;
 8005876:	e017      	b.n	80058a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]
          break;
 8005888:	e00e      	b.n	80058a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3304      	adds	r3, #4
 800588e:	2201      	movs	r2, #1
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 f933 	bl	8006afe <USBD_CtlSendData>
          break;
 8005898:	e006      	b.n	80058a8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f8c4 	bl	8006a2a <USBD_CtlError>
          ret = USBD_FAIL;
 80058a2:	2302      	movs	r3, #2
 80058a4:	75fb      	strb	r3, [r7, #23]
          break;
 80058a6:	bf00      	nop
      }
      break;
 80058a8:	e096      	b.n	80059d8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	f200 8083 	bhi.w	80059ba <USBD_HID_Setup+0x1ca>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <USBD_HID_Setup+0xcc>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	080059bb 	.word	0x080059bb
 80058c4:	080059bb 	.word	0x080059bb
 80058c8:	080059bb 	.word	0x080059bb
 80058cc:	080059bb 	.word	0x080059bb
 80058d0:	080059bb 	.word	0x080059bb
 80058d4:	08005915 	.word	0x08005915
 80058d8:	080059bb 	.word	0x080059bb
 80058dc:	080059bb 	.word	0x080059bb
 80058e0:	080059bb 	.word	0x080059bb
 80058e4:	0800596d 	.word	0x0800596d
 80058e8:	08005995 	.word	0x08005995
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d107      	bne.n	8005906 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058f6:	f107 030e 	add.w	r3, r7, #14
 80058fa:	2202      	movs	r2, #2
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 f8fd 	bl	8006afe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005904:	e060      	b.n	80059c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 f88e 	bl	8006a2a <USBD_CtlError>
            ret = USBD_FAIL;
 800590e:	2302      	movs	r3, #2
 8005910:	75fb      	strb	r3, [r7, #23]
          break;
 8005912:	e059      	b.n	80059c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	885b      	ldrh	r3, [r3, #2]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b22      	cmp	r3, #34	; 0x22
 800591e:	d108      	bne.n	8005932 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	88db      	ldrh	r3, [r3, #6]
 8005924:	2b3f      	cmp	r3, #63	; 0x3f
 8005926:	bf28      	it	cs
 8005928:	233f      	movcs	r3, #63	; 0x3f
 800592a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 800592c:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <USBD_HID_Setup+0x1f4>)
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e015      	b.n	800595e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	885b      	ldrh	r3, [r3, #2]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b21      	cmp	r3, #33	; 0x21
 800593c:	d108      	bne.n	8005950 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800593e:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <USBD_HID_Setup+0x1f8>)
 8005940:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	88db      	ldrh	r3, [r3, #6]
 8005946:	2b09      	cmp	r3, #9
 8005948:	bf28      	it	cs
 800594a:	2309      	movcs	r3, #9
 800594c:	83fb      	strh	r3, [r7, #30]
 800594e:	e006      	b.n	800595e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 f869 	bl	8006a2a <USBD_CtlError>
            ret = USBD_FAIL;
 8005958:	2302      	movs	r3, #2
 800595a:	75fb      	strb	r3, [r7, #23]
            break;
 800595c:	e034      	b.n	80059c8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800595e:	8bfb      	ldrh	r3, [r7, #30]
 8005960:	461a      	mov	r2, r3
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f8ca 	bl	8006afe <USBD_CtlSendData>
          break;
 800596a:	e02d      	b.n	80059c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3308      	adds	r3, #8
 800597a:	2201      	movs	r2, #1
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f8bd 	bl	8006afe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005984:	e020      	b.n	80059c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f84e 	bl	8006a2a <USBD_CtlError>
            ret = USBD_FAIL;
 800598e:	2302      	movs	r3, #2
 8005990:	75fb      	strb	r3, [r7, #23]
          break;
 8005992:	e019      	b.n	80059c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599a:	2b03      	cmp	r3, #3
 800599c:	d106      	bne.n	80059ac <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	885b      	ldrh	r3, [r3, #2]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059aa:	e00d      	b.n	80059c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f83b 	bl	8006a2a <USBD_CtlError>
            ret = USBD_FAIL;
 80059b4:	2302      	movs	r3, #2
 80059b6:	75fb      	strb	r3, [r7, #23]
          break;
 80059b8:	e006      	b.n	80059c8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f834 	bl	8006a2a <USBD_CtlError>
          ret = USBD_FAIL;
 80059c2:	2302      	movs	r3, #2
 80059c4:	75fb      	strb	r3, [r7, #23]
          break;
 80059c6:	bf00      	nop
      }
      break;
 80059c8:	e006      	b.n	80059d8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f82c 	bl	8006a2a <USBD_CtlError>
      ret = USBD_FAIL;
 80059d2:	2302      	movs	r3, #2
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	bf00      	nop
  }

  return ret;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200000c8 	.word	0x200000c8
 80059e8:	200000b0 	.word	0x200000b0

080059ec <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d10c      	bne.n	8005a26 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	7b1b      	ldrb	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2201      	movs	r2, #1
 8005a18:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	2181      	movs	r1, #129	; 0x81
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f004 ff4a 	bl	800a8ba <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2222      	movs	r2, #34	; 0x22
 8005a3c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005a3e:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000044 	.word	0x20000044

08005a50 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2222      	movs	r2, #34	; 0x22
 8005a5c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005a5e:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000068 	.word	0x20000068

08005a70 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2222      	movs	r2, #34	; 0x22
 8005a7c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005a7e:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	2000008c 	.word	0x2000008c

08005a90 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
	...

08005ab4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	220a      	movs	r2, #10
 8005ac0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005ac2:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	200000bc 	.word	0x200000bc

08005ad4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e01a      	b.n	8005b22 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	79fa      	ldrb	r2, [r7, #7]
 8005b18:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f004 fd9c 	bl	800a658 <USBD_LL_Init>

  return USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
 8005b4a:	e001      	b.n	8005b50 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f004 fdbf 	bl	800a6e8 <USBD_LL_Start>

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b94:	2302      	movs	r3, #2
 8005b96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	4611      	mov	r1, r2
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3

  return USBD_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fed7 	bl	80069b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d016      	beq.n	8005c56 <USBD_LL_SetupStage+0x6a>
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d81c      	bhi.n	8005c66 <USBD_LL_SetupStage+0x7a>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <USBD_LL_SetupStage+0x4a>
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d008      	beq.n	8005c46 <USBD_LL_SetupStage+0x5a>
 8005c34:	e017      	b.n	8005c66 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f9ca 	bl	8005fd8 <USBD_StdDevReq>
      break;
 8005c44:	e01a      	b.n	8005c7c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa2c 	bl	80060ac <USBD_StdItfReq>
      break;
 8005c54:	e012      	b.n	8005c7c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa6c 	bl	800613c <USBD_StdEPReq>
      break;
 8005c64:	e00a      	b.n	8005c7c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f004 fd97 	bl	800a7a8 <USBD_LL_StallEP>
      break;
 8005c7a:	bf00      	nop
  }

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d14b      	bne.n	8005d32 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ca0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d134      	bne.n	8005d16 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d919      	bls.n	8005cec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	1ad2      	subs	r2, r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d203      	bcs.n	8005cda <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	e002      	b.n	8005ce0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 ff38 	bl	8006b5a <USBD_CtlContinueRx>
 8005cea:	e038      	b.n	8005d5e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d105      	bne.n	8005d0e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 ff35 	bl	8006b7e <USBD_CtlSendStatus>
 8005d14:	e023      	b.n	8005d5e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d11e      	bne.n	8005d5e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f004 fd3c 	bl	800a7a8 <USBD_LL_StallEP>
 8005d30:	e015      	b.n	8005d5e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d108      	bne.n	8005d5a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	7afa      	ldrb	r2, [r7, #11]
 8005d52:	4611      	mov	r1, r2
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	4798      	blx	r3
 8005d58:	e001      	b.n	8005d5e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e000      	b.n	8005d60 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	460b      	mov	r3, r1
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d17f      	bne.n	8005e7c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d15c      	bne.n	8005e46 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d915      	bls.n	8005dc4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fec0 	bl	8006b36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005db6:	2300      	movs	r3, #0
 8005db8:	2200      	movs	r2, #0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f004 fd9f 	bl	800a900 <USBD_LL_PrepareReceive>
 8005dc2:	e04e      	b.n	8005e62 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	6912      	ldr	r2, [r2, #16]
 8005dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd0:	fb02 f201 	mul.w	r2, r2, r1
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d11c      	bne.n	8005e14 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d316      	bcc.n	8005e14 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d20f      	bcs.n	8005e14 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005df4:	2200      	movs	r2, #0
 8005df6:	2100      	movs	r1, #0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fe9c 	bl	8006b36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e06:	2300      	movs	r3, #0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f004 fd77 	bl	800a900 <USBD_LL_PrepareReceive>
 8005e12:	e026      	b.n	8005e62 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d105      	bne.n	8005e36 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f004 fcb5 	bl	800a7a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 feb0 	bl	8006ba4 <USBD_CtlReceiveStatus>
 8005e44:	e00d      	b.n	8005e62 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d004      	beq.n	8005e5a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f004 fca3 	bl	800a7a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11d      	bne.n	8005ea8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff fe81 	bl	8005b74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e7a:	e015      	b.n	8005ea8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d108      	bne.n	8005ea4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	7afa      	ldrb	r2, [r7, #11]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	4798      	blx	r3
 8005ea2:	e001      	b.n	8005ea8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e000      	b.n	8005eaa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f004 fc2c 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2240      	movs	r2, #64	; 0x40
 8005ed2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f004 fc1e 	bl	800a71e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2240      	movs	r2, #64	; 0x40
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6852      	ldr	r2, [r2, #4]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	4611      	mov	r1, r2
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
  }

  return USBD_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d105      	bne.n	8005f98 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d10b      	bne.n	8005fce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d005      	beq.n	8005ffe <USBD_StdDevReq+0x26>
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d84f      	bhi.n	8006096 <USBD_StdDevReq+0xbe>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <USBD_StdDevReq+0x36>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d14b      	bne.n	8006096 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      break;
 800600c:	e048      	b.n	80060a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b09      	cmp	r3, #9
 8006014:	d839      	bhi.n	800608a <USBD_StdDevReq+0xb2>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USBD_StdDevReq+0x44>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	0800606d 	.word	0x0800606d
 8006020:	08006081 	.word	0x08006081
 8006024:	0800608b 	.word	0x0800608b
 8006028:	08006077 	.word	0x08006077
 800602c:	0800608b 	.word	0x0800608b
 8006030:	0800604f 	.word	0x0800604f
 8006034:	08006045 	.word	0x08006045
 8006038:	0800608b 	.word	0x0800608b
 800603c:	08006063 	.word	0x08006063
 8006040:	08006059 	.word	0x08006059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9dc 	bl	8006404 <USBD_GetDescriptor>
          break;
 800604c:	e022      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fb3f 	bl	80066d4 <USBD_SetAddress>
          break;
 8006056:	e01d      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb7e 	bl	800675c <USBD_SetConfig>
          break;
 8006060:	e018      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fc07 	bl	8006878 <USBD_GetConfig>
          break;
 800606a:	e013      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc37 	bl	80068e2 <USBD_GetStatus>
          break;
 8006074:	e00e      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc65 	bl	8006948 <USBD_SetFeature>
          break;
 800607e:	e009      	b.n	8006094 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fc74 	bl	8006970 <USBD_ClrFeature>
          break;
 8006088:	e004      	b.n	8006094 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fccc 	bl	8006a2a <USBD_CtlError>
          break;
 8006092:	bf00      	nop
      }
      break;
 8006094:	e004      	b.n	80060a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fcc6 	bl	8006a2a <USBD_CtlError>
      break;
 800609e:	bf00      	nop
  }

  return ret;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d005      	beq.n	80060d2 <USBD_StdItfReq+0x26>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d82e      	bhi.n	8006128 <USBD_StdItfReq+0x7c>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <USBD_StdItfReq+0x26>
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d12a      	bne.n	8006128 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d8:	3b01      	subs	r3, #1
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d81d      	bhi.n	800611a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	889b      	ldrh	r3, [r3, #4]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d813      	bhi.n	8006110 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88db      	ldrh	r3, [r3, #6]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d110      	bne.n	8006124 <USBD_StdItfReq+0x78>
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd38 	bl	8006b7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800610e:	e009      	b.n	8006124 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fc89 	bl	8006a2a <USBD_CtlError>
          break;
 8006118:	e004      	b.n	8006124 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fc84 	bl	8006a2a <USBD_CtlError>
          break;
 8006122:	e000      	b.n	8006126 <USBD_StdItfReq+0x7a>
          break;
 8006124:	bf00      	nop
      }
      break;
 8006126:	e004      	b.n	8006132 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fc7d 	bl	8006a2a <USBD_CtlError>
      break;
 8006130:	bf00      	nop
  }

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	889b      	ldrh	r3, [r3, #4]
 800614e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d007      	beq.n	800616c <USBD_StdEPReq+0x30>
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	f200 8146 	bhi.w	80063ee <USBD_StdEPReq+0x2b2>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <USBD_StdEPReq+0x40>
 8006166:	2b20      	cmp	r3, #32
 8006168:	f040 8141 	bne.w	80063ee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
      break;
 800617a:	e13d      	b.n	80063f8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006184:	2b20      	cmp	r3, #32
 8006186:	d10a      	bne.n	800619e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]

        return ret;
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	e12d      	b.n	80063fa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d007      	beq.n	80061b6 <USBD_StdEPReq+0x7a>
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	f300 811b 	bgt.w	80063e2 <USBD_StdEPReq+0x2a6>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d072      	beq.n	8006296 <USBD_StdEPReq+0x15a>
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d03a      	beq.n	800622a <USBD_StdEPReq+0xee>
 80061b4:	e115      	b.n	80063e2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d002      	beq.n	80061c6 <USBD_StdEPReq+0x8a>
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d015      	beq.n	80061f0 <USBD_StdEPReq+0xb4>
 80061c4:	e02b      	b.n	800621e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <USBD_StdEPReq+0xaa>
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b80      	cmp	r3, #128	; 0x80
 80061d0:	d009      	beq.n	80061e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f004 fae6 	bl	800a7a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f004 fae2 	bl	800a7a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061e4:	e020      	b.n	8006228 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc1e 	bl	8006a2a <USBD_CtlError>
              break;
 80061ee:	e01b      	b.n	8006228 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10e      	bne.n	8006216 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <USBD_StdEPReq+0xda>
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d008      	beq.n	8006216 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	88db      	ldrh	r3, [r3, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f004 fac9 	bl	800a7a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fcb1 	bl	8006b7e <USBD_CtlSendStatus>

              break;
 800621c:	e004      	b.n	8006228 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc02 	bl	8006a2a <USBD_CtlError>
              break;
 8006226:	bf00      	nop
          }
          break;
 8006228:	e0e0      	b.n	80063ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006230:	2b02      	cmp	r3, #2
 8006232:	d002      	beq.n	800623a <USBD_StdEPReq+0xfe>
 8006234:	2b03      	cmp	r3, #3
 8006236:	d015      	beq.n	8006264 <USBD_StdEPReq+0x128>
 8006238:	e026      	b.n	8006288 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <USBD_StdEPReq+0x11e>
 8006240:	7bbb      	ldrb	r3, [r7, #14]
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d009      	beq.n	800625a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f004 faac 	bl	800a7a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f004 faa8 	bl	800a7a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006258:	e01c      	b.n	8006294 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fbe4 	bl	8006a2a <USBD_CtlError>
              break;
 8006262:	e017      	b.n	8006294 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	885b      	ldrh	r3, [r3, #2]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d112      	bne.n	8006292 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f004 fab3 	bl	800a7e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fc7c 	bl	8006b7e <USBD_CtlSendStatus>
              }
              break;
 8006286:	e004      	b.n	8006292 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fbcd 	bl	8006a2a <USBD_CtlError>
              break;
 8006290:	e000      	b.n	8006294 <USBD_StdEPReq+0x158>
              break;
 8006292:	bf00      	nop
          }
          break;
 8006294:	e0aa      	b.n	80063ec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	2b02      	cmp	r3, #2
 800629e:	d002      	beq.n	80062a6 <USBD_StdEPReq+0x16a>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d032      	beq.n	800630a <USBD_StdEPReq+0x1ce>
 80062a4:	e097      	b.n	80063d6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <USBD_StdEPReq+0x180>
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d004      	beq.n	80062bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fbb8 	bl	8006a2a <USBD_CtlError>
                break;
 80062ba:	e091      	b.n	80063e0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da0b      	bge.n	80062dc <USBD_StdEPReq+0x1a0>
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	3310      	adds	r3, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	3304      	adds	r3, #4
 80062da:	e00b      	b.n	80062f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2202      	movs	r2, #2
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fbfb 	bl	8006afe <USBD_CtlSendData>
              break;
 8006308:	e06a      	b.n	80063e0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800630a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	da11      	bge.n	8006336 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	f003 020f 	and.w	r2, r3, #15
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3318      	adds	r3, #24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d117      	bne.n	800635c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb7b 	bl	8006a2a <USBD_CtlError>
                  break;
 8006334:	e054      	b.n	80063e0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb68 	bl	8006a2a <USBD_CtlError>
                  break;
 800635a:	e041      	b.n	80063e0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800635c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	da0b      	bge.n	800637c <USBD_StdEPReq+0x240>
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3310      	adds	r3, #16
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	e00b      	b.n	8006394 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <USBD_StdEPReq+0x266>
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d103      	bne.n	80063aa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e00e      	b.n	80063c8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f004 fa38 	bl	800a824 <USBD_LL_IsStallEP>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e002      	b.n	80063c8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2202      	movs	r2, #2
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fb95 	bl	8006afe <USBD_CtlSendData>
              break;
 80063d4:	e004      	b.n	80063e0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb26 	bl	8006a2a <USBD_CtlError>
              break;
 80063de:	bf00      	nop
          }
          break;
 80063e0:	e004      	b.n	80063ec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fb20 	bl	8006a2a <USBD_CtlError>
          break;
 80063ea:	bf00      	nop
      }
      break;
 80063ec:	e004      	b.n	80063f8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fb1a 	bl	8006a2a <USBD_CtlError>
      break;
 80063f6:	bf00      	nop
  }

  return ret;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	885b      	ldrh	r3, [r3, #2]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	2b06      	cmp	r3, #6
 8006426:	f200 8128 	bhi.w	800667a <USBD_GetDescriptor+0x276>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USBD_GetDescriptor+0x2c>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	0800644d 	.word	0x0800644d
 8006434:	08006465 	.word	0x08006465
 8006438:	080064a5 	.word	0x080064a5
 800643c:	0800667b 	.word	0x0800667b
 8006440:	0800667b 	.word	0x0800667b
 8006444:	0800661b 	.word	0x0800661b
 8006448:	08006647 	.word	0x08006647
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
      break;
 8006462:	e112      	b.n	800668a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7c1b      	ldrb	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10d      	bne.n	8006488 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	f107 0208 	add.w	r2, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	2202      	movs	r2, #2
 8006484:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006486:	e100      	b.n	800668a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f107 0208 	add.w	r2, r7, #8
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
      break;
 80064a2:	e0f2      	b.n	800668a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	885b      	ldrh	r3, [r3, #2]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	f200 80ac 	bhi.w	8006608 <USBD_GetDescriptor+0x204>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <USBD_GetDescriptor+0xb4>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	08006505 	.word	0x08006505
 80064c0:	08006539 	.word	0x08006539
 80064c4:	0800656d 	.word	0x0800656d
 80064c8:	080065a1 	.word	0x080065a1
 80064cc:	080065d5 	.word	0x080065d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	7c12      	ldrb	r2, [r2, #16]
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064f2:	e091      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa97 	bl	8006a2a <USBD_CtlError>
            err++;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	3301      	adds	r3, #1
 8006500:	72fb      	strb	r3, [r7, #11]
          break;
 8006502:	e089      	b.n	8006618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	7c12      	ldrb	r2, [r2, #16]
 800651c:	f107 0108 	add.w	r1, r7, #8
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
 8006524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006526:	e077      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa7d 	bl	8006a2a <USBD_CtlError>
            err++;
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	3301      	adds	r3, #1
 8006534:	72fb      	strb	r3, [r7, #11]
          break;
 8006536:	e06f      	b.n	8006618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7c12      	ldrb	r2, [r2, #16]
 8006550:	f107 0108 	add.w	r1, r7, #8
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800655a:	e05d      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa63 	bl	8006a2a <USBD_CtlError>
            err++;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	3301      	adds	r3, #1
 8006568:	72fb      	strb	r3, [r7, #11]
          break;
 800656a:	e055      	b.n	8006618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800658e:	e043      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa49 	bl	8006a2a <USBD_CtlError>
            err++;
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	3301      	adds	r3, #1
 800659c:	72fb      	strb	r3, [r7, #11]
          break;
 800659e:	e03b      	b.n	8006618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	7c12      	ldrb	r2, [r2, #16]
 80065b8:	f107 0108 	add.w	r1, r7, #8
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065c2:	e029      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa2f 	bl	8006a2a <USBD_CtlError>
            err++;
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	3301      	adds	r3, #1
 80065d0:	72fb      	strb	r3, [r7, #11]
          break;
 80065d2:	e021      	b.n	8006618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	7c12      	ldrb	r2, [r2, #16]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
 80065f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065f6:	e00f      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa15 	bl	8006a2a <USBD_CtlError>
            err++;
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	3301      	adds	r3, #1
 8006604:	72fb      	strb	r3, [r7, #11]
          break;
 8006606:	e007      	b.n	8006618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa0d 	bl	8006a2a <USBD_CtlError>
          err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006616:	e038      	b.n	800668a <USBD_GetDescriptor+0x286>
 8006618:	e037      	b.n	800668a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	f107 0208 	add.w	r2, r7, #8
 800662e:	4610      	mov	r0, r2
 8006630:	4798      	blx	r3
 8006632:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006634:	e029      	b.n	800668a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9f6 	bl	8006a2a <USBD_CtlError>
        err++;
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	3301      	adds	r3, #1
 8006642:	72fb      	strb	r3, [r7, #11]
      break;
 8006644:	e021      	b.n	800668a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10d      	bne.n	800666a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	f107 0208 	add.w	r2, r7, #8
 800665a:	4610      	mov	r0, r2
 800665c:	4798      	blx	r3
 800665e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	2207      	movs	r2, #7
 8006666:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006668:	e00f      	b.n	800668a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9dc 	bl	8006a2a <USBD_CtlError>
        err++;
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	3301      	adds	r3, #1
 8006676:	72fb      	strb	r3, [r7, #11]
      break;
 8006678:	e007      	b.n	800668a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f9d4 	bl	8006a2a <USBD_CtlError>
      err++;
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	3301      	adds	r3, #1
 8006686:	72fb      	strb	r3, [r7, #11]
      break;
 8006688:	bf00      	nop
  }

  if (err != 0U)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11c      	bne.n	80066ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006690:	893b      	ldrh	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d011      	beq.n	80066ba <USBD_GetDescriptor+0x2b6>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	88db      	ldrh	r3, [r3, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	88da      	ldrh	r2, [r3, #6]
 80066a2:	893b      	ldrh	r3, [r7, #8]
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bf28      	it	cs
 80066a8:	4613      	movcs	r3, r2
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066ae:	893b      	ldrh	r3, [r7, #8]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa22 	bl	8006afe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	88db      	ldrh	r3, [r3, #6]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa5b 	bl	8006b7e <USBD_CtlSendStatus>
 80066c8:	e000      	b.n	80066cc <USBD_GetDescriptor+0x2c8>
    return;
 80066ca:	bf00      	nop
    }
  }
}
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	889b      	ldrh	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d130      	bne.n	8006748 <USBD_SetAddress+0x74>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	88db      	ldrh	r3, [r3, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d12c      	bne.n	8006748 <USBD_SetAddress+0x74>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	2b7f      	cmp	r3, #127	; 0x7f
 80066f4:	d828      	bhi.n	8006748 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006708:	2b03      	cmp	r3, #3
 800670a:	d104      	bne.n	8006716 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f98b 	bl	8006a2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006714:	e01d      	b.n	8006752 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7bfa      	ldrb	r2, [r7, #15]
 800671a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f004 f8aa 	bl	800a87c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa28 	bl	8006b7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673c:	e009      	b.n	8006752 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006746:	e004      	b.n	8006752 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f96d 	bl	8006a2a <USBD_CtlError>
  }
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	885b      	ldrh	r3, [r3, #2]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	4b41      	ldr	r3, [pc, #260]	; (8006874 <USBD_SetConfig+0x118>)
 800676e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006770:	4b40      	ldr	r3, [pc, #256]	; (8006874 <USBD_SetConfig+0x118>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d904      	bls.n	8006782 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f955 	bl	8006a2a <USBD_CtlError>
 8006780:	e075      	b.n	800686e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006788:	2b02      	cmp	r3, #2
 800678a:	d002      	beq.n	8006792 <USBD_SetConfig+0x36>
 800678c:	2b03      	cmp	r3, #3
 800678e:	d023      	beq.n	80067d8 <USBD_SetConfig+0x7c>
 8006790:	e062      	b.n	8006858 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006792:	4b38      	ldr	r3, [pc, #224]	; (8006874 <USBD_SetConfig+0x118>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01a      	beq.n	80067d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800679a:	4b36      	ldr	r3, [pc, #216]	; (8006874 <USBD_SetConfig+0x118>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2203      	movs	r2, #3
 80067a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80067ac:	4b31      	ldr	r3, [pc, #196]	; (8006874 <USBD_SetConfig+0x118>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff f9e8 	bl	8005b88 <USBD_SetClassConfig>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d104      	bne.n	80067c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f932 	bl	8006a2a <USBD_CtlError>
            return;
 80067c6:	e052      	b.n	800686e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f9d8 	bl	8006b7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80067ce:	e04e      	b.n	800686e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9d4 	bl	8006b7e <USBD_CtlSendStatus>
        break;
 80067d6:	e04a      	b.n	800686e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80067d8:	4b26      	ldr	r3, [pc, #152]	; (8006874 <USBD_SetConfig+0x118>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d112      	bne.n	8006806 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80067e8:	4b22      	ldr	r3, [pc, #136]	; (8006874 <USBD_SetConfig+0x118>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <USBD_SetConfig+0x118>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff f9e4 	bl	8005bc6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9bd 	bl	8006b7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006804:	e033      	b.n	800686e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006806:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <USBD_SetConfig+0x118>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d01d      	beq.n	8006850 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff f9d2 	bl	8005bc6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <USBD_SetConfig+0x118>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <USBD_SetConfig+0x118>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff f9a8 	bl	8005b88 <USBD_SetClassConfig>
 8006838:	4603      	mov	r3, r0
 800683a:	2b02      	cmp	r3, #2
 800683c:	d104      	bne.n	8006848 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f8f2 	bl	8006a2a <USBD_CtlError>
            return;
 8006846:	e012      	b.n	800686e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f998 	bl	8006b7e <USBD_CtlSendStatus>
        break;
 800684e:	e00e      	b.n	800686e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f994 	bl	8006b7e <USBD_CtlSendStatus>
        break;
 8006856:	e00a      	b.n	800686e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f8e5 	bl	8006a2a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <USBD_SetConfig+0x118>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff f9ad 	bl	8005bc6 <USBD_ClrClassConfig>
        break;
 800686c:	bf00      	nop
    }
  }
}
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	200002a8 	.word	0x200002a8

08006878 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	88db      	ldrh	r3, [r3, #6]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d004      	beq.n	8006894 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f8cc 	bl	8006a2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006892:	e022      	b.n	80068da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689a:	2b02      	cmp	r3, #2
 800689c:	dc02      	bgt.n	80068a4 <USBD_GetConfig+0x2c>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dc03      	bgt.n	80068aa <USBD_GetConfig+0x32>
 80068a2:	e015      	b.n	80068d0 <USBD_GetConfig+0x58>
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d00b      	beq.n	80068c0 <USBD_GetConfig+0x48>
 80068a8:	e012      	b.n	80068d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3308      	adds	r3, #8
 80068b4:	2201      	movs	r2, #1
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f920 	bl	8006afe <USBD_CtlSendData>
        break;
 80068be:	e00c      	b.n	80068da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	2201      	movs	r2, #1
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f918 	bl	8006afe <USBD_CtlSendData>
        break;
 80068ce:	e004      	b.n	80068da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f8a9 	bl	8006a2a <USBD_CtlError>
        break;
 80068d8:	bf00      	nop
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f2:	3b01      	subs	r3, #1
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d81e      	bhi.n	8006936 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	88db      	ldrh	r3, [r3, #6]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d004      	beq.n	800690a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f891 	bl	8006a2a <USBD_CtlError>
        break;
 8006908:	e01a      	b.n	8006940 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f043 0202 	orr.w	r2, r3, #2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	330c      	adds	r3, #12
 800692a:	2202      	movs	r2, #2
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8e5 	bl	8006afe <USBD_CtlSendData>
      break;
 8006934:	e004      	b.n	8006940 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f876 	bl	8006a2a <USBD_CtlError>
      break;
 800693e:	bf00      	nop
  }
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d106      	bne.n	8006968 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f90b 	bl	8006b7e <USBD_CtlSendStatus>
  }
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006980:	3b01      	subs	r3, #1
 8006982:	2b02      	cmp	r3, #2
 8006984:	d80b      	bhi.n	800699e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	885b      	ldrh	r3, [r3, #2]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d10c      	bne.n	80069a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8f1 	bl	8006b7e <USBD_CtlSendStatus>
      }
      break;
 800699c:	e004      	b.n	80069a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f842 	bl	8006a2a <USBD_CtlError>
      break;
 80069a6:	e000      	b.n	80069aa <USBD_ClrFeature+0x3a>
      break;
 80069a8:	bf00      	nop
  }
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785a      	ldrb	r2, [r3, #1]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	3302      	adds	r3, #2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	3303      	adds	r3, #3
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	3304      	adds	r3, #4
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	3305      	adds	r3, #5
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4413      	add	r3, r2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	3306      	adds	r3, #6
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	80da      	strh	r2, [r3, #6]

}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f003 feb6 	bl	800a7a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f003 feb2 	bl	800a7a8 <USBD_LL_StallEP>
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d032      	beq.n	8006ac8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f834 	bl	8006ad0 <USBD_GetLen>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	75fa      	strb	r2, [r7, #23]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	75fa      	strb	r2, [r7, #23]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	2203      	movs	r2, #3
 8006a96:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006a98:	e012      	b.n	8006ac0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	60fa      	str	r2, [r7, #12]
 8006aa0:	7dfa      	ldrb	r2, [r7, #23]
 8006aa2:	1c51      	adds	r1, r2, #1
 8006aa4:	75f9      	strb	r1, [r7, #23]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	440a      	add	r2, r1
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	75fa      	strb	r2, [r7, #23]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4413      	add	r3, r2
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e8      	bne.n	8006a9a <USBD_GetString+0x4e>
    }
  }
}
 8006ac8:	bf00      	nop
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006adc:	e005      	b.n	8006aea <USBD_GetLen+0x1a>
  {
    len++;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f5      	bne.n	8006ade <USBD_GetLen+0xe>
  }

  return len;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	2100      	movs	r1, #0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f003 fec7 	bl	800a8ba <USBD_LL_Transmit>

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f003 feb5 	bl	800a8ba <USBD_LL_Transmit>

  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f003 fec6 	bl	800a900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	2200      	movs	r2, #0
 8006b92:	2100      	movs	r1, #0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f003 fe90 	bl	800a8ba <USBD_LL_Transmit>

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2205      	movs	r2, #5
 8006bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f003 fea0 	bl	800a900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd2:	f3ef 8305 	mrs	r3, IPSR
 8006bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bde:	f3ef 8310 	mrs	r3, PRIMASK
 8006be2:	607b      	str	r3, [r7, #4]
  return(result);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <osKernelInitialize+0x32>
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <osKernelInitialize+0x60>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d109      	bne.n	8006c06 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006bfe:	f06f 0305 	mvn.w	r3, #5
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e00c      	b.n	8006c20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <osKernelInitialize+0x60>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <osKernelInitialize+0x60>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e002      	b.n	8006c20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	200002ac 	.word	0x200002ac

08006c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10f      	bne.n	8006c62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	607b      	str	r3, [r7, #4]
  return(result);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <osKernelStart+0x32>
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <osKernelStart+0x64>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d109      	bne.n	8006c6a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c56:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006c62:	f06f 0305 	mvn.w	r3, #5
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	e00e      	b.n	8006c88 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <osKernelStart+0x64>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d107      	bne.n	8006c82 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <osKernelStart+0x64>)
 8006c74:	2202      	movs	r2, #2
 8006c76:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006c78:	f001 fe1c 	bl	80088b4 <vTaskStartScheduler>
      stat = osOK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e002      	b.n	8006c88 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200002ac 	.word	0x200002ac

08006c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b092      	sub	sp, #72	; 0x48
 8006c9c:	af04      	add	r7, sp, #16
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca8:	f3ef 8305 	mrs	r3, IPSR
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8094 	bne.w	8006dde <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	623b      	str	r3, [r7, #32]
  return(result);
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808d 	bne.w	8006dde <osThreadNew+0x146>
 8006cc4:	4b48      	ldr	r3, [pc, #288]	; (8006de8 <osThreadNew+0x150>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d106      	bne.n	8006cda <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8082 	bne.w	8006dde <osThreadNew+0x146>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d07e      	beq.n	8006dde <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006ce4:	2318      	movs	r3, #24
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006ce8:	2300      	movs	r3, #0
 8006cea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006cec:	f107 031b 	add.w	r3, r7, #27
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d045      	beq.n	8006d8a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <osThreadNew+0x74>
        name = attr->name;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <osThreadNew+0x9a>
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b38      	cmp	r3, #56	; 0x38
 8006d24:	d805      	bhi.n	8006d32 <osThreadNew+0x9a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <osThreadNew+0x9e>
        return (NULL);
 8006d32:	2300      	movs	r3, #0
 8006d34:	e054      	b.n	8006de0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	089b      	lsrs	r3, r3, #2
 8006d44:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <osThreadNew+0xd4>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b5b      	cmp	r3, #91	; 0x5b
 8006d54:	d90a      	bls.n	8006d6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <osThreadNew+0xd4>
        mem = 1;
 8006d66:	2301      	movs	r3, #1
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d6a:	e010      	b.n	8006d8e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <osThreadNew+0xf6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <osThreadNew+0xf6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <osThreadNew+0xf6>
          mem = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d88:	e001      	b.n	8006d8e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d110      	bne.n	8006db6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d9c:	9202      	str	r2, [sp, #8]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f001 fbb6 	bl	800851c <xTaskCreateStatic>
 8006db0:	4603      	mov	r3, r0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e013      	b.n	8006dde <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d110      	bne.n	8006dde <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f001 fc00 	bl	80085d4 <xTaskCreate>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d001      	beq.n	8006dde <osThreadNew+0x146>
          hTask = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dde:	697b      	ldr	r3, [r7, #20]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3738      	adds	r7, #56	; 0x38
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200002ac 	.word	0x200002ac

08006dec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df4:	f3ef 8305 	mrs	r3, IPSR
 8006df8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10f      	bne.n	8006e20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e00:	f3ef 8310 	mrs	r3, PRIMASK
 8006e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <osDelay+0x34>
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <osDelay+0x58>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d109      	bne.n	8006e28 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e14:	f3ef 8311 	mrs	r3, BASEPRI
 8006e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <osDelay+0x3c>
    stat = osErrorISR;
 8006e20:	f06f 0305 	mvn.w	r3, #5
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e007      	b.n	8006e38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fd0a 	bl	800884c <vTaskDelay>
    }
  }

  return (stat);
 8006e38:	697b      	ldr	r3, [r7, #20]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200002ac 	.word	0x200002ac

08006e48 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e54:	f3ef 8305 	mrs	r3, IPSR
 8006e58:	617b      	str	r3, [r7, #20]
  return(result);
 8006e5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d13d      	bne.n	8006edc <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	613b      	str	r3, [r7, #16]
  return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d137      	bne.n	8006edc <osEventFlagsNew+0x94>
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ee8 <osEventFlagsNew+0xa0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d105      	bne.n	8006e80 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e74:	f3ef 8311 	mrs	r3, BASEPRI
 8006e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d12d      	bne.n	8006edc <osEventFlagsNew+0x94>
    mem = -1;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <osEventFlagsNew+0x5a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b1f      	cmp	r3, #31
 8006e9a:	d902      	bls.n	8006ea2 <osEventFlagsNew+0x5a>
        mem = 1;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e00c      	b.n	8006ebc <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d108      	bne.n	8006ebc <osEventFlagsNew+0x74>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <osEventFlagsNew+0x74>
          mem = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	e001      	b.n	8006ebc <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d106      	bne.n	8006ed0 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 faae 	bl	8007428 <xEventGroupCreateStatic>
 8006ecc:	61f8      	str	r0, [r7, #28]
 8006ece:	e005      	b.n	8006edc <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006ed6:	f000 fade 	bl	8007496 <xEventGroupCreate>
 8006eda:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006edc:	69fb      	ldr	r3, [r7, #28]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3720      	adds	r7, #32
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200002ac 	.word	0x200002ac

08006eec <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <osEventFlagsSet+0x1e>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006f0a:	f06f 0303 	mvn.w	r3, #3
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	e03a      	b.n	8006f88 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f12:	f3ef 8305 	mrs	r3, IPSR
 8006f16:	617b      	str	r3, [r7, #20]
  return(result);
 8006f18:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10f      	bne.n	8006f3e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f22:	613b      	str	r3, [r7, #16]
  return(result);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <osEventFlagsSet+0x52>
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <osEventFlagsSet+0xa8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d123      	bne.n	8006f7a <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f32:	f3ef 8311 	mrs	r3, BASEPRI
 8006f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01d      	beq.n	8006f7a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	461a      	mov	r2, r3
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	69b8      	ldr	r0, [r7, #24]
 8006f4c:	f000 fc46 	bl	80077dc <xEventGroupSetBitsFromISR>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006f56:	f06f 0302 	mvn.w	r3, #2
 8006f5a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f5c:	e013      	b.n	8006f86 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <osEventFlagsSet+0x9a>
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <osEventFlagsSet+0xac>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f78:	e005      	b.n	8006f86 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	f000 fb73 	bl	8007668 <xEventGroupSetBits>
 8006f82:	61f8      	str	r0, [r7, #28]
 8006f84:	e000      	b.n	8006f88 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006f86:	bf00      	nop
  }

  return (rflags);
 8006f88:	69fb      	ldr	r3, [r7, #28]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3720      	adds	r7, #32
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200002ac 	.word	0x200002ac
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08e      	sub	sp, #56	; 0x38
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <osEventFlagsWait+0x22>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006fbe:	f06f 0303 	mvn.w	r3, #3
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc4:	e059      	b.n	800707a <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fc6:	f3ef 8305 	mrs	r3, IPSR
 8006fca:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <osEventFlagsWait+0x56>
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <osEventFlagsWait+0xe8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d109      	bne.n	8006ffa <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fea:	617b      	str	r3, [r7, #20]
  return(result);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006ff2:	f06f 0305 	mvn.w	r3, #5
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff8:	e03f      	b.n	800707a <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007008:	e001      	b.n	800700e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8007018:	2300      	movs	r3, #0
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
 800701c:	e001      	b.n	8007022 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800701e:	2301      	movs	r3, #1
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	6a38      	ldr	r0, [r7, #32]
 800702e:	f000 fa4d 	bl	80074cc <xEventGroupWaitBits>
 8007032:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00e      	beq.n	800705c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	429a      	cmp	r2, r3
 8007044:	d019      	beq.n	800707a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800704c:	f06f 0301 	mvn.w	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
 8007052:	e012      	b.n	800707a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007054:	f06f 0302 	mvn.w	r3, #2
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
 800705a:	e00e      	b.n	800707a <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	4013      	ands	r3, r2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 800706c:	f06f 0301 	mvn.w	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	e002      	b.n	800707a <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007074:	f06f 0302 	mvn.w	r3, #2
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800707c:	4618      	mov	r0, r3
 800707e:	3730      	adds	r7, #48	; 0x30
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	200002ac 	.word	0x200002ac

08007088 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	; 0x30
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007098:	f3ef 8305 	mrs	r3, IPSR
 800709c:	61bb      	str	r3, [r7, #24]
  return(result);
 800709e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d16f      	bne.n	8007184 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a4:	f3ef 8310 	mrs	r3, PRIMASK
 80070a8:	617b      	str	r3, [r7, #20]
  return(result);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d169      	bne.n	8007184 <osMessageQueueNew+0xfc>
 80070b0:	4b37      	ldr	r3, [pc, #220]	; (8007190 <osMessageQueueNew+0x108>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d105      	bne.n	80070c4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070b8:	f3ef 8311 	mrs	r3, BASEPRI
 80070bc:	613b      	str	r3, [r7, #16]
  return(result);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d15f      	bne.n	8007184 <osMessageQueueNew+0xfc>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05c      	beq.n	8007184 <osMessageQueueNew+0xfc>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d059      	beq.n	8007184 <osMessageQueueNew+0xfc>
    mem = -1;
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d029      	beq.n	8007130 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d012      	beq.n	800710a <osMessageQueueNew+0x82>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b4f      	cmp	r3, #79	; 0x4f
 80070ea:	d90e      	bls.n	800710a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	fb01 f303 	mul.w	r3, r1, r3
 8007100:	429a      	cmp	r2, r3
 8007102:	d302      	bcc.n	800710a <osMessageQueueNew+0x82>
        mem = 1;
 8007104:	2301      	movs	r3, #1
 8007106:	623b      	str	r3, [r7, #32]
 8007108:	e014      	b.n	8007134 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d110      	bne.n	8007134 <osMessageQueueNew+0xac>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10c      	bne.n	8007134 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <osMessageQueueNew+0xac>
          mem = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	e001      	b.n	8007134 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10b      	bne.n	8007152 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2100      	movs	r1, #0
 8007144:	9100      	str	r1, [sp, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fc73 	bl	8007a34 <xQueueGenericCreateStatic>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24
 8007150:	e008      	b.n	8007164 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007158:	2200      	movs	r2, #0
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fce0 	bl	8007b22 <xQueueGenericCreate>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	e001      	b.n	800717c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007180:	f001 f970 	bl	8008464 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200002ac 	.word	0x200002ac

08007194 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ac:	f3ef 8305 	mrs	r3, IPSR
 80071b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80071b2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10f      	bne.n	80071d8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <osMessageQueuePut+0x44>
 80071c4:	4b2b      	ldr	r3, [pc, #172]	; (8007274 <osMessageQueuePut+0xe0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d12e      	bne.n	800722a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071cc:	f3ef 8311 	mrs	r3, BASEPRI
 80071d0:	617b      	str	r3, [r7, #20]
  return(result);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d028      	beq.n	800722a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <osMessageQueuePut+0x56>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <osMessageQueuePut+0x56>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80071ea:	f06f 0303 	mvn.w	r3, #3
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071f0:	e039      	b.n	8007266 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80071f6:	f107 0210 	add.w	r2, r7, #16
 80071fa:	2300      	movs	r3, #0
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	6a38      	ldr	r0, [r7, #32]
 8007200:	f000 fdee 	bl	8007de0 <xQueueGenericSendFromISR>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d003      	beq.n	8007212 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800720a:	f06f 0302 	mvn.w	r3, #2
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007210:	e029      	b.n	8007266 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d026      	beq.n	8007266 <osMessageQueuePut+0xd2>
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <osMessageQueuePut+0xe4>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007228:	e01d      	b.n	8007266 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <osMessageQueuePut+0xa2>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007236:	f06f 0303 	mvn.w	r3, #3
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
 800723c:	e014      	b.n	8007268 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800723e:	2300      	movs	r3, #0
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	6a38      	ldr	r0, [r7, #32]
 8007246:	f000 fccd 	bl	8007be4 <xQueueGenericSend>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d00b      	beq.n	8007268 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007256:	f06f 0301 	mvn.w	r3, #1
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
 800725c:	e004      	b.n	8007268 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800725e:	f06f 0302 	mvn.w	r3, #2
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
 8007264:	e000      	b.n	8007268 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007266:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800726a:	4618      	mov	r0, r3
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	200002ac 	.word	0x200002ac
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	61fb      	str	r3, [r7, #28]
  return(result);
 8007298:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <osMessageQueueGet+0x42>
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <osMessageQueueGet+0xdc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d12e      	bne.n	8007310 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072b2:	f3ef 8311 	mrs	r3, BASEPRI
 80072b6:	617b      	str	r3, [r7, #20]
  return(result);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d028      	beq.n	8007310 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <osMessageQueueGet+0x54>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <osMessageQueueGet+0x54>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80072d0:	f06f 0303 	mvn.w	r3, #3
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072d6:	e038      	b.n	800734a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80072d8:	2300      	movs	r3, #0
 80072da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	461a      	mov	r2, r3
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	6a38      	ldr	r0, [r7, #32]
 80072e6:	f000 fef3 	bl	80080d0 <xQueueReceiveFromISR>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d003      	beq.n	80072f8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80072f0:	f06f 0302 	mvn.w	r3, #2
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072f6:	e028      	b.n	800734a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d025      	beq.n	800734a <osMessageQueueGet+0xce>
 80072fe:	4b17      	ldr	r3, [pc, #92]	; (800735c <osMessageQueueGet+0xe0>)
 8007300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800730e:	e01c      	b.n	800734a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <osMessageQueueGet+0xa0>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800731c:	f06f 0303 	mvn.w	r3, #3
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
 8007322:	e013      	b.n	800734c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	6a38      	ldr	r0, [r7, #32]
 800732a:	f000 fdf1 	bl	8007f10 <xQueueReceive>
 800732e:	4603      	mov	r3, r0
 8007330:	2b01      	cmp	r3, #1
 8007332:	d00b      	beq.n	800734c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800733a:	f06f 0301 	mvn.w	r3, #1
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
 8007340:	e004      	b.n	800734c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007342:	f06f 0302 	mvn.w	r3, #2
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
 8007348:	e000      	b.n	800734c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800734a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800734e:	4618      	mov	r0, r3
 8007350:	3728      	adds	r7, #40	; 0x28
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200002ac 	.word	0x200002ac
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	e01e      	b.n	80073b6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007378:	f3ef 8305 	mrs	r3, IPSR
 800737c:	617b      	str	r3, [r7, #20]
  return(result);
 800737e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007384:	f3ef 8310 	mrs	r3, PRIMASK
 8007388:	613b      	str	r3, [r7, #16]
  return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <osMessageQueueGetCount+0x44>
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <osMessageQueueGetCount+0x60>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d10a      	bne.n	80073ae <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007398:	f3ef 8311 	mrs	r3, BASEPRI
 800739c:	60fb      	str	r3, [r7, #12]
  return(result);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80073a4:	69b8      	ldr	r0, [r7, #24]
 80073a6:	f000 ff31 	bl	800820c <uxQueueMessagesWaitingFromISR>
 80073aa:	61f8      	str	r0, [r7, #28]
 80073ac:	e003      	b.n	80073b6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80073ae:	69b8      	ldr	r0, [r7, #24]
 80073b0:	f000 ff0e 	bl	80081d0 <uxQueueMessagesWaiting>
 80073b4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80073b6:	69fb      	ldr	r3, [r7, #28]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	200002ac 	.word	0x200002ac

080073c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4a06      	ldr	r2, [pc, #24]	; (80073ec <vApplicationGetIdleTaskMemory+0x28>)
 80073d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80073da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2280      	movs	r2, #128	; 0x80
 80073e0:	601a      	str	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	200002b0 	.word	0x200002b0
 80073f0:	2000030c 	.word	0x2000030c

080073f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a07      	ldr	r2, [pc, #28]	; (8007420 <vApplicationGetTimerTaskMemory+0x2c>)
 8007404:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4a06      	ldr	r2, [pc, #24]	; (8007424 <vApplicationGetTimerTaskMemory+0x30>)
 800740a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	2000050c 	.word	0x2000050c
 8007424:	20000568 	.word	0x20000568

08007428 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800744c:	2320      	movs	r3, #32
 800744e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b20      	cmp	r3, #32
 8007454:	d00a      	beq.n	800746c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f9bf 	bl	8007804 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2201      	movs	r2, #1
 800748a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800748c:	697b      	ldr	r3, [r7, #20]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800749c:	2020      	movs	r0, #32
 800749e:	f002 fd0d 	bl	8009ebc <pvPortMalloc>
 80074a2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f9a5 	bl	8007804 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80074c0:	687b      	ldr	r3, [r7, #4]
	}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b090      	sub	sp, #64	; 0x40
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xEventGroupWaitBits+0x36>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	623b      	str	r3, [r7, #32]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <xEventGroupWaitBits+0x56>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	61fb      	str	r3, [r7, #28]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xEventGroupWaitBits+0x72>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800753e:	f001 fea3 	bl	8009288 <xTaskGetSchedulerState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <xEventGroupWaitBits+0x82>
 8007548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <xEventGroupWaitBits+0x86>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xEventGroupWaitBits+0x88>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	617b      	str	r3, [r7, #20]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800756e:	f001 fa07 	bl	8008980 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800757e:	f000 f90b 	bl	8007798 <prvTestWaitCondition>
 8007582:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800758e:	2300      	movs	r3, #0
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d028      	beq.n	80075ea <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	43db      	mvns	r3, r3
 80075a0:	401a      	ands	r2, r3
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e020      	b.n	80075ea <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80075a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d104      	bne.n	80075b8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80075b2:	2301      	movs	r3, #1
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
 80075b6:	e018      	b.n	80075ea <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075d2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	1d18      	adds	r0, r3, #4
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	4313      	orrs	r3, r2
 80075de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e0:	4619      	mov	r1, r3
 80075e2:	f001 fbc5 	bl	8008d70 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80075ea:	f001 f9d7 	bl	800899c <xTaskResumeAll>
 80075ee:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80075f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d031      	beq.n	800765a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d107      	bne.n	800760c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <xEventGroupWaitBits+0x198>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800760c:	f001 fec8 	bl	80093a0 <uxTaskResetEventItemValue>
 8007610:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11a      	bne.n	8007652 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800761c:	f002 fb4e 	bl	8009cbc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800762c:	f000 f8b4 	bl	8007798 <prvTestWaitCondition>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d006      	beq.n	800764a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	43db      	mvns	r3, r3
 8007644:	401a      	ands	r2, r3
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800764a:	2301      	movs	r3, #1
 800764c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800764e:	f002 fb65 	bl	8009d1c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800765a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800765c:	4618      	mov	r0, r3
 800765e:	3740      	adds	r7, #64	; 0x40
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	; 0x38
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007672:	2300      	movs	r3, #0
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800767a:	2300      	movs	r3, #0
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xEventGroupSetBits+0x32>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	613b      	str	r3, [r7, #16]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <xEventGroupSetBits+0x52>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	60fb      	str	r3, [r7, #12]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	3304      	adds	r3, #4
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	3308      	adds	r3, #8
 80076c4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80076c6:	f001 f95b 	bl	8008980 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80076dc:	e03c      	b.n	8007758 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80076f4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d108      	bne.n	800771a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007718:	e008      	b.n	800772c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	429a      	cmp	r2, r3
 8007726:	d101      	bne.n	800772c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007728:	2301      	movs	r3, #1
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	4313      	orrs	r3, r2
 8007742:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800774c:	4619      	mov	r1, r3
 800774e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007750:	f001 fbda 	bl	8008f08 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	429a      	cmp	r2, r3
 800775e:	d1be      	bne.n	80076de <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	43db      	mvns	r3, r3
 8007768:	401a      	ands	r2, r3
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800776e:	f001 f915 	bl	800899c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	681b      	ldr	r3, [r3, #0]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3738      	adds	r7, #56	; 0x38
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff6c 	bl	8007668 <xEventGroupSetBits>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d107      	bne.n	80077be <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e007      	b.n	80077ce <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d101      	bne.n	80077ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80077ce:	697b      	ldr	r3, [r7, #20]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr
	...

080077dc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	4804      	ldr	r0, [pc, #16]	; (8007800 <xEventGroupSetBitsFromISR+0x24>)
 80077f0:	f002 f954 	bl	8009a9c <xTimerPendFunctionCallFromISR>
 80077f4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80077f6:	697b      	ldr	r3, [r7, #20]
	}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	0800777f 	.word	0x0800777f

08007804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0208 	add.w	r2, r3, #8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f103 0208 	add.w	r2, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f103 0208 	add.w	r2, r3, #8
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d103      	bne.n	80078c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e00c      	b.n	80078da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3308      	adds	r3, #8
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e002      	b.n	80078ce <vListInsert+0x2e>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d2f6      	bcs.n	80078c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6892      	ldr	r2, [r2, #8]
 8007926:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6852      	ldr	r2, [r2, #4]
 8007930:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	429a      	cmp	r2, r3
 800793a:	d103      	bne.n	8007944 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	1e5a      	subs	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
	...

08007964 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGenericReset+0x2a>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	60bb      	str	r3, [r7, #8]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800798e:	f002 f995 	bl	8009cbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800799e:	fb01 f303 	mul.w	r3, r1, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079be:	3b01      	subs	r3, #1
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	441a      	add	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	22ff      	movs	r2, #255	; 0xff
 80079d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	22ff      	movs	r2, #255	; 0xff
 80079da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d114      	bne.n	8007a0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01a      	beq.n	8007a22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3310      	adds	r3, #16
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 fa25 	bl	8008e40 <xTaskRemoveFromEventList>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d012      	beq.n	8007a22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <xQueueGenericReset+0xcc>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	e009      	b.n	8007a22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3310      	adds	r3, #16
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fef6 	bl	8007804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3324      	adds	r3, #36	; 0x24
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fef1 	bl	8007804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a22:	f002 f97b 	bl	8009d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a26:	2301      	movs	r3, #1
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08e      	sub	sp, #56	; 0x38
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <xQueueGenericCreateStatic+0x52>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <xQueueGenericCreateStatic+0x56>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueGenericCreateStatic+0x58>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	623b      	str	r3, [r7, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <xQueueGenericCreateStatic+0x7e>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <xQueueGenericCreateStatic+0x82>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <xQueueGenericCreateStatic+0x84>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	61fb      	str	r3, [r7, #28]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ad2:	2350      	movs	r3, #80	; 0x50
 8007ad4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b50      	cmp	r3, #80	; 0x50
 8007ada:	d00a      	beq.n	8007af2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	61bb      	str	r3, [r7, #24]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00d      	beq.n	8007b18 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f843 	bl	8007b9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3730      	adds	r7, #48	; 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08a      	sub	sp, #40	; 0x28
 8007b26:	af02      	add	r7, sp, #8
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	613b      	str	r3, [r7, #16]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	e004      	b.n	8007b62 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	fb02 f303 	mul.w	r3, r2, r3
 8007b60:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	3350      	adds	r3, #80	; 0x50
 8007b66:	4618      	mov	r0, r3
 8007b68:	f002 f9a8 	bl	8009ebc <pvPortMalloc>
 8007b6c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	3350      	adds	r3, #80	; 0x50
 8007b78:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b82:	79fa      	ldrb	r2, [r7, #7]
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f805 	bl	8007b9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b94:	69bb      	ldr	r3, [r7, #24]
	}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3720      	adds	r7, #32
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e002      	b.n	8007bc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bcc:	2101      	movs	r1, #1
 8007bce:	69b8      	ldr	r0, [r7, #24]
 8007bd0:	f7ff fec8 	bl	8007964 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08e      	sub	sp, #56	; 0x38
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <xQueueGenericSend+0x32>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d103      	bne.n	8007c24 <xQueueGenericSend+0x40>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <xQueueGenericSend+0x44>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <xQueueGenericSend+0x46>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <xQueueGenericSend+0x60>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSend+0x6e>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <xQueueGenericSend+0x72>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericSend+0x74>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	623b      	str	r3, [r7, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c72:	f001 fb09 	bl	8009288 <xTaskGetSchedulerState>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <xQueueGenericSend+0x9e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <xQueueGenericSend+0xa2>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueGenericSend+0xa4>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61fb      	str	r3, [r7, #28]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca2:	f002 f80b 	bl	8009cbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <xQueueGenericSend+0xd4>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d129      	bne.n	8007d0c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cbe:	f000 fac0 	bl	8008242 <prvCopyDataToQueue>
 8007cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f8b5 	bl	8008e40 <xTaskRemoveFromEventList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d013      	beq.n	8007d04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cdc:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <xQueueGenericSend+0x1f8>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	e00a      	b.n	8007d04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cf4:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xQueueGenericSend+0x1f8>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d04:	f002 f80a 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e063      	b.n	8007dd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d12:	f002 f803 	bl	8009d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e05c      	b.n	8007dd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d20:	f107 0314 	add.w	r3, r7, #20
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f951 	bl	8008fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d2e:	f001 fff5 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d32:	f000 fe25 	bl	8008980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d36:	f001 ffc1 	bl	8009cbc <vPortEnterCritical>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d103      	bne.n	8007d50 <xQueueGenericSend+0x16c>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSend+0x182>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d66:	f001 ffd9 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d6a:	1d3a      	adds	r2, r7, #4
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f940 	bl	8008ff8 <xTaskCheckForTimeOut>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d124      	bne.n	8007dc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d80:	f000 fb57 	bl	8008432 <prvIsQueueFull>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 ffc8 	bl	8008d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d9a:	f000 fae2 	bl	8008362 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d9e:	f000 fdfd 	bl	800899c <xTaskResumeAll>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f af7c 	bne.w	8007ca2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <xQueueGenericSend+0x1f8>)
 8007dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	e772      	b.n	8007ca2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dbe:	f000 fad0 	bl	8008362 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc2:	f000 fdeb 	bl	800899c <xTaskResumeAll>
 8007dc6:	e76c      	b.n	8007ca2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dca:	f000 faca 	bl	8008362 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dce:	f000 fde5 	bl	800899c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dd2:	2300      	movs	r3, #0
		}
	}
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3738      	adds	r7, #56	; 0x38
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d103      	bne.n	8007e1c <xQueueGenericSendFromISR+0x3c>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <xQueueGenericSendFromISR+0x40>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <xQueueGenericSendFromISR+0x42>
 8007e20:	2300      	movs	r3, #0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	623b      	str	r3, [r7, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d103      	bne.n	8007e4a <xQueueGenericSendFromISR+0x6a>
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <xQueueGenericSendFromISR+0x6e>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueGenericSendFromISR+0x70>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	61fb      	str	r3, [r7, #28]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e6a:	f001 ffe9 	bl	8009e40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e6e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	61ba      	str	r2, [r7, #24]
 8007e84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <xQueueGenericSendFromISR+0xbc>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d12c      	bne.n	8007ef6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eac:	f000 f9c9 	bl	8008242 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eb0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d112      	bne.n	8007ee0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d016      	beq.n	8007ef0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	3324      	adds	r3, #36	; 0x24
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 ffba 	bl	8008e40 <xTaskRemoveFromEventList>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	b25a      	sxtb	r2, r3
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ef4:	e001      	b.n	8007efa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3738      	adds	r7, #56	; 0x38
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08c      	sub	sp, #48	; 0x30
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xQueueReceive+0x30>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	623b      	str	r3, [r7, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueReceive+0x3e>
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueReceive+0x42>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueReceive+0x44>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xQueueReceive+0x5e>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61fb      	str	r3, [r7, #28]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f6e:	f001 f98b 	bl	8009288 <xTaskGetSchedulerState>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <xQueueReceive+0x6e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <xQueueReceive+0x72>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <xQueueReceive+0x74>
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <xQueueReceive+0x8e>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	61bb      	str	r3, [r7, #24]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f9e:	f001 fe8d 	bl	8009cbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01f      	beq.n	8007fee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb2:	f000 f9b0 	bl	8008316 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1e5a      	subs	r2, r3, #1
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00f      	beq.n	8007fe6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	3310      	adds	r3, #16
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 ff38 	bl	8008e40 <xTaskRemoveFromEventList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fd6:	4b3d      	ldr	r3, [pc, #244]	; (80080cc <xQueueReceive+0x1bc>)
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fe6:	f001 fe99 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e069      	b.n	80080c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ff4:	f001 fe92 	bl	8009d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e062      	b.n	80080c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008002:	f107 0310 	add.w	r3, r7, #16
 8008006:	4618      	mov	r0, r3
 8008008:	f000 ffe0 	bl	8008fcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008010:	f001 fe84 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008014:	f000 fcb4 	bl	8008980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008018:	f001 fe50 	bl	8009cbc <vPortEnterCritical>
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d103      	bne.n	8008032 <xQueueReceive+0x122>
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008038:	b25b      	sxtb	r3, r3
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d103      	bne.n	8008048 <xQueueReceive+0x138>
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008048:	f001 fe68 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800804c:	1d3a      	adds	r2, r7, #4
 800804e:	f107 0310 	add.w	r3, r7, #16
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 ffcf 	bl	8008ff8 <xTaskCheckForTimeOut>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d123      	bne.n	80080a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008062:	f000 f9d0 	bl	8008406 <prvIsQueueEmpty>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d017      	beq.n	800809c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	3324      	adds	r3, #36	; 0x24
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fe57 	bl	8008d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800807a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807c:	f000 f971 	bl	8008362 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008080:	f000 fc8c 	bl	800899c <xTaskResumeAll>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d189      	bne.n	8007f9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <xQueueReceive+0x1bc>)
 800808c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	e780      	b.n	8007f9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800809c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809e:	f000 f960 	bl	8008362 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080a2:	f000 fc7b 	bl	800899c <xTaskResumeAll>
 80080a6:	e77a      	b.n	8007f9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080aa:	f000 f95a 	bl	8008362 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080ae:	f000 fc75 	bl	800899c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b4:	f000 f9a7 	bl	8008406 <prvIsQueueEmpty>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f43f af6f 	beq.w	8007f9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3730      	adds	r7, #48	; 0x30
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	623b      	str	r3, [r7, #32]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <xQueueReceiveFromISR+0x3a>
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <xQueueReceiveFromISR+0x3e>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueReceiveFromISR+0x40>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	61fb      	str	r3, [r7, #28]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800812a:	f001 fe89 	bl	8009e40 <vPortValidateInterruptPriority>
	__asm volatile
 800812e:	f3ef 8211 	mrs	r2, BASEPRI
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	61ba      	str	r2, [r7, #24]
 8008144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008146:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d02f      	beq.n	80081b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800815c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008164:	f000 f8d7 	bl	8008316 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d112      	bne.n	80081a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	3310      	adds	r3, #16
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fe5a 	bl	8008e40 <xTaskRemoveFromEventList>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e007      	b.n	80081b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80081a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a4:	3301      	adds	r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	b25a      	sxtb	r2, r3
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80081b0:	2301      	movs	r3, #1
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
 80081b4:	e001      	b.n	80081ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f383 8811 	msr	BASEPRI, r3
}
 80081c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3738      	adds	r7, #56	; 0x38
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60bb      	str	r3, [r7, #8]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80081f4:	f001 fd62 	bl	8009cbc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80081fe:	f001 fd8d 	bl	8009d1c <vPortExitCritical>

	return uxReturn;
 8008202:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60bb      	str	r3, [r7, #8]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008236:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d14d      	bne.n	8008304 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	f001 f829 	bl	80092c4 <xTaskPriorityDisinherit>
 8008272:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	e043      	b.n	8008304 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d119      	bne.n	80082b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6898      	ldr	r0, [r3, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	461a      	mov	r2, r3
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	f002 fbcb 	bl	800aa28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	441a      	add	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d32b      	bcc.n	8008304 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	e026      	b.n	8008304 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68d8      	ldr	r0, [r3, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	461a      	mov	r2, r3
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	f002 fbb1 	bl	800aa28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	425b      	negs	r3, r3
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d207      	bcs.n	80082f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	425b      	negs	r3, r3
 80082ec:	441a      	add	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d105      	bne.n	8008304 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3b01      	subs	r3, #1
 8008302:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800830c:	697b      	ldr	r3, [r7, #20]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d018      	beq.n	800835a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	441a      	add	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d303      	bcc.n	800834a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68d9      	ldr	r1, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	461a      	mov	r2, r3
 8008354:	6838      	ldr	r0, [r7, #0]
 8008356:	f002 fb67 	bl	800aa28 <memcpy>
	}
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800836a:	f001 fca7 	bl	8009cbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008374:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008376:	e011      	b.n	800839c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d012      	beq.n	80083a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3324      	adds	r3, #36	; 0x24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fd5b 	bl	8008e40 <xTaskRemoveFromEventList>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008390:	f000 fe94 	bl	80090bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	3b01      	subs	r3, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800839c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dce9      	bgt.n	8008378 <prvUnlockQueue+0x16>
 80083a4:	e000      	b.n	80083a8 <prvUnlockQueue+0x46>
					break;
 80083a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	22ff      	movs	r2, #255	; 0xff
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083b0:	f001 fcb4 	bl	8009d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083b4:	f001 fc82 	bl	8009cbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083c0:	e011      	b.n	80083e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d012      	beq.n	80083f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3310      	adds	r3, #16
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fd36 	bl	8008e40 <xTaskRemoveFromEventList>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083da:	f000 fe6f 	bl	80090bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dce9      	bgt.n	80083c2 <prvUnlockQueue+0x60>
 80083ee:	e000      	b.n	80083f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083fa:	f001 fc8f 	bl	8009d1c <vPortExitCritical>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800840e:	f001 fc55 	bl	8009cbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800841a:	2301      	movs	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e001      	b.n	8008424 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008424:	f001 fc7a 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800843a:	f001 fc3f 	bl	8009cbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008446:	429a      	cmp	r2, r3
 8008448:	d102      	bne.n	8008450 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e001      	b.n	8008454 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008454:	f001 fc62 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008458:	68fb      	ldr	r3, [r7, #12]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e014      	b.n	800849e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008474:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <vQueueAddToRegistry+0x4c>)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008480:	490b      	ldr	r1, [pc, #44]	; (80084b0 <vQueueAddToRegistry+0x4c>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <vQueueAddToRegistry+0x4c>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	4413      	add	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008496:	e006      	b.n	80084a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	d9e7      	bls.n	8008474 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr
 80084b0:	20001be4 	.word	0x20001be4

080084b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084c4:	f001 fbfa 	bl	8009cbc <vPortEnterCritical>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d103      	bne.n	80084de <vQueueWaitForMessageRestricted+0x2a>
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e4:	b25b      	sxtb	r3, r3
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d103      	bne.n	80084f4 <vQueueWaitForMessageRestricted+0x40>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f4:	f001 fc12 	bl	8009d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d106      	bne.n	800850e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3324      	adds	r3, #36	; 0x24
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fc6d 	bl	8008de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800850e:	6978      	ldr	r0, [r7, #20]
 8008510:	f7ff ff27 	bl	8008362 <prvUnlockQueue>
	}
 8008514:	bf00      	nop
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08e      	sub	sp, #56	; 0x38
 8008520:	af04      	add	r7, sp, #16
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	623b      	str	r3, [r7, #32]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xTaskCreateStatic+0x46>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	61fb      	str	r3, [r7, #28]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008562:	235c      	movs	r3, #92	; 0x5c
 8008564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b5c      	cmp	r3, #92	; 0x5c
 800856a:	d00a      	beq.n	8008582 <xTaskCreateStatic+0x66>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	61bb      	str	r3, [r7, #24]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01e      	beq.n	80085c6 <xTaskCreateStatic+0xaa>
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01b      	beq.n	80085c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008596:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	2202      	movs	r2, #2
 800859c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085a0:	2300      	movs	r3, #0
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	f107 0314 	add.w	r3, r7, #20
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f850 	bl	800865e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085c0:	f000 f8d4 	bl	800876c <prvAddNewTaskToReadyList>
 80085c4:	e001      	b.n	80085ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085ca:	697b      	ldr	r3, [r7, #20]
	}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	; 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08c      	sub	sp, #48	; 0x30
 80085d8:	af04      	add	r7, sp, #16
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 fc67 	bl	8009ebc <pvPortMalloc>
 80085ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80085f6:	205c      	movs	r0, #92	; 0x5c
 80085f8:	f001 fc60 	bl	8009ebc <pvPortMalloc>
 80085fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
 800860a:	e005      	b.n	8008618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800860c:	6978      	ldr	r0, [r7, #20]
 800860e:	f001 fd19 	bl	800a044 <vPortFree>
 8008612:	e001      	b.n	8008618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008614:	2300      	movs	r3, #0
 8008616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d017      	beq.n	800864e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	2300      	movs	r3, #0
 800862a:	9303      	str	r3, [sp, #12]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f80e 	bl	800865e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008642:	69f8      	ldr	r0, [r7, #28]
 8008644:	f000 f892 	bl	800876c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008648:	2301      	movs	r3, #1
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	e002      	b.n	8008654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295
 8008652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008654:	69bb      	ldr	r3, [r7, #24]
	}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	461a      	mov	r2, r3
 8008676:	21a5      	movs	r1, #165	; 0xa5
 8008678:	f002 f9e4 	bl	800aa44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008686:	3b01      	subs	r3, #1
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	f023 0307 	bic.w	r3, r3, #7
 8008694:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	617b      	str	r3, [r7, #20]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e012      	b.n	80086e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	7819      	ldrb	r1, [r3, #0]
 80086c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	3334      	adds	r3, #52	; 0x34
 80086cc:	460a      	mov	r2, r1
 80086ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d006      	beq.n	80086ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3301      	adds	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	2b0f      	cmp	r3, #15
 80086e6:	d9e9      	bls.n	80086bc <prvInitialiseNewTask+0x5e>
 80086e8:	e000      	b.n	80086ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80086ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2b37      	cmp	r3, #55	; 0x37
 80086f8:	d901      	bls.n	80086fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086fa:	2337      	movs	r3, #55	; 0x37
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008708:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2200      	movs	r2, #0
 800870e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	3304      	adds	r3, #4
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff f894 	bl	8007842 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	3318      	adds	r3, #24
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff f88f 	bl	8007842 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008728:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008738:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	2200      	movs	r2, #0
 800873e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	69b8      	ldr	r0, [r7, #24]
 800874e:	f001 f9c5 	bl	8009adc <pxPortInitialiseStack>
 8008752:	4602      	mov	r2, r0
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008762:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008764:	bf00      	nop
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008774:	f001 faa2 	bl	8009cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008778:	4b2d      	ldr	r3, [pc, #180]	; (8008830 <prvAddNewTaskToReadyList+0xc4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	4a2c      	ldr	r2, [pc, #176]	; (8008830 <prvAddNewTaskToReadyList+0xc4>)
 8008780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008782:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <prvAddNewTaskToReadyList+0xc8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800878a:	4a2a      	ldr	r2, [pc, #168]	; (8008834 <prvAddNewTaskToReadyList+0xc8>)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008790:	4b27      	ldr	r3, [pc, #156]	; (8008830 <prvAddNewTaskToReadyList+0xc4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d110      	bne.n	80087ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008798:	f000 fcb4 	bl	8009104 <prvInitialiseTaskLists>
 800879c:	e00d      	b.n	80087ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800879e:	4b26      	ldr	r3, [pc, #152]	; (8008838 <prvAddNewTaskToReadyList+0xcc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087a6:	4b23      	ldr	r3, [pc, #140]	; (8008834 <prvAddNewTaskToReadyList+0xc8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d802      	bhi.n	80087ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087b4:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <prvAddNewTaskToReadyList+0xc8>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087ba:	4b20      	ldr	r3, [pc, #128]	; (800883c <prvAddNewTaskToReadyList+0xd0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	4a1e      	ldr	r2, [pc, #120]	; (800883c <prvAddNewTaskToReadyList+0xd0>)
 80087c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087c4:	4b1d      	ldr	r3, [pc, #116]	; (800883c <prvAddNewTaskToReadyList+0xd0>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <prvAddNewTaskToReadyList+0xd4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d903      	bls.n	80087e0 <prvAddNewTaskToReadyList+0x74>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <prvAddNewTaskToReadyList+0xd4>)
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4a15      	ldr	r2, [pc, #84]	; (8008844 <prvAddNewTaskToReadyList+0xd8>)
 80087ee:	441a      	add	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7ff f82f 	bl	800785a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087fc:	f001 fa8e 	bl	8009d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008800:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <prvAddNewTaskToReadyList+0xcc>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00e      	beq.n	8008826 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <prvAddNewTaskToReadyList+0xc8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	429a      	cmp	r2, r3
 8008814:	d207      	bcs.n	8008826 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvAddNewTaskToReadyList+0xdc>)
 8008818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000e3c 	.word	0x20000e3c
 8008834:	20000968 	.word	0x20000968
 8008838:	20000e48 	.word	0x20000e48
 800883c:	20000e58 	.word	0x20000e58
 8008840:	20000e44 	.word	0x20000e44
 8008844:	2000096c 	.word	0x2000096c
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d017      	beq.n	800888e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <vTaskDelay+0x60>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <vTaskDelay+0x30>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60bb      	str	r3, [r7, #8]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800887c:	f000 f880 	bl	8008980 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008880:	2100      	movs	r1, #0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fda4 	bl	80093d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008888:	f000 f888 	bl	800899c <xTaskResumeAll>
 800888c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d107      	bne.n	80088a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008894:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <vTaskDelay+0x64>)
 8008896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088a4:	bf00      	nop
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000e64 	.word	0x20000e64
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088c2:	463a      	mov	r2, r7
 80088c4:	1d39      	adds	r1, r7, #4
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe fd7a 	bl	80073c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	9202      	str	r2, [sp, #8]
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	2300      	movs	r3, #0
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	460a      	mov	r2, r1
 80088e2:	4921      	ldr	r1, [pc, #132]	; (8008968 <vTaskStartScheduler+0xb4>)
 80088e4:	4821      	ldr	r0, [pc, #132]	; (800896c <vTaskStartScheduler+0xb8>)
 80088e6:	f7ff fe19 	bl	800851c <xTaskCreateStatic>
 80088ea:	4603      	mov	r3, r0
 80088ec:	4a20      	ldr	r2, [pc, #128]	; (8008970 <vTaskStartScheduler+0xbc>)
 80088ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088f0:	4b1f      	ldr	r3, [pc, #124]	; (8008970 <vTaskStartScheduler+0xbc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e001      	b.n	8008902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d102      	bne.n	800890e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008908:	f000 fdb6 	bl	8009478 <xTimerCreateTimerTask>
 800890c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d116      	bne.n	8008942 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	613b      	str	r3, [r7, #16]
}
 8008926:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008928:	4b12      	ldr	r3, [pc, #72]	; (8008974 <vTaskStartScheduler+0xc0>)
 800892a:	f04f 32ff 	mov.w	r2, #4294967295
 800892e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008930:	4b11      	ldr	r3, [pc, #68]	; (8008978 <vTaskStartScheduler+0xc4>)
 8008932:	2201      	movs	r2, #1
 8008934:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008936:	4b11      	ldr	r3, [pc, #68]	; (800897c <vTaskStartScheduler+0xc8>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800893c:	f001 f94c 	bl	8009bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008940:	e00e      	b.n	8008960 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d10a      	bne.n	8008960 <vTaskStartScheduler+0xac>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60fb      	str	r3, [r7, #12]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <vTaskStartScheduler+0xaa>
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	0800aac8 	.word	0x0800aac8
 800896c:	080090d5 	.word	0x080090d5
 8008970:	20000e60 	.word	0x20000e60
 8008974:	20000e5c 	.word	0x20000e5c
 8008978:	20000e48 	.word	0x20000e48
 800897c:	20000e40 	.word	0x20000e40

08008980 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <vTaskSuspendAll+0x18>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	4a03      	ldr	r2, [pc, #12]	; (8008998 <vTaskSuspendAll+0x18>)
 800898c:	6013      	str	r3, [r2, #0]
}
 800898e:	bf00      	nop
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000e64 	.word	0x20000e64

0800899c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089aa:	4b42      	ldr	r3, [pc, #264]	; (8008ab4 <xTaskResumeAll+0x118>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	603b      	str	r3, [r7, #0]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089c8:	f001 f978 	bl	8009cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089cc:	4b39      	ldr	r3, [pc, #228]	; (8008ab4 <xTaskResumeAll+0x118>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	4a38      	ldr	r2, [pc, #224]	; (8008ab4 <xTaskResumeAll+0x118>)
 80089d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d6:	4b37      	ldr	r3, [pc, #220]	; (8008ab4 <xTaskResumeAll+0x118>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d162      	bne.n	8008aa4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089de:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <xTaskResumeAll+0x11c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d05e      	beq.n	8008aa4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e6:	e02f      	b.n	8008a48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80089e8:	4b34      	ldr	r3, [pc, #208]	; (8008abc <xTaskResumeAll+0x120>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3318      	adds	r3, #24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe ff8b 	bl	8007910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe ff86 	bl	8007910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	4b2d      	ldr	r3, [pc, #180]	; (8008ac0 <xTaskResumeAll+0x124>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d903      	bls.n	8008a18 <xTaskResumeAll+0x7c>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	4a2a      	ldr	r2, [pc, #168]	; (8008ac0 <xTaskResumeAll+0x124>)
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4a27      	ldr	r2, [pc, #156]	; (8008ac4 <xTaskResumeAll+0x128>)
 8008a26:	441a      	add	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fe ff13 	bl	800785a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4b23      	ldr	r3, [pc, #140]	; (8008ac8 <xTaskResumeAll+0x12c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a42:	4b22      	ldr	r3, [pc, #136]	; (8008acc <xTaskResumeAll+0x130>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a48:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <xTaskResumeAll+0x120>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1cb      	bne.n	80089e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a56:	f000 fbf3 	bl	8009240 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <xTaskResumeAll+0x134>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a66:	f000 f845 	bl	8008af4 <xTaskIncrementTick>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a70:	4b16      	ldr	r3, [pc, #88]	; (8008acc <xTaskResumeAll+0x130>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f1      	bne.n	8008a66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <xTaskResumeAll+0x134>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a88:	4b10      	ldr	r3, [pc, #64]	; (8008acc <xTaskResumeAll+0x130>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a94:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <xTaskResumeAll+0x138>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aa4:	f001 f93a 	bl	8009d1c <vPortExitCritical>

	return xAlreadyYielded;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000e64 	.word	0x20000e64
 8008ab8:	20000e3c 	.word	0x20000e3c
 8008abc:	20000dfc 	.word	0x20000dfc
 8008ac0:	20000e44 	.word	0x20000e44
 8008ac4:	2000096c 	.word	0x2000096c
 8008ac8:	20000968 	.word	0x20000968
 8008acc:	20000e50 	.word	0x20000e50
 8008ad0:	20000e4c 	.word	0x20000e4c
 8008ad4:	e000ed04 	.word	0xe000ed04

08008ad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <xTaskGetTickCount+0x18>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ae4:	687b      	ldr	r3, [r7, #4]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr
 8008af0:	20000e40 	.word	0x20000e40

08008af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afe:	4b51      	ldr	r3, [pc, #324]	; (8008c44 <xTaskIncrementTick+0x150>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 808e 	bne.w	8008c24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b08:	4b4f      	ldr	r3, [pc, #316]	; (8008c48 <xTaskIncrementTick+0x154>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b10:	4a4d      	ldr	r2, [pc, #308]	; (8008c48 <xTaskIncrementTick+0x154>)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d120      	bne.n	8008b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b1c:	4b4b      	ldr	r3, [pc, #300]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	603b      	str	r3, [r7, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <xTaskIncrementTick+0x46>
 8008b3c:	4b43      	ldr	r3, [pc, #268]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	4b43      	ldr	r3, [pc, #268]	; (8008c50 <xTaskIncrementTick+0x15c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a41      	ldr	r2, [pc, #260]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	4a41      	ldr	r2, [pc, #260]	; (8008c50 <xTaskIncrementTick+0x15c>)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	4b40      	ldr	r3, [pc, #256]	; (8008c54 <xTaskIncrementTick+0x160>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a3f      	ldr	r2, [pc, #252]	; (8008c54 <xTaskIncrementTick+0x160>)
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	f000 fb71 	bl	8009240 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b5e:	4b3e      	ldr	r3, [pc, #248]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d34e      	bcc.n	8008c06 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b68:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <xTaskIncrementTick+0x82>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <xTaskIncrementTick+0x84>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	601a      	str	r2, [r3, #0]
					break;
 8008b84:	e03f      	b.n	8008c06 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b86:	4b31      	ldr	r3, [pc, #196]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d203      	bcs.n	8008ba6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b9e:	4a2e      	ldr	r2, [pc, #184]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6013      	str	r3, [r2, #0]
						break;
 8008ba4:	e02f      	b.n	8008c06 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe feb0 	bl	8007910 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d004      	beq.n	8008bc2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fea7 	bl	8007910 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc6:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <xTaskIncrementTick+0x168>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d903      	bls.n	8008bd6 <xTaskIncrementTick+0xe2>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <xTaskIncrementTick+0x168>)
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <xTaskIncrementTick+0x16c>)
 8008be4:	441a      	add	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7fe fe34 	bl	800785a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <xTaskIncrementTick+0x170>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d3b3      	bcc.n	8008b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c04:	e7b0      	b.n	8008b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c06:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <xTaskIncrementTick+0x170>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4914      	ldr	r1, [pc, #80]	; (8008c60 <xTaskIncrementTick+0x16c>)
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d907      	bls.n	8008c2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e004      	b.n	8008c2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <xTaskIncrementTick+0x174>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	4a0f      	ldr	r2, [pc, #60]	; (8008c68 <xTaskIncrementTick+0x174>)
 8008c2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <xTaskIncrementTick+0x178>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008c36:	2301      	movs	r3, #1
 8008c38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c3a:	697b      	ldr	r3, [r7, #20]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000e64 	.word	0x20000e64
 8008c48:	20000e40 	.word	0x20000e40
 8008c4c:	20000df4 	.word	0x20000df4
 8008c50:	20000df8 	.word	0x20000df8
 8008c54:	20000e54 	.word	0x20000e54
 8008c58:	20000e5c 	.word	0x20000e5c
 8008c5c:	20000e44 	.word	0x20000e44
 8008c60:	2000096c 	.word	0x2000096c
 8008c64:	20000968 	.word	0x20000968
 8008c68:	20000e4c 	.word	0x20000e4c
 8008c6c:	20000e50 	.word	0x20000e50

08008c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c76:	4b27      	ldr	r3, [pc, #156]	; (8008d14 <vTaskSwitchContext+0xa4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c7e:	4b26      	ldr	r3, [pc, #152]	; (8008d18 <vTaskSwitchContext+0xa8>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c84:	e041      	b.n	8008d0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008c86:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <vTaskSwitchContext+0xa8>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c8c:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <vTaskSwitchContext+0xac>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e010      	b.n	8008cb6 <vTaskSwitchContext+0x46>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	607b      	str	r3, [r7, #4]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <vTaskSwitchContext+0x3e>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	491a      	ldr	r1, [pc, #104]	; (8008d20 <vTaskSwitchContext+0xb0>)
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0e4      	beq.n	8008c94 <vTaskSwitchContext+0x24>
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4a12      	ldr	r2, [pc, #72]	; (8008d20 <vTaskSwitchContext+0xb0>)
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	605a      	str	r2, [r3, #4]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3308      	adds	r3, #8
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d104      	bne.n	8008cfa <vTaskSwitchContext+0x8a>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <vTaskSwitchContext+0xb4>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	4a05      	ldr	r2, [pc, #20]	; (8008d1c <vTaskSwitchContext+0xac>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6013      	str	r3, [r2, #0]
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr
 8008d14:	20000e64 	.word	0x20000e64
 8008d18:	20000e50 	.word	0x20000e50
 8008d1c:	20000e44 	.word	0x20000e44
 8008d20:	2000096c 	.word	0x2000096c
 8008d24:	20000968 	.word	0x20000968

08008d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	60fb      	str	r3, [r7, #12]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d4e:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <vTaskPlaceOnEventList+0x44>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3318      	adds	r3, #24
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7fe fda2 	bl	80078a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	6838      	ldr	r0, [r7, #0]
 8008d60:	f000 fb36 	bl	80093d0 <prvAddCurrentTaskToDelayedList>
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000968 	.word	0x20000968

08008d70 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008dc0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3318      	adds	r3, #24
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7fe fd45 	bl	800785a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fafc 	bl	80093d0 <prvAddCurrentTaskToDelayedList>
}
 8008dd8:	bf00      	nop
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000e64 	.word	0x20000e64
 8008de4:	20000968 	.word	0x20000968

08008de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	617b      	str	r3, [r7, #20]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3318      	adds	r3, #24
 8008e16:	4619      	mov	r1, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7fe fd1e 	bl	800785a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295
 8008e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	68b8      	ldr	r0, [r7, #8]
 8008e2e:	f000 facf 	bl	80093d0 <prvAddCurrentTaskToDelayedList>
	}
 8008e32:	bf00      	nop
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000968 	.word	0x20000968

08008e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60fb      	str	r3, [r7, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3318      	adds	r3, #24
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fd4d 	bl	8007910 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e76:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <xTaskRemoveFromEventList+0xb0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d11d      	bne.n	8008eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fd44 	bl	8007910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <xTaskRemoveFromEventList+0xb4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d903      	bls.n	8008e9c <xTaskRemoveFromEventList+0x5c>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	4a16      	ldr	r2, [pc, #88]	; (8008ef4 <xTaskRemoveFromEventList+0xb4>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <xTaskRemoveFromEventList+0xb8>)
 8008eaa:	441a      	add	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7fe fcd1 	bl	800785a <vListInsertEnd>
 8008eb8:	e005      	b.n	8008ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	480e      	ldr	r0, [pc, #56]	; (8008efc <xTaskRemoveFromEventList+0xbc>)
 8008ec2:	f7fe fcca 	bl	800785a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <xTaskRemoveFromEventList+0xc0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d905      	bls.n	8008ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <xTaskRemoveFromEventList+0xc4>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e001      	b.n	8008ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008ee4:	697b      	ldr	r3, [r7, #20]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000e64 	.word	0x20000e64
 8008ef4:	20000e44 	.word	0x20000e44
 8008ef8:	2000096c 	.word	0x2000096c
 8008efc:	20000dfc 	.word	0x20000dfc
 8008f00:	20000968 	.word	0x20000968
 8008f04:	20000e50 	.word	0x20000e50

08008f08 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008f12:	4b29      	ldr	r3, [pc, #164]	; (8008fb8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	613b      	str	r3, [r7, #16]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60fb      	str	r3, [r7, #12]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe fcd7 	bl	8007910 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fcd2 	bl	8007910 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d903      	bls.n	8008f80 <vTaskRemoveFromUnorderedEventList+0x78>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4a0c      	ldr	r2, [pc, #48]	; (8008fc0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008f8e:	441a      	add	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	3304      	adds	r3, #4
 8008f94:	4619      	mov	r1, r3
 8008f96:	4610      	mov	r0, r2
 8008f98:	f7fe fc5f 	bl	800785a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d902      	bls.n	8008fb0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008faa:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008fac:	2201      	movs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
	}
}
 8008fb0:	bf00      	nop
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000e64 	.word	0x20000e64
 8008fbc:	20000e44 	.word	0x20000e44
 8008fc0:	2000096c 	.word	0x2000096c
 8008fc4:	20000968 	.word	0x20000968
 8008fc8:	20000e50 	.word	0x20000e50

08008fcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fd4:	4b06      	ldr	r3, [pc, #24]	; (8008ff0 <vTaskInternalSetTimeOutState+0x24>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fdc:	4b05      	ldr	r3, [pc, #20]	; (8008ff4 <vTaskInternalSetTimeOutState+0x28>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	605a      	str	r2, [r3, #4]
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000e54 	.word	0x20000e54
 8008ff4:	20000e40 	.word	0x20000e40

08008ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	613b      	str	r3, [r7, #16]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800903a:	f000 fe3f 	bl	8009cbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800903e:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <xTaskCheckForTimeOut+0xbc>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d102      	bne.n	800905e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e023      	b.n	80090a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <xTaskCheckForTimeOut+0xc0>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d007      	beq.n	800907a <xTaskCheckForTimeOut+0x82>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	429a      	cmp	r2, r3
 8009072:	d302      	bcc.n	800907a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e015      	b.n	80090a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	429a      	cmp	r2, r3
 8009082:	d20b      	bcs.n	800909c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff ff9b 	bl	8008fcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	e004      	b.n	80090a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090a2:	2301      	movs	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090a6:	f000 fe39 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 80090aa:	69fb      	ldr	r3, [r7, #28]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000e40 	.word	0x20000e40
 80090b8:	20000e54 	.word	0x20000e54

080090bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090c0:	4b03      	ldr	r3, [pc, #12]	; (80090d0 <vTaskMissedYield+0x14>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
}
 80090c6:	bf00      	nop
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000e50 	.word	0x20000e50

080090d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090dc:	f000 f852 	bl	8009184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <prvIdleTask+0x28>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d9f9      	bls.n	80090dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <prvIdleTask+0x2c>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090f8:	e7f0      	b.n	80090dc <prvIdleTask+0x8>
 80090fa:	bf00      	nop
 80090fc:	2000096c 	.word	0x2000096c
 8009100:	e000ed04 	.word	0xe000ed04

08009104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800910a:	2300      	movs	r3, #0
 800910c:	607b      	str	r3, [r7, #4]
 800910e:	e00c      	b.n	800912a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4a12      	ldr	r2, [pc, #72]	; (8009164 <prvInitialiseTaskLists+0x60>)
 800911c:	4413      	add	r3, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fb70 	bl	8007804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3301      	adds	r3, #1
 8009128:	607b      	str	r3, [r7, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b37      	cmp	r3, #55	; 0x37
 800912e:	d9ef      	bls.n	8009110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009130:	480d      	ldr	r0, [pc, #52]	; (8009168 <prvInitialiseTaskLists+0x64>)
 8009132:	f7fe fb67 	bl	8007804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009136:	480d      	ldr	r0, [pc, #52]	; (800916c <prvInitialiseTaskLists+0x68>)
 8009138:	f7fe fb64 	bl	8007804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800913c:	480c      	ldr	r0, [pc, #48]	; (8009170 <prvInitialiseTaskLists+0x6c>)
 800913e:	f7fe fb61 	bl	8007804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009142:	480c      	ldr	r0, [pc, #48]	; (8009174 <prvInitialiseTaskLists+0x70>)
 8009144:	f7fe fb5e 	bl	8007804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009148:	480b      	ldr	r0, [pc, #44]	; (8009178 <prvInitialiseTaskLists+0x74>)
 800914a:	f7fe fb5b 	bl	8007804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800914e:	4b0b      	ldr	r3, [pc, #44]	; (800917c <prvInitialiseTaskLists+0x78>)
 8009150:	4a05      	ldr	r2, [pc, #20]	; (8009168 <prvInitialiseTaskLists+0x64>)
 8009152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <prvInitialiseTaskLists+0x7c>)
 8009156:	4a05      	ldr	r2, [pc, #20]	; (800916c <prvInitialiseTaskLists+0x68>)
 8009158:	601a      	str	r2, [r3, #0]
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	2000096c 	.word	0x2000096c
 8009168:	20000dcc 	.word	0x20000dcc
 800916c:	20000de0 	.word	0x20000de0
 8009170:	20000dfc 	.word	0x20000dfc
 8009174:	20000e10 	.word	0x20000e10
 8009178:	20000e28 	.word	0x20000e28
 800917c:	20000df4 	.word	0x20000df4
 8009180:	20000df8 	.word	0x20000df8

08009184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800918a:	e019      	b.n	80091c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800918c:	f000 fd96 	bl	8009cbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009190:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <prvCheckTasksWaitingTermination+0x50>)
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe fbb7 	bl	8007910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091a2:	4b0d      	ldr	r3, [pc, #52]	; (80091d8 <prvCheckTasksWaitingTermination+0x54>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	4a0b      	ldr	r2, [pc, #44]	; (80091d8 <prvCheckTasksWaitingTermination+0x54>)
 80091aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091ac:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <prvCheckTasksWaitingTermination+0x58>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <prvCheckTasksWaitingTermination+0x58>)
 80091b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091b6:	f000 fdb1 	bl	8009d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f810 	bl	80091e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <prvCheckTasksWaitingTermination+0x58>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e1      	bne.n	800918c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000e10 	.word	0x20000e10
 80091d8:	20000e3c 	.word	0x20000e3c
 80091dc:	20000e24 	.word	0x20000e24

080091e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d108      	bne.n	8009204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 ff24 	bl	800a044 <vPortFree>
				vPortFree( pxTCB );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 ff21 	bl	800a044 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009202:	e018      	b.n	8009236 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800920a:	2b01      	cmp	r3, #1
 800920c:	d103      	bne.n	8009216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 ff18 	bl	800a044 <vPortFree>
	}
 8009214:	e00f      	b.n	8009236 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800921c:	2b02      	cmp	r3, #2
 800921e:	d00a      	beq.n	8009236 <prvDeleteTCB+0x56>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <prvDeleteTCB+0x54>
	}
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009246:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <prvResetNextTaskUnblockTime+0x40>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <prvResetNextTaskUnblockTime+0x14>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <prvResetNextTaskUnblockTime+0x16>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <prvResetNextTaskUnblockTime+0x44>)
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009262:	e008      	b.n	8009276 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <prvResetNextTaskUnblockTime+0x40>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	4a04      	ldr	r2, [pc, #16]	; (8009284 <prvResetNextTaskUnblockTime+0x44>)
 8009274:	6013      	str	r3, [r2, #0]
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	20000df4 	.word	0x20000df4
 8009284:	20000e5c 	.word	0x20000e5c

08009288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800928e:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <xTaskGetSchedulerState+0x34>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009296:	2301      	movs	r3, #1
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	e008      	b.n	80092ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <xTaskGetSchedulerState+0x38>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092a4:	2302      	movs	r3, #2
 80092a6:	607b      	str	r3, [r7, #4]
 80092a8:	e001      	b.n	80092ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092aa:	2300      	movs	r3, #0
 80092ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092ae:	687b      	ldr	r3, [r7, #4]
	}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc80      	pop	{r7}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000e48 	.word	0x20000e48
 80092c0:	20000e64 	.word	0x20000e64

080092c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d056      	beq.n	8009388 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092da:	4b2e      	ldr	r3, [pc, #184]	; (8009394 <xTaskPriorityDisinherit+0xd0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d00a      	beq.n	80092fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60fb      	str	r3, [r7, #12]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10a      	bne.n	8009318 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60bb      	str	r3, [r7, #8]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931c:	1e5a      	subs	r2, r3, #1
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800932a:	429a      	cmp	r2, r3
 800932c:	d02c      	beq.n	8009388 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009332:	2b00      	cmp	r3, #0
 8009334:	d128      	bne.n	8009388 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3304      	adds	r3, #4
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fae8 	bl	8007910 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <xTaskPriorityDisinherit+0xd4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d903      	bls.n	8009368 <xTaskPriorityDisinherit+0xa4>
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	4a0c      	ldr	r2, [pc, #48]	; (8009398 <xTaskPriorityDisinherit+0xd4>)
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4a09      	ldr	r2, [pc, #36]	; (800939c <xTaskPriorityDisinherit+0xd8>)
 8009376:	441a      	add	r2, r3
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f7fe fa6b 	bl	800785a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009388:	697b      	ldr	r3, [r7, #20]
	}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000968 	.word	0x20000968
 8009398:	20000e44 	.word	0x20000e44
 800939c:	2000096c 	.word	0x2000096c

080093a0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <uxTaskResetEventItemValue+0x2c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ae:	4b07      	ldr	r3, [pc, #28]	; (80093cc <uxTaskResetEventItemValue+0x2c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <uxTaskResetEventItemValue+0x2c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80093bc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80093be:	687b      	ldr	r3, [r7, #4]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20000968 	.word	0x20000968

080093d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093da:	4b21      	ldr	r3, [pc, #132]	; (8009460 <prvAddCurrentTaskToDelayedList+0x90>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e0:	4b20      	ldr	r3, [pc, #128]	; (8009464 <prvAddCurrentTaskToDelayedList+0x94>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fa92 	bl	8007910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d10a      	bne.n	800940a <prvAddCurrentTaskToDelayedList+0x3a>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093fa:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <prvAddCurrentTaskToDelayedList+0x94>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4819      	ldr	r0, [pc, #100]	; (8009468 <prvAddCurrentTaskToDelayedList+0x98>)
 8009404:	f7fe fa29 	bl	800785a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009408:	e026      	b.n	8009458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009412:	4b14      	ldr	r3, [pc, #80]	; (8009464 <prvAddCurrentTaskToDelayedList+0x94>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	429a      	cmp	r2, r3
 8009420:	d209      	bcs.n	8009436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <prvAddCurrentTaskToDelayedList+0x94>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3304      	adds	r3, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7fe fa36 	bl	80078a0 <vListInsert>
}
 8009434:	e010      	b.n	8009458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <prvAddCurrentTaskToDelayedList+0x94>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe fa2c 	bl	80078a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	429a      	cmp	r2, r3
 8009450:	d202      	bcs.n	8009458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009452:	4a08      	ldr	r2, [pc, #32]	; (8009474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6013      	str	r3, [r2, #0]
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000e40 	.word	0x20000e40
 8009464:	20000968 	.word	0x20000968
 8009468:	20000e28 	.word	0x20000e28
 800946c:	20000df8 	.word	0x20000df8
 8009470:	20000df4 	.word	0x20000df4
 8009474:	20000e5c 	.word	0x20000e5c

08009478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009482:	f000 facb 	bl	8009a1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009486:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <xTimerCreateTimerTask+0x80>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d021      	beq.n	80094d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009496:	1d3a      	adds	r2, r7, #4
 8009498:	f107 0108 	add.w	r1, r7, #8
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fd ffa7 	bl	80073f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	9202      	str	r2, [sp, #8]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	2302      	movs	r3, #2
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2300      	movs	r3, #0
 80094b6:	460a      	mov	r2, r1
 80094b8:	4910      	ldr	r1, [pc, #64]	; (80094fc <xTimerCreateTimerTask+0x84>)
 80094ba:	4811      	ldr	r0, [pc, #68]	; (8009500 <xTimerCreateTimerTask+0x88>)
 80094bc:	f7ff f82e 	bl	800851c <xTaskCreateStatic>
 80094c0:	4603      	mov	r3, r0
 80094c2:	4a10      	ldr	r2, [pc, #64]	; (8009504 <xTimerCreateTimerTask+0x8c>)
 80094c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094c6:	4b0f      	ldr	r3, [pc, #60]	; (8009504 <xTimerCreateTimerTask+0x8c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094ce:	2301      	movs	r3, #1
 80094d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	613b      	str	r3, [r7, #16]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094ee:	697b      	ldr	r3, [r7, #20]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000e98 	.word	0x20000e98
 80094fc:	0800aad0 	.word	0x0800aad0
 8009500:	08009625 	.word	0x08009625
 8009504:	20000e9c 	.word	0x20000e9c

08009508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009516:	2300      	movs	r3, #0
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	623b      	str	r3, [r7, #32]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009536:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <xTimerGenericCommand+0x98>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d02a      	beq.n	8009594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b05      	cmp	r3, #5
 800954e:	dc18      	bgt.n	8009582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009550:	f7ff fe9a 	bl	8009288 <xTaskGetSchedulerState>
 8009554:	4603      	mov	r3, r0
 8009556:	2b02      	cmp	r3, #2
 8009558:	d109      	bne.n	800956e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <xTimerGenericCommand+0x98>)
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f107 0110 	add.w	r1, r7, #16
 8009562:	2300      	movs	r3, #0
 8009564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009566:	f7fe fb3d 	bl	8007be4 <xQueueGenericSend>
 800956a:	6278      	str	r0, [r7, #36]	; 0x24
 800956c:	e012      	b.n	8009594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <xTimerGenericCommand+0x98>)
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f107 0110 	add.w	r1, r7, #16
 8009576:	2300      	movs	r3, #0
 8009578:	2200      	movs	r2, #0
 800957a:	f7fe fb33 	bl	8007be4 <xQueueGenericSend>
 800957e:	6278      	str	r0, [r7, #36]	; 0x24
 8009580:	e008      	b.n	8009594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <xTimerGenericCommand+0x98>)
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f107 0110 	add.w	r1, r7, #16
 800958a:	2300      	movs	r3, #0
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	f7fe fc27 	bl	8007de0 <xQueueGenericSendFromISR>
 8009592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009596:	4618      	mov	r0, r3
 8009598:	3728      	adds	r7, #40	; 0x28
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000e98 	.word	0x20000e98

080095a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095ae:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <prvProcessExpiredTimer+0x7c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe f9a7 	bl	8007910 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d122      	bne.n	8009610 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	18d1      	adds	r1, r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	6978      	ldr	r0, [r7, #20]
 80095d8:	f000 f8c8 	bl	800976c <prvInsertTimerInActiveList>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d016      	beq.n	8009610 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2300      	movs	r3, #0
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	2100      	movs	r1, #0
 80095ec:	6978      	ldr	r0, [r7, #20]
 80095ee:	f7ff ff8b 	bl	8009508 <xTimerGenericCommand>
 80095f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	60fb      	str	r3, [r7, #12]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	6978      	ldr	r0, [r7, #20]
 8009616:	4798      	blx	r3
}
 8009618:	bf00      	nop
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000e90 	.word	0x20000e90

08009624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800962c:	f107 0308 	add.w	r3, r7, #8
 8009630:	4618      	mov	r0, r3
 8009632:	f000 f857 	bl	80096e4 <prvGetNextExpireTime>
 8009636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4619      	mov	r1, r3
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f803 	bl	8009648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009642:	f000 f8d5 	bl	80097f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009646:	e7f1      	b.n	800962c <prvTimerTask+0x8>

08009648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009652:	f7ff f995 	bl	8008980 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009656:	f107 0308 	add.w	r3, r7, #8
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f866 	bl	800972c <prvSampleTimeNow>
 8009660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d130      	bne.n	80096ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <prvProcessTimerOrBlockTask+0x3c>
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	429a      	cmp	r2, r3
 8009674:	d806      	bhi.n	8009684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009676:	f7ff f991 	bl	800899c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800967a:	68f9      	ldr	r1, [r7, #12]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff ff91 	bl	80095a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009682:	e024      	b.n	80096ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d008      	beq.n	800969c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800968a:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <prvProcessTimerOrBlockTask+0x90>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	bf0c      	ite	eq
 8009694:	2301      	moveq	r3, #1
 8009696:	2300      	movne	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <prvProcessTimerOrBlockTask+0x94>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7fe ff03 	bl	80084b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096ae:	f7ff f975 	bl	800899c <xTaskResumeAll>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <prvProcessTimerOrBlockTask+0x98>)
 80096ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	f3bf 8f6f 	isb	sy
}
 80096c8:	e001      	b.n	80096ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096ca:	f7ff f967 	bl	800899c <xTaskResumeAll>
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000e94 	.word	0x20000e94
 80096dc:	20000e98 	.word	0x20000e98
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <prvGetNextExpireTime+0x44>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bf0c      	ite	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	2300      	movne	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d105      	bne.n	8009716 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <prvGetNextExpireTime+0x44>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	e001      	b.n	800971a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800971a:	68fb      	ldr	r3, [r7, #12]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000e90 	.word	0x20000e90

0800972c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009734:	f7ff f9d0 	bl	8008ad8 <xTaskGetTickCount>
 8009738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800973a:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <prvSampleTimeNow+0x3c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	d205      	bcs.n	8009750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009744:	f000 f908 	bl	8009958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	e002      	b.n	8009756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009756:	4a04      	ldr	r2, [pc, #16]	; (8009768 <prvSampleTimeNow+0x3c>)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800975c:	68fb      	ldr	r3, [r7, #12]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000ea0 	.word	0x20000ea0

0800976c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d812      	bhi.n	80097b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	1ad2      	subs	r2, r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	429a      	cmp	r2, r3
 800979e:	d302      	bcc.n	80097a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097a0:	2301      	movs	r3, #1
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	e01b      	b.n	80097de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <prvInsertTimerInActiveList+0x7c>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fe f875 	bl	80078a0 <vListInsert>
 80097b6:	e012      	b.n	80097de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d206      	bcs.n	80097ce <prvInsertTimerInActiveList+0x62>
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d302      	bcc.n	80097ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e007      	b.n	80097de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <prvInsertTimerInActiveList+0x80>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7fe f861 	bl	80078a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097de:	697b      	ldr	r3, [r7, #20]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000e94 	.word	0x20000e94
 80097ec:	20000e90 	.word	0x20000e90

080097f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08e      	sub	sp, #56	; 0x38
 80097f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097f6:	e09d      	b.n	8009934 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da18      	bge.n	8009830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097fe:	1d3b      	adds	r3, r7, #4
 8009800:	3304      	adds	r3, #4
 8009802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	61fb      	str	r3, [r7, #28]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009826:	6850      	ldr	r0, [r2, #4]
 8009828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800982a:	6892      	ldr	r2, [r2, #8]
 800982c:	4611      	mov	r1, r2
 800982e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	db7d      	blt.n	8009932 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe f862 	bl	8007910 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800984c:	463b      	mov	r3, r7
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff ff6c 	bl	800972c <prvSampleTimeNow>
 8009854:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b09      	cmp	r3, #9
 800985a:	d86b      	bhi.n	8009934 <prvProcessReceivedCommands+0x144>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <prvProcessReceivedCommands+0x74>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	0800988d 	.word	0x0800988d
 8009868:	0800988d 	.word	0x0800988d
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009935 	.word	0x08009935
 8009874:	080098e9 	.word	0x080098e9
 8009878:	08009921 	.word	0x08009921
 800987c:	0800988d 	.word	0x0800988d
 8009880:	0800988d 	.word	0x0800988d
 8009884:	08009935 	.word	0x08009935
 8009888:	080098e9 	.word	0x080098e9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	18d1      	adds	r1, r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989a:	f7ff ff67 	bl	800976c <prvInsertTimerInActiveList>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d047      	beq.n	8009934 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d13f      	bne.n	8009934 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	441a      	add	r2, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098c6:	f7ff fe1f 	bl	8009508 <xTimerGenericCommand>
 80098ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d130      	bne.n	8009934 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	61bb      	str	r3, [r7, #24]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	617b      	str	r3, [r7, #20]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	699a      	ldr	r2, [r3, #24]
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	18d1      	adds	r1, r2, r3
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991a:	f7ff ff27 	bl	800976c <prvInsertTimerInActiveList>
					break;
 800991e:	e009      	b.n	8009934 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f000 fb8a 	bl	800a044 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009930:	e000      	b.n	8009934 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009932:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009934:	4b07      	ldr	r3, [pc, #28]	; (8009954 <prvProcessReceivedCommands+0x164>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	1d39      	adds	r1, r7, #4
 800993a:	2200      	movs	r2, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fae7 	bl	8007f10 <xQueueReceive>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f af57 	bne.w	80097f8 <prvProcessReceivedCommands+0x8>
	}
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	3730      	adds	r7, #48	; 0x30
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000e98 	.word	0x20000e98

08009958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800995e:	e045      	b.n	80099ec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009960:	4b2c      	ldr	r3, [pc, #176]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800996a:	4b2a      	ldr	r3, [pc, #168]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3304      	adds	r3, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd ffc9 	bl	8007910 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d12e      	bne.n	80099ec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	429a      	cmp	r2, r3
 800999e:	d90e      	bls.n	80099be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ac:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fd ff72 	bl	80078a0 <vListInsert>
 80099bc:	e016      	b.n	80099ec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099be:	2300      	movs	r3, #0
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	2100      	movs	r1, #0
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff fd9d 	bl	8009508 <xTimerGenericCommand>
 80099ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <prvSwitchTimerLists+0x94>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	603b      	str	r3, [r7, #0]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1b4      	bne.n	8009960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <prvSwitchTimerLists+0xc0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a04      	ldr	r2, [pc, #16]	; (8009a14 <prvSwitchTimerLists+0xbc>)
 8009a02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a04:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <prvSwitchTimerLists+0xc0>)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6013      	str	r3, [r2, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000e90 	.word	0x20000e90
 8009a18:	20000e94 	.word	0x20000e94

08009a1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a22:	f000 f94b 	bl	8009cbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a26:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d120      	bne.n	8009a70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a2e:	4814      	ldr	r0, [pc, #80]	; (8009a80 <prvCheckForValidListAndQueue+0x64>)
 8009a30:	f7fd fee8 	bl	8007804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a34:	4813      	ldr	r0, [pc, #76]	; (8009a84 <prvCheckForValidListAndQueue+0x68>)
 8009a36:	f7fd fee5 	bl	8007804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <prvCheckForValidListAndQueue+0x6c>)
 8009a3c:	4a10      	ldr	r2, [pc, #64]	; (8009a80 <prvCheckForValidListAndQueue+0x64>)
 8009a3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a40:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <prvCheckForValidListAndQueue+0x70>)
 8009a42:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <prvCheckForValidListAndQueue+0x68>)
 8009a44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a46:	2300      	movs	r3, #0
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <prvCheckForValidListAndQueue+0x74>)
 8009a4c:	4a11      	ldr	r2, [pc, #68]	; (8009a94 <prvCheckForValidListAndQueue+0x78>)
 8009a4e:	2110      	movs	r1, #16
 8009a50:	200a      	movs	r0, #10
 8009a52:	f7fd ffef 	bl	8007a34 <xQueueGenericCreateStatic>
 8009a56:	4603      	mov	r3, r0
 8009a58:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a5c:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <prvCheckForValidListAndQueue+0x60>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	490b      	ldr	r1, [pc, #44]	; (8009a98 <prvCheckForValidListAndQueue+0x7c>)
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fcfa 	bl	8008464 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a70:	f000 f954 	bl	8009d1c <vPortExitCritical>
}
 8009a74:	bf00      	nop
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000e98 	.word	0x20000e98
 8009a80:	20000e68 	.word	0x20000e68
 8009a84:	20000e7c 	.word	0x20000e7c
 8009a88:	20000e90 	.word	0x20000e90
 8009a8c:	20000e94 	.word	0x20000e94
 8009a90:	20000f44 	.word	0x20000f44
 8009a94:	20000ea4 	.word	0x20000ea4
 8009a98:	0800aad8 	.word	0x0800aad8

08009a9c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	; 0x28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009aaa:	f06f 0301 	mvn.w	r3, #1
 8009aae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <xTimerPendFunctionCallFromISR+0x3c>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	f107 0114 	add.w	r1, r7, #20
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	f7fe f98a 	bl	8007de0 <xQueueGenericSendFromISR>
 8009acc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3728      	adds	r7, #40	; 0x28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000e98 	.word	0x20000e98

08009adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3b04      	subs	r3, #4
 8009afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3b04      	subs	r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b0c:	4a08      	ldr	r2, [pc, #32]	; (8009b30 <pxPortInitialiseStack+0x54>)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3b14      	subs	r3, #20
 8009b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3b20      	subs	r3, #32
 8009b22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr
 8009b30:	08009b35 	.word	0x08009b35

08009b34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b3e:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <prvTaskExitError+0x54>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b46:	d00a      	beq.n	8009b5e <prvTaskExitError+0x2a>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60fb      	str	r3, [r7, #12]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <prvTaskExitError+0x28>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60bb      	str	r3, [r7, #8]
}
 8009b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b72:	bf00      	nop
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0fc      	beq.n	8009b74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000108 	.word	0x20000108
 8009b8c:	00000000 	.word	0x00000000

08009b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b90:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <pxCurrentTCBConst2>)
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b9a:	f380 8809 	msr	PSP, r0
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f380 8811 	msr	BASEPRI, r0
 8009baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8009bae:	4770      	bx	lr

08009bb0 <pxCurrentTCBConst2>:
 8009bb0:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop

08009bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009bb8:	4806      	ldr	r0, [pc, #24]	; (8009bd4 <prvPortStartFirstTask+0x1c>)
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	f380 8808 	msr	MSP, r0
 8009bc2:	b662      	cpsie	i
 8009bc4:	b661      	cpsie	f
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	df00      	svc	0
 8009bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bd2:	bf00      	nop
 8009bd4:	e000ed08 	.word	0xe000ed08

08009bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bde:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <xPortStartScheduler+0xd0>)
 8009be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	22ff      	movs	r2, #255	; 0xff
 8009bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	4b2a      	ldr	r3, [pc, #168]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c06:	4b2a      	ldr	r3, [pc, #168]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c08:	2207      	movs	r2, #7
 8009c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c0c:	e009      	b.n	8009c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c0e:	4b28      	ldr	r3, [pc, #160]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4a26      	ldr	r2, [pc, #152]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d0ef      	beq.n	8009c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f1c3 0307 	rsb	r3, r3, #7
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d00a      	beq.n	8009c50 <xPortStartScheduler+0x78>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60bb      	str	r3, [r7, #8]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c5a:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c62:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c6e:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <xPortStartScheduler+0xdc>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a10      	ldr	r2, [pc, #64]	; (8009cb4 <xPortStartScheduler+0xdc>)
 8009c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c7a:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <xPortStartScheduler+0xdc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a0d      	ldr	r2, [pc, #52]	; (8009cb4 <xPortStartScheduler+0xdc>)
 8009c80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c86:	f000 f8b9 	bl	8009dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <xPortStartScheduler+0xe0>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c90:	f7ff ff92 	bl	8009bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c94:	f7fe ffec 	bl	8008c70 <vTaskSwitchContext>
	prvTaskExitError();
 8009c98:	f7ff ff4c 	bl	8009b34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	e000e400 	.word	0xe000e400
 8009cac:	20000f94 	.word	0x20000f94
 8009cb0:	20000f98 	.word	0x20000f98
 8009cb4:	e000ed20 	.word	0xe000ed20
 8009cb8:	20000108 	.word	0x20000108

08009cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
}
 8009cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <vPortEnterCritical+0x58>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	4a0d      	ldr	r2, [pc, #52]	; (8009d14 <vPortEnterCritical+0x58>)
 8009cde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <vPortEnterCritical+0x58>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d10f      	bne.n	8009d08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ce8:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <vPortEnterCritical+0x5c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	603b      	str	r3, [r7, #0]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <vPortEnterCritical+0x4a>
	}
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000108 	.word	0x20000108
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d22:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <vPortExitCritical+0x4c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <vPortExitCritical+0x24>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	607b      	str	r3, [r7, #4]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <vPortExitCritical+0x4c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	4a08      	ldr	r2, [pc, #32]	; (8009d68 <vPortExitCritical+0x4c>)
 8009d48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <vPortExitCritical+0x4c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <vPortExitCritical+0x42>
 8009d52:	2300      	movs	r3, #0
 8009d54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	f383 8811 	msr	BASEPRI, r3
}
 8009d5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr
 8009d68:	20000108 	.word	0x20000108
 8009d6c:	00000000 	.word	0x00000000

08009d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d70:	f3ef 8009 	mrs	r0, PSP
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <pxCurrentTCBConst>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d80:	6010      	str	r0, [r2, #0]
 8009d82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009d86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d8a:	f380 8811 	msr	BASEPRI, r0
 8009d8e:	f7fe ff6f 	bl	8008c70 <vTaskSwitchContext>
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8811 	msr	BASEPRI, r0
 8009d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009da6:	f380 8809 	msr	PSP, r0
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	4770      	bx	lr

08009db0 <pxCurrentTCBConst>:
 8009db0:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	607b      	str	r3, [r7, #4]
}
 8009dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dd2:	f7fe fe8f 	bl	8008af4 <xTaskIncrementTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <xPortSysTickHandler+0x40>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f383 8811 	msr	BASEPRI, r3
}
 8009dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <vPortSetupTimerInterrupt+0x30>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e06:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <vPortSetupTimerInterrupt+0x34>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <vPortSetupTimerInterrupt+0x38>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <vPortSetupTimerInterrupt+0x3c>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	099b      	lsrs	r3, r3, #6
 8009e18:	4a08      	ldr	r2, [pc, #32]	; (8009e3c <vPortSetupTimerInterrupt+0x40>)
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <vPortSetupTimerInterrupt+0x30>)
 8009e20:	2207      	movs	r2, #7
 8009e22:	601a      	str	r2, [r3, #0]
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr
 8009e2c:	e000e010 	.word	0xe000e010
 8009e30:	e000e018 	.word	0xe000e018
 8009e34:	20000000 	.word	0x20000000
 8009e38:	10624dd3 	.word	0x10624dd3
 8009e3c:	e000e014 	.word	0xe000e014

08009e40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e46:	f3ef 8305 	mrs	r3, IPSR
 8009e4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b0f      	cmp	r3, #15
 8009e50:	d914      	bls.n	8009e7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e52:	4a16      	ldr	r2, [pc, #88]	; (8009eac <vPortValidateInterruptPriority+0x6c>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e5c:	4b14      	ldr	r3, [pc, #80]	; (8009eb0 <vPortValidateInterruptPriority+0x70>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	7afa      	ldrb	r2, [r7, #11]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d20a      	bcs.n	8009e7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	607b      	str	r3, [r7, #4]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <vPortValidateInterruptPriority+0x74>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <vPortValidateInterruptPriority+0x78>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d90a      	bls.n	8009ea2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	603b      	str	r3, [r7, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <vPortValidateInterruptPriority+0x60>
	}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr
 8009eac:	e000e3f0 	.word	0xe000e3f0
 8009eb0:	20000f94 	.word	0x20000f94
 8009eb4:	e000ed0c 	.word	0xe000ed0c
 8009eb8:	20000f98 	.word	0x20000f98

08009ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	; 0x28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ec8:	f7fe fd5a 	bl	8008980 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ecc:	4b58      	ldr	r3, [pc, #352]	; (800a030 <pvPortMalloc+0x174>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ed4:	f000 f910 	bl	800a0f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ed8:	4b56      	ldr	r3, [pc, #344]	; (800a034 <pvPortMalloc+0x178>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f040 808e 	bne.w	800a002 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d01d      	beq.n	8009f28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009eec:	2208      	movs	r2, #8
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d014      	beq.n	8009f28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	3308      	adds	r3, #8
 8009f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f003 0307 	and.w	r3, r3, #7
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <pvPortMalloc+0x6c>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	617b      	str	r3, [r7, #20]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d069      	beq.n	800a002 <pvPortMalloc+0x146>
 8009f2e:	4b42      	ldr	r3, [pc, #264]	; (800a038 <pvPortMalloc+0x17c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d864      	bhi.n	800a002 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f38:	4b40      	ldr	r3, [pc, #256]	; (800a03c <pvPortMalloc+0x180>)
 8009f3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <pvPortMalloc+0x180>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f42:	e004      	b.n	8009f4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d903      	bls.n	8009f60 <pvPortMalloc+0xa4>
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f1      	bne.n	8009f44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f60:	4b33      	ldr	r3, [pc, #204]	; (800a030 <pvPortMalloc+0x174>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d04b      	beq.n	800a002 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2208      	movs	r2, #8
 8009f70:	4413      	add	r3, r2
 8009f72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	1ad2      	subs	r2, r2, r3
 8009f84:	2308      	movs	r3, #8
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d91f      	bls.n	8009fcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4413      	add	r3, r2
 8009f92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <pvPortMalloc+0xf8>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	613b      	str	r3, [r7, #16]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	1ad2      	subs	r2, r2, r3
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fc6:	69b8      	ldr	r0, [r7, #24]
 8009fc8:	f000 f8f8 	bl	800a1bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fcc:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <pvPortMalloc+0x17c>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	4a18      	ldr	r2, [pc, #96]	; (800a038 <pvPortMalloc+0x17c>)
 8009fd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fda:	4b17      	ldr	r3, [pc, #92]	; (800a038 <pvPortMalloc+0x17c>)
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b18      	ldr	r3, [pc, #96]	; (800a040 <pvPortMalloc+0x184>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d203      	bcs.n	8009fee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <pvPortMalloc+0x17c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a15      	ldr	r2, [pc, #84]	; (800a040 <pvPortMalloc+0x184>)
 8009fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	4b10      	ldr	r3, [pc, #64]	; (800a034 <pvPortMalloc+0x178>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a002:	f7fe fccb 	bl	800899c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00a      	beq.n	800a026 <pvPortMalloc+0x16a>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	60fb      	str	r3, [r7, #12]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <pvPortMalloc+0x168>
	return pvReturn;
 800a026:	69fb      	ldr	r3, [r7, #28]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3728      	adds	r7, #40	; 0x28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20001ba4 	.word	0x20001ba4
 800a034:	20001bb0 	.word	0x20001bb0
 800a038:	20001ba8 	.word	0x20001ba8
 800a03c:	20001b9c 	.word	0x20001b9c
 800a040:	20001bac 	.word	0x20001bac

0800a044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d048      	beq.n	800a0e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a056:	2308      	movs	r3, #8
 800a058:	425b      	negs	r3, r3
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	4413      	add	r3, r2
 800a05e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <vPortFree+0xac>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <vPortFree+0x44>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60fb      	str	r3, [r7, #12]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <vPortFree+0x62>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60bb      	str	r3, [r7, #8]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <vPortFree+0xac>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d019      	beq.n	800a0e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d115      	bne.n	800a0e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <vPortFree+0xac>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	43db      	mvns	r3, r3
 800a0c6:	401a      	ands	r2, r3
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0cc:	f7fe fc58 	bl	8008980 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <vPortFree+0xb0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4413      	add	r3, r2
 800a0da:	4a06      	ldr	r2, [pc, #24]	; (800a0f4 <vPortFree+0xb0>)
 800a0dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f000 f86c 	bl	800a1bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a0e4:	f7fe fc5a 	bl	800899c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0e8:	bf00      	nop
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	20001bb0 	.word	0x20001bb0
 800a0f4:	20001ba8 	.word	0x20001ba8

0800a0f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a102:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a104:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <prvHeapInit+0xac>)
 800a106:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00c      	beq.n	800a12c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3307      	adds	r3, #7
 800a116:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	4a1f      	ldr	r2, [pc, #124]	; (800a1a4 <prvHeapInit+0xac>)
 800a128:	4413      	add	r3, r2
 800a12a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a130:	4a1d      	ldr	r2, [pc, #116]	; (800a1a8 <prvHeapInit+0xb0>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a136:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <prvHeapInit+0xb0>)
 800a138:	2200      	movs	r2, #0
 800a13a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	4413      	add	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a144:	2208      	movs	r2, #8
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1a9b      	subs	r3, r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 0307 	bic.w	r3, r3, #7
 800a152:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4a15      	ldr	r2, [pc, #84]	; (800a1ac <prvHeapInit+0xb4>)
 800a158:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <prvHeapInit+0xb4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2200      	movs	r2, #0
 800a160:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <prvHeapInit+0xb4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	1ad2      	subs	r2, r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <prvHeapInit+0xb4>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <prvHeapInit+0xb8>)
 800a186:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	4a09      	ldr	r2, [pc, #36]	; (800a1b4 <prvHeapInit+0xbc>)
 800a18e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a190:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <prvHeapInit+0xc0>)
 800a192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a196:	601a      	str	r2, [r3, #0]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000f9c 	.word	0x20000f9c
 800a1a8:	20001b9c 	.word	0x20001b9c
 800a1ac:	20001ba4 	.word	0x20001ba4
 800a1b0:	20001bac 	.word	0x20001bac
 800a1b4:	20001ba8 	.word	0x20001ba8
 800a1b8:	20001bb0 	.word	0x20001bb0

0800a1bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1c4:	4b27      	ldr	r3, [pc, #156]	; (800a264 <prvInsertBlockIntoFreeList+0xa8>)
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	e002      	b.n	800a1d0 <prvInsertBlockIntoFreeList+0x14>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d8f7      	bhi.n	800a1ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d108      	bne.n	800a1fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	441a      	add	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d118      	bne.n	800a244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <prvInsertBlockIntoFreeList+0xac>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d00d      	beq.n	800a23a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	441a      	add	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e008      	b.n	800a24c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a23a:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <prvInsertBlockIntoFreeList+0xac>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	e003      	b.n	800a24c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d002      	beq.n	800a25a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a25a:	bf00      	nop
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	bc80      	pop	{r7}
 800a262:	4770      	bx	lr
 800a264:	20001b9c 	.word	0x20001b9c
 800a268:	20001ba4 	.word	0x20001ba4

0800a26c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a270:	2200      	movs	r2, #0
 800a272:	490e      	ldr	r1, [pc, #56]	; (800a2ac <MX_USB_DEVICE_Init+0x40>)
 800a274:	480e      	ldr	r0, [pc, #56]	; (800a2b0 <MX_USB_DEVICE_Init+0x44>)
 800a276:	f7fb fc2d 	bl	8005ad4 <USBD_Init>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a280:	f7f6 f92a 	bl	80004d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a284:	490b      	ldr	r1, [pc, #44]	; (800a2b4 <MX_USB_DEVICE_Init+0x48>)
 800a286:	480a      	ldr	r0, [pc, #40]	; (800a2b0 <MX_USB_DEVICE_Init+0x44>)
 800a288:	f7fb fc4f 	bl	8005b2a <USBD_RegisterClass>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a292:	f7f6 f921 	bl	80004d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a296:	4806      	ldr	r0, [pc, #24]	; (800a2b0 <MX_USB_DEVICE_Init+0x44>)
 800a298:	f7fb fc60 	bl	8005b5c <USBD_Start>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a2a2:	f7f6 f919 	bl	80004d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	2000010c 	.word	0x2000010c
 800a2b0:	20001c24 	.word	0x20001c24
 800a2b4:	2000000c 	.word	0x2000000c

0800a2b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2212      	movs	r2, #18
 800a2c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2ca:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20000128 	.word	0x20000128

0800a2dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	6039      	str	r1, [r7, #0]
 800a2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	2204      	movs	r2, #4
 800a2ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2ee:	4b03      	ldr	r3, [pc, #12]	; (800a2fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	2000013c 	.word	0x2000013c

0800a300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	6039      	str	r1, [r7, #0]
 800a30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d105      	bne.n	800a31e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4907      	ldr	r1, [pc, #28]	; (800a334 <USBD_FS_ProductStrDescriptor+0x34>)
 800a316:	4808      	ldr	r0, [pc, #32]	; (800a338 <USBD_FS_ProductStrDescriptor+0x38>)
 800a318:	f7fc fb98 	bl	8006a4c <USBD_GetString>
 800a31c:	e004      	b.n	800a328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4904      	ldr	r1, [pc, #16]	; (800a334 <USBD_FS_ProductStrDescriptor+0x34>)
 800a322:	4805      	ldr	r0, [pc, #20]	; (800a338 <USBD_FS_ProductStrDescriptor+0x38>)
 800a324:	f7fc fb92 	bl	8006a4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20001ee8 	.word	0x20001ee8
 800a338:	0800aae0 	.word	0x0800aae0

0800a33c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	6039      	str	r1, [r7, #0]
 800a346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	4904      	ldr	r1, [pc, #16]	; (800a35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a34c:	4804      	ldr	r0, [pc, #16]	; (800a360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a34e:	f7fc fb7d 	bl	8006a4c <USBD_GetString>
  return USBD_StrDesc;
 800a352:	4b02      	ldr	r3, [pc, #8]	; (800a35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20001ee8 	.word	0x20001ee8
 800a360:	0800aaec 	.word	0x0800aaec

0800a364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	6039      	str	r1, [r7, #0]
 800a36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	221a      	movs	r2, #26
 800a374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a376:	f000 f843 	bl	800a400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a37a:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20000140 	.word	0x20000140

0800a388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	6039      	str	r1, [r7, #0]
 800a392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d105      	bne.n	800a3a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4907      	ldr	r1, [pc, #28]	; (800a3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a39e:	4808      	ldr	r0, [pc, #32]	; (800a3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a0:	f7fc fb54 	bl	8006a4c <USBD_GetString>
 800a3a4:	e004      	b.n	800a3b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4904      	ldr	r1, [pc, #16]	; (800a3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3aa:	4805      	ldr	r0, [pc, #20]	; (800a3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3ac:	f7fc fb4e 	bl	8006a4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b0:	4b02      	ldr	r3, [pc, #8]	; (800a3bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20001ee8 	.word	0x20001ee8
 800a3c0:	0800aafc 	.word	0x0800aafc

0800a3c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	6039      	str	r1, [r7, #0]
 800a3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d105      	bne.n	800a3e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4907      	ldr	r1, [pc, #28]	; (800a3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3da:	4808      	ldr	r0, [pc, #32]	; (800a3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3dc:	f7fc fb36 	bl	8006a4c <USBD_GetString>
 800a3e0:	e004      	b.n	800a3ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	4904      	ldr	r1, [pc, #16]	; (800a3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3e6:	4805      	ldr	r0, [pc, #20]	; (800a3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3e8:	f7fc fb30 	bl	8006a4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3ec:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20001ee8 	.word	0x20001ee8
 800a3fc:	0800ab08 	.word	0x0800ab08

0800a400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a406:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <Get_SerialNum+0x44>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <Get_SerialNum+0x48>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a412:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <Get_SerialNum+0x4c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4413      	add	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d009      	beq.n	800a43a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a426:	2208      	movs	r2, #8
 800a428:	4909      	ldr	r1, [pc, #36]	; (800a450 <Get_SerialNum+0x50>)
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 f814 	bl	800a458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a430:	2204      	movs	r2, #4
 800a432:	4908      	ldr	r1, [pc, #32]	; (800a454 <Get_SerialNum+0x54>)
 800a434:	68b8      	ldr	r0, [r7, #8]
 800a436:	f000 f80f 	bl	800a458 <IntToUnicode>
  }
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	1ffff7e8 	.word	0x1ffff7e8
 800a448:	1ffff7ec 	.word	0x1ffff7ec
 800a44c:	1ffff7f0 	.word	0x1ffff7f0
 800a450:	20000142 	.word	0x20000142
 800a454:	20000152 	.word	0x20000152

0800a458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	4613      	mov	r3, r2
 800a464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a46a:	2300      	movs	r3, #0
 800a46c:	75fb      	strb	r3, [r7, #23]
 800a46e:	e027      	b.n	800a4c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	0f1b      	lsrs	r3, r3, #28
 800a474:	2b09      	cmp	r3, #9
 800a476:	d80b      	bhi.n	800a490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	0f1b      	lsrs	r3, r3, #28
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	4619      	mov	r1, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	440b      	add	r3, r1
 800a488:	3230      	adds	r2, #48	; 0x30
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e00a      	b.n	800a4a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	0f1b      	lsrs	r3, r3, #28
 800a494:	b2da      	uxtb	r2, r3
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	4619      	mov	r1, r3
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	440b      	add	r3, r1
 800a4a0:	3237      	adds	r2, #55	; 0x37
 800a4a2:	b2d2      	uxtb	r2, r2
 800a4a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	75fb      	strb	r3, [r7, #23]
 800a4c0:	7dfa      	ldrb	r2, [r7, #23]
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d3d3      	bcc.n	800a470 <IntToUnicode+0x18>
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bc80      	pop	{r7}
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a0d      	ldr	r2, [pc, #52]	; (800a518 <HAL_PCD_MspInit+0x44>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d113      	bne.n	800a50e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4e6:	4b0d      	ldr	r3, [pc, #52]	; (800a51c <HAL_PCD_MspInit+0x48>)
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	4a0c      	ldr	r2, [pc, #48]	; (800a51c <HAL_PCD_MspInit+0x48>)
 800a4ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4f0:	61d3      	str	r3, [r2, #28]
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <HAL_PCD_MspInit+0x48>)
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a4fe:	2200      	movs	r2, #0
 800a500:	2105      	movs	r1, #5
 800a502:	2014      	movs	r0, #20
 800a504:	f7f6 fe75 	bl	80011f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a508:	2014      	movs	r0, #20
 800a50a:	f7f6 fe8e 	bl	800122a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	40005c00 	.word	0x40005c00
 800a51c:	40021000 	.word	0x40021000

0800a520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7fb fb58 	bl	8005bec <USBD_LL_SetupStage>
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a556:	78fa      	ldrb	r2, [r7, #3]
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	440b      	add	r3, r1
 800a564:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	4619      	mov	r1, r3
 800a56e:	f7fb fb8a 	bl	8005c86 <USBD_LL_DataOutStage>
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	460b      	mov	r3, r1
 800a584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	440b      	add	r3, r1
 800a59a:	333c      	adds	r3, #60	; 0x3c
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f7fb fbe1 	bl	8005d68 <USBD_LL_DataInStage>
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fb fcf1 	bl	8005fa4 <USBD_LL_SOF>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d001      	beq.n	800a5e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a5de:	f7f5 ff7b 	bl	80004d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5e8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fb fca1 	bl	8005f34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fb fc5a 	bl	8005eb2 <USBD_LL_Reset>
}
 800a5fe:	bf00      	nop
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a616:	4618      	mov	r0, r3
 800a618:	f7fb fc9b 	bl	8005f52 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <HAL_PCD_SuspendCallback+0x30>)
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	4a03      	ldr	r2, [pc, #12]	; (800a638 <HAL_PCD_SuspendCallback+0x30>)
 800a62a:	f043 0306 	orr.w	r3, r3, #6
 800a62e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fb fc95 	bl	8005f7a <USBD_LL_Resume>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a660:	4a1f      	ldr	r2, [pc, #124]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a1d      	ldr	r2, [pc, #116]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a66c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a670:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a672:	4a1c      	ldr	r2, [pc, #112]	; (800a6e4 <USBD_LL_Init+0x8c>)
 800a674:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a676:	4b1a      	ldr	r3, [pc, #104]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a678:	2208      	movs	r2, #8
 800a67a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a67c:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a67e:	2202      	movs	r2, #2
 800a680:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a682:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a684:	2200      	movs	r2, #0
 800a686:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a688:	4b15      	ldr	r3, [pc, #84]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a68e:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a690:	2200      	movs	r2, #0
 800a692:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a694:	4812      	ldr	r0, [pc, #72]	; (800a6e0 <USBD_LL_Init+0x88>)
 800a696:	f7f6 ff96 	bl	80015c6 <HAL_PCD_Init>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a6a0:	f7f5 ff1a 	bl	80004d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6aa:	2318      	movs	r3, #24
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	f7f8 fac1 	bl	8002c36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6ba:	2358      	movs	r3, #88	; 0x58
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2180      	movs	r1, #128	; 0x80
 800a6c0:	f7f8 fab9 	bl	8002c36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2181      	movs	r1, #129	; 0x81
 800a6d2:	f7f8 fab0 	bl	8002c36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	200020e8 	.word	0x200020e8
 800a6e4:	40005c00 	.word	0x40005c00

0800a6e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7f7 f86c 	bl	80017dc <HAL_PCD_Start>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f93c 	bl	800a988 <USBD_Get_USB_Status>
 800a710:	4603      	mov	r3, r0
 800a712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a714:	7bbb      	ldrb	r3, [r7, #14]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	460b      	mov	r3, r1
 800a732:	70bb      	strb	r3, [r7, #2]
 800a734:	4613      	mov	r3, r2
 800a736:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a746:	78bb      	ldrb	r3, [r7, #2]
 800a748:	883a      	ldrh	r2, [r7, #0]
 800a74a:	78f9      	ldrb	r1, [r7, #3]
 800a74c:	f7f7 f9e6 	bl	8001b1c <HAL_PCD_EP_Open>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f916 	bl	800a988 <USBD_Get_USB_Status>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a784:	78fa      	ldrb	r2, [r7, #3]
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f7 fa2d 	bl	8001be8 <HAL_PCD_EP_Close>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f8f7 	bl	800a988 <USBD_Get_USB_Status>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7c2:	78fa      	ldrb	r2, [r7, #3]
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7f7 fad6 	bl	8001d78 <HAL_PCD_EP_SetStall>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f8d8 	bl	800a988 <USBD_Get_USB_Status>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b084      	sub	sp, #16
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7f7 fb17 	bl	8001e38 <HAL_PCD_EP_ClrStall>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f8b9 	bl	800a988 <USBD_Get_USB_Status>
 800a816:	4603      	mov	r3, r0
 800a818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a836:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	da0c      	bge.n	800a85a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	3302      	adds	r3, #2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	e00b      	b.n	800a872 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	440b      	add	r3, r1
 800a86c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a870:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	bc80      	pop	{r7}
 800a87a:	4770      	bx	lr

0800a87c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	4611      	mov	r1, r2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7f7 f919 	bl	8001ad2 <HAL_PCD_SetAddress>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f86e 	bl	800a988 <USBD_Get_USB_Status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	72fb      	strb	r3, [r7, #11]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	7af9      	ldrb	r1, [r7, #11]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f7f7 fa06 	bl	8001cf2 <HAL_PCD_EP_Transmit>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f84b 	bl	800a988 <USBD_Get_USB_Status>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	461a      	mov	r2, r3
 800a90c:	460b      	mov	r3, r1
 800a90e:	72fb      	strb	r3, [r7, #11]
 800a910:	4613      	mov	r3, r2
 800a912:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a922:	893b      	ldrh	r3, [r7, #8]
 800a924:	7af9      	ldrb	r1, [r7, #11]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	f7f7 f9a6 	bl	8001c78 <HAL_PCD_EP_Receive>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f828 	bl	800a988 <USBD_Get_USB_Status>
 800a938:	4603      	mov	r3, r0
 800a93a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a93c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a950:	4b02      	ldr	r3, [pc, #8]	; (800a95c <USBD_static_malloc+0x14>)
}
 800a952:	4618      	mov	r0, r3
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	bc80      	pop	{r7}
 800a95a:	4770      	bx	lr
 800a95c:	20001bb4 	.word	0x20001bb4

0800a960 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]

}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bc80      	pop	{r7}
 800a970:	4770      	bx	lr

0800a972 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a972:	b480      	push	{r7}
 800a974:	b083      	sub	sp, #12
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	bc80      	pop	{r7}
 800a986:	4770      	bx	lr

0800a988 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d817      	bhi.n	800a9cc <USBD_Get_USB_Status+0x44>
 800a99c:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <USBD_Get_USB_Status+0x1c>)
 800a99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a2:	bf00      	nop
 800a9a4:	0800a9b5 	.word	0x0800a9b5
 800a9a8:	0800a9bb 	.word	0x0800a9bb
 800a9ac:	0800a9c1 	.word	0x0800a9c1
 800a9b0:	0800a9c7 	.word	0x0800a9c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b8:	e00b      	b.n	800a9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9be:	e008      	b.n	800a9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c4:	e005      	b.n	800a9d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ca:	e002      	b.n	800a9d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d0:	bf00      	nop
  }
  return usb_status;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bc80      	pop	{r7}
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop

0800a9e0 <__libc_init_array>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4d0c      	ldr	r5, [pc, #48]	; (800aa18 <__libc_init_array+0x38>)
 800a9e6:	4c0d      	ldr	r4, [pc, #52]	; (800aa1c <__libc_init_array+0x3c>)
 800a9e8:	1b64      	subs	r4, r4, r5
 800a9ea:	10a4      	asrs	r4, r4, #2
 800a9ec:	42a6      	cmp	r6, r4
 800a9ee:	d109      	bne.n	800aa04 <__libc_init_array+0x24>
 800a9f0:	f000 f830 	bl	800aa54 <_init>
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	4d0a      	ldr	r5, [pc, #40]	; (800aa20 <__libc_init_array+0x40>)
 800a9f8:	4c0a      	ldr	r4, [pc, #40]	; (800aa24 <__libc_init_array+0x44>)
 800a9fa:	1b64      	subs	r4, r4, r5
 800a9fc:	10a4      	asrs	r4, r4, #2
 800a9fe:	42a6      	cmp	r6, r4
 800aa00:	d105      	bne.n	800aa0e <__libc_init_array+0x2e>
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa08:	4798      	blx	r3
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	e7ee      	b.n	800a9ec <__libc_init_array+0xc>
 800aa0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa12:	4798      	blx	r3
 800aa14:	3601      	adds	r6, #1
 800aa16:	e7f2      	b.n	800a9fe <__libc_init_array+0x1e>
 800aa18:	0800ad6c 	.word	0x0800ad6c
 800aa1c:	0800ad6c 	.word	0x0800ad6c
 800aa20:	0800ad6c 	.word	0x0800ad6c
 800aa24:	0800ad70 	.word	0x0800ad70

0800aa28 <memcpy>:
 800aa28:	440a      	add	r2, r1
 800aa2a:	4291      	cmp	r1, r2
 800aa2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa30:	d100      	bne.n	800aa34 <memcpy+0xc>
 800aa32:	4770      	bx	lr
 800aa34:	b510      	push	{r4, lr}
 800aa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa40:	d1f9      	bne.n	800aa36 <memcpy+0xe>
 800aa42:	bd10      	pop	{r4, pc}

0800aa44 <memset>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	4402      	add	r2, r0
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d100      	bne.n	800aa4e <memset+0xa>
 800aa4c:	4770      	bx	lr
 800aa4e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa52:	e7f9      	b.n	800aa48 <memset+0x4>

0800aa54 <_init>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	bf00      	nop
 800aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5a:	bc08      	pop	{r3}
 800aa5c:	469e      	mov	lr, r3
 800aa5e:	4770      	bx	lr

0800aa60 <_fini>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr
